{
package parser

import (
"bytes"
"errors"
"fmt"
"io"
"io/ioutil"
"os"
"strconv"
"strings"
"unicode"
"unicode/utf8"
)
import "github.com/philandstuff/dhall-golang/ast"

}

CompleteExpression ← _ e:Expression _ EOF { return e, nil }

EOL ← "\n" / "\r\n"

NotEOL ← [\t\u0020-\U0010ffff]

LineComment ← "--" content:(NotEOL* { return string(c.text), nil}) EOL { return content, nil }

WhitespaceChunk ← ' ' / '\t' / EOL / LineComment // / BlockComment

_ ← WhitespaceChunk*

NonemptyWhitespace ← WhitespaceChunk+

SimpleLabel ← [A-Za-z_] [A-Za-z0-9_/-]* { return string(c.text), nil }

// QuotedLabel

Label ← label:SimpleLabel { return label, nil }

Reserved ← "Bool"
  / "Optional"
  / "None"
  / "Natural" { return ast.Natural, nil }
  / "Integer"
  / "Double"
  / "Text"
  / "List"
  / "True"
  / "False"
  / "NaN"
  / "Infinity"
  / "Type" { return ast.Type, nil }
  / "Kind" { return ast.Kind, nil }
  / "Sort" { return ast.Sort, nil }

ColonSpace ← ':' NonemptyWhitespace

Lambda ← ('\\' / 'λ')
Forall ← ("forall" / '∀')
Arrow ← ("->" / '→')


NaturalLiteral ← [0-9]+ {
      i, err := strconv.Atoi(string(c.text))
      if err != nil {
         return nil, err
      }
      return ast.NaturalLit(i), nil
}

SpaceDeBruijn ← _ '@' _ index:NaturalLiteral { return index.(int), nil }

Identifier ← name:Label index:SpaceDeBruijn? {
    if index != nil {
        return ast.Var{Name:name.(string), Index:index.(int)}, nil
    } else {
        return ast.Var{Name:name.(string)}, nil
    }
}

IdentifierReservedPrefix ← reserved:Reserved suffix:([A-Za-z0-9/_-]+ { return string(c.text), nil }) index:SpaceDeBruijn? {
    name := reserved.(string) + suffix.(string)
    if index != nil {
        return ast.Var{Name:name, Index:index.(int)}, nil
    } else {
        return ast.Var{Name:name}, nil
    }
}

// NOTE: Every rule past this point should pad all rules with (required or optional)
// whitespace.  This ensures consistent handling of whitespace in the absence of
// a separate lexing step.
//
// Note that we can't do what the dhall-lang dhall.abnf does, and refer to
// rules which end with Whitespace, because this causes parsing problems with
// pigeon when we want to enforce nonempty whitespace (such as in ImportExpression)
// but the previous Whitespace rule has greedily consumed all the whitespace.

Expression ←
      Lambda _ '(' _ label:Label _ ColonSpace t:Expression _ ')' _ Arrow _ body:Expression {
          return &ast.LambdaExpr{Label:label.(string), Type:t.(ast.Expr), Body: body.(ast.Expr)}, nil
      }
    / Forall _ '(' _ label:Label _ ColonSpace t:Expression _ ')' _ Arrow _ body:Expression {
          return &ast.Pi{Label:label.(string), Type:t.(ast.Expr), Body: body.(ast.Expr)}, nil
      }
    / AnnotatedExpression

AnnotatedExpression ← OperatorExpression

OperatorExpression ← ImportAltExpression

ImportAltExpression ← // we've skipped some steps here...
      ApplicationExpression

AnArg = NonemptyWhitespace e:ImportExpression { return e, nil }

ApplicationExpression ← f:ImportExpression rest:AnArg* {
          e := f.(ast.Expr)
          if rest == nil { return e, nil }
          for _, arg := range rest.([]interface{}) {
              e = &ast.App{Fn:e, Arg: arg.(ast.Expr)}
          }
          return e,nil
      }

ImportExpression ← SelectorExpression

SelectorExpression ← PrimitiveExpression

PrimitiveExpression ←
      NaturalLiteral
    / IdentifierReservedPrefix
    / Reserved
    / Identifier
    / '(' _ e:Expression _ ')' { return e, nil }

EOF ← !.
