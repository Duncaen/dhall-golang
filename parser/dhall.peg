{
package parser

import (
"bytes"
"errors"
"fmt"
"io"
"io/ioutil"
"math"
"os"
"strconv"
"strings"
"unicode"
"unicode/utf8"
)
import "github.com/philandstuff/dhall-golang/ast"

}

CompleteExpression ← _ e:Expression _ EOF { return e, nil }

EOL ← "\n" / "\r\n"

BlockComment ← "{-" BlockCommentContinue

BlockCommentChunk ←
    BlockComment
  / [\t\u0020-\U0010ffff]
  / EOL

BlockCommentContinue ← "-}" / BlockCommentChunk BlockCommentContinue

NotEOL ← [\t\u0020-\U0010ffff]

LineComment ← "--" content:(NotEOL* { return string(c.text), nil}) EOL { return content, nil }

WhitespaceChunk ← ' ' / '\t' / EOL / LineComment / BlockComment

_ ← WhitespaceChunk*

NonemptyWhitespace ← WhitespaceChunk+

SimpleLabel ← !Keyword
            [A-Za-z_] [A-Za-z0-9_/-]* { return string(c.text), nil }

// QuotedLabel

Label ← label:SimpleLabel { return label, nil }

Reserved ← "Bool" { return ast.Bool, nil }
  / "Optional"
  / "None"
  / "Natural" { return ast.Natural, nil }
  / "Integer" { return ast.Integer, nil }
  / "Double" { return ast.Double, nil }
  / "Text"
  / "List" { return ast.List, nil }
  / "True" { return ast.True, nil }
  / "False" { return ast.False, nil }
  / "NaN" { return ast.DoubleLit(math.NaN()), nil }
  / "Infinity" { return ast.DoubleLit(math.Inf(1)), nil }
  / "Type" { return ast.Type, nil }
  / "Kind" { return ast.Kind, nil }
  / "Sort" { return ast.Sort, nil }

Keyword ← "if"
  / "then"
  / "else"
  / "let"
  / "in"
  / "as"
  / "using"
  / "merge"
  / "constructors"
  / "Some"

ColonSpace ← ':' NonemptyWhitespace

Lambda ← ('\\' / 'λ')
Forall ← ("forall" / '∀')
Arrow ← ("->" / '→')

Exponent ← "e"i [+-]? [0-9]+

DoubleLiteral ← [+-]? [0-9]+ ( "." [0-9]+ Exponent? / Exponent) {
      d, err := strconv.ParseFloat(string(c.text), 64)
      if err != nil {
         return nil, err
      }
      return ast.DoubleLit(d), nil
}

NaturalLiteral ← [0-9]+ {
      i, err := strconv.Atoi(string(c.text))
      if err != nil {
         return nil, err
      }
      return ast.NaturalLit(i), nil
}

IntegerLiteral ← [+-][0-9]+ {
      i, err := strconv.Atoi(string(c.text))
      if err != nil {
         return nil, err
      }
      return ast.IntegerLit(i), nil
}

SpaceDeBruijn ← _ '@' _ index:NaturalLiteral { return int(index.(ast.NaturalLit)), nil }

Identifier ← name:Label index:SpaceDeBruijn? {
    if index != nil {
        return ast.Var{Name:name.(string), Index:index.(int)}, nil
    } else {
        return ast.Var{Name:name.(string)}, nil
    }
}

IdentifierReservedPrefix ←
         name:(Reserved [A-Za-z0-9/_-]+ { return string(c.text),nil })
         index:SpaceDeBruijn? {
    if index != nil {
        return ast.Var{Name:name.(string), Index:index.(int)}, nil
    } else {
        return ast.Var{Name:name.(string)}, nil
    }
}

// NOTE: Every rule past this point should pad all rules with (required or optional)
// whitespace.  This ensures consistent handling of whitespace in the absence of
// a separate lexing step.
//
// Note that we can't do what the dhall-lang dhall.abnf does, and refer to
// rules which end with Whitespace, because this causes parsing problems with
// pigeon when we want to enforce nonempty whitespace (such as in ImportExpression)
// but the previous Whitespace rule has greedily consumed all the whitespace.

Expression ←
      Lambda _ '(' _ label:Label _ ColonSpace t:Expression _ ')' _ Arrow _ body:Expression {
          return &ast.LambdaExpr{Label:label.(string), Type:t.(ast.Expr), Body: body.(ast.Expr)}, nil
      }
    / Forall _ '(' _ label:Label _ ColonSpace t:Expression _ ')' _ Arrow _ body:Expression {
          return &ast.Pi{Label:label.(string), Type:t.(ast.Expr), Body: body.(ast.Expr)}, nil
      }
    / o:OperatorExpression _ Arrow _ e:Expression { return &ast.Pi{"_",o.(ast.Expr),e.(ast.Expr)}, nil }
    / AnnotatedExpression

Annotation ← _ ColonSpace a:Expression { return a, nil }

AnnotatedExpression ←
    EmptyList
  / e:OperatorExpression a:Annotation? {
        if a == nil { return e, nil }
        return ast.Annot{e.(ast.Expr), a.(ast.Expr)}, nil
    }

EmptyList ← '[' _ ']' _ ColonSpace "List" _ a:ImportExpression {
          return ast.EmptyList{a.(ast.Expr)},nil
}

OperatorExpression ← ImportAltExpression

ImportAltExpression ← PlusExpression

MorePlus ← _ '+' NonemptyWhitespace e:ApplicationExpression { return e, nil }
PlusExpression ←
      first:ApplicationExpression rest:MorePlus* {
          a := first.(ast.Expr)
          if rest == nil { return a, nil }
          for _, b := range rest.([]interface{}) {
              a = ast.NaturalPlus{L: a, R: b.(ast.Expr)}
          }
          return a, nil
      }

AnArg = NonemptyWhitespace e:ImportExpression { return e, nil }

ApplicationExpression ← f:ImportExpression rest:AnArg* {
          e := f.(ast.Expr)
          if rest == nil { return e, nil }
          for _, arg := range rest.([]interface{}) {
              e = &ast.App{Fn:e, Arg: arg.(ast.Expr)}
          }
          return e,nil
      }

ImportExpression ← SelectorExpression

SelectorExpression ← PrimitiveExpression

PrimitiveExpression ←
      DoubleLiteral
    / NaturalLiteral
    / IntegerLiteral
    / "-Infinity" { return ast.DoubleLit(math.Inf(-1)), nil }
    / NonEmptyListLiteral
    / IdentifierReservedPrefix
    / Reserved
    / Identifier
    / '(' _ e:Expression _ ')' { return e, nil }

CommaExpression ← (',' _ e:Expression _) {return e, nil}

NonEmptyListLiteral ←
      '[' _ first:Expression _ rest:CommaExpression* ']' {
          exprs := rest.([]interface{})
          content := make([]ast.Expr, len(exprs)+1)
          content[0] = first.(ast.Expr)
          for i, expr := range(exprs) {
              content[i+1] = expr.(ast.Expr)
          }
          return ast.NonEmptyList(content), nil
      }

EOF ← !.
