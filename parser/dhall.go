// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"crypto/sha256"
	"encoding/hex"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"net"
	"net/url"
	"os"
	"path"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	. "github.com/philandstuff/dhall-golang/ast"
)

// Helper function for parsing all the operator parsing blocks
// see OrExpression for an example of how this is used
func ParseOperator(opcode int, first, rest interface{}) Expr {
	out := first.(Expr)
	if rest == nil {
		return out
	}
	for _, b := range rest.([]interface{}) {
		nextExpr := b.([]interface{})[3].(Expr)
		out = Operator{OpCode: opcode, L: out, R: nextExpr}
	}
	return out
}

func IsNonCharacter(r rune) bool {
	return r&0xfffe == 0xfffe
}

func ValidCodepoint(r rune) bool {
	return utf8.ValidRune(r) && !IsNonCharacter(r)
}

// Helper for parsing unicode code points
func ParseCodepoint(codepointText string) ([]byte, error) {
	i, err := strconv.ParseInt(codepointText, 16, 32)
	if err != nil {
		return nil, err
	}
	r := rune(i)
	if !ValidCodepoint(r) {
		return nil, fmt.Errorf("%s is not a valid unicode code point", codepointText)
	}
	return []byte(string([]rune{r})), nil
}

var g = &grammar{
	rules: []*rule{
		{
			name: "DhallFile",
			pos:  position{line: 57, col: 1, offset: 1189},
			expr: &actionExpr{
				pos: position{line: 57, col: 13, offset: 1203},
				run: (*parser).callonDhallFile1,
				expr: &seqExpr{
					pos: position{line: 57, col: 13, offset: 1203},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 57, col: 13, offset: 1203},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 15, offset: 1205},
								name: "CompleteExpression",
							},
						},
						&notExpr{
							pos: position{line: 711, col: 7, offset: 22618},
							expr: &anyMatcher{
								line: 711, col: 8, offset: 22619,
							},
						},
					},
				},
			},
		},
		{
			name: "CompleteExpression",
			pos:  position{line: 59, col: 1, offset: 1247},
			expr: &actionExpr{
				pos: position{line: 59, col: 22, offset: 1270},
				run: (*parser).callonCompleteExpression1,
				expr: &seqExpr{
					pos: position{line: 59, col: 22, offset: 1270},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 59, col: 22, offset: 1270},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 59, col: 24, offset: 1272},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 59, col: 26, offset: 1274},
								name: "Expression",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 59, col: 37, offset: 1285},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "BlockComment",
			pos:  position{line: 83, col: 1, offset: 1867},
			expr: &seqExpr{
				pos: position{line: 83, col: 16, offset: 1884},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 83, col: 16, offset: 1884},
						val:        "{-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 83, col: 21, offset: 1889},
						name: "BlockCommentContinue",
					},
				},
			},
		},
		{
			name: "BlockCommentContinue",
			pos:  position{line: 91, col: 1, offset: 1984},
			expr: &choiceExpr{
				pos: position{line: 92, col: 7, offset: 2015},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 92, col: 7, offset: 2015},
						val:        "-}",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 93, col: 7, offset: 2026},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 93, col: 7, offset: 2026},
								name: "BlockComment",
							},
							&ruleRefExpr{
								pos:  position{line: 93, col: 20, offset: 2039},
								name: "BlockCommentContinue",
							},
						},
					},
					&seqExpr{
						pos: position{line: 94, col: 7, offset: 2066},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 86, col: 5, offset: 1936},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 86, col: 5, offset: 1936},
										val:        "[êÄÄD\\t\\n -\\u007f\\u0080-\\ud7ff\\ue000-ÔøΩêÄÄ-\\U0001fffd†ÄÄ-\\U0002fffd\\U00030000-\\U0003fffd\\U00040000-\\U0004fffd\\U00050000-\\U0005fffd\\U00060000-\\U0006fffd\\U00070000-\\U0007fffd\\U00080000-\\U0008fffd\\U00090000-\\U0009fffd\\U000a0000-\\U000afffd\\U000b0000-\\U000bfffd\\U000c0000-\\U000cfffd\\U000d0000-\\U000dfffd\\U000e0000-\\U000efffd\\U000f0000-\\U000ffffd0-\\U00010fff]",
										chars:      []rune{'êÄÄ', 'D', '\t', '\n'},
										ranges:     []rune{' ', '\u007f', '\u0080', '\ud7ff', '\ue000', 'ÔøΩ', 'êÄÄ', '\U0001fffd', '†ÄÄ', '\U0002fffd', '\U00030000', '\U0003fffd', '\U00040000', '\U0004fffd', '\U00050000', '\U0005fffd', '\U00060000', '\U0006fffd', '\U00070000', '\U0007fffd', '\U00080000', '\U0008fffd', '\U00090000', '\U0009fffd', '\U000a0000', '\U000afffd', '\U000b0000', '\U000bfffd', '\U000c0000', '\U000cfffd', '\U000d0000', '\U000dfffd', '\U000e0000', '\U000efffd', '\U000f0000', '\U000ffffd', '0', '\U00010fff'},
										ignoreCase: false,
										inverted:   false,
									},
									&actionExpr{
										pos: position{line: 61, col: 14, offset: 1321},
										run: (*parser).callonBlockCommentContinue9,
										expr: &litMatcher{
											pos:        position{line: 61, col: 14, offset: 1321},
											val:        "\r\n",
											ignoreCase: false,
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 94, col: 24, offset: 2083},
								name: "BlockCommentContinue",
							},
						},
					},
				},
			},
		},
		{
			name: "WhitespaceChunk",
			pos:  position{line: 100, col: 1, offset: 2250},
			expr: &choiceExpr{
				pos: position{line: 100, col: 19, offset: 2270},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 100, col: 19, offset: 2270},
						val:        "[ \\t\\n]",
						chars:      []rune{' ', '\t', '\n'},
						ignoreCase: false,
						inverted:   false,
					},
					&actionExpr{
						pos: position{line: 61, col: 14, offset: 1321},
						run: (*parser).callonWhitespaceChunk3,
						expr: &litMatcher{
							pos:        position{line: 61, col: 14, offset: 1321},
							val:        "\r\n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 98, col: 15, offset: 2168},
						run: (*parser).callonWhitespaceChunk5,
						expr: &seqExpr{
							pos: position{line: 98, col: 15, offset: 2168},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 98, col: 15, offset: 2168},
									val:        "--",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 98, col: 20, offset: 2173},
									label: "content",
									expr: &actionExpr{
										pos: position{line: 98, col: 29, offset: 2182},
										run: (*parser).callonWhitespaceChunk9,
										expr: &zeroOrMoreExpr{
											pos: position{line: 98, col: 29, offset: 2182},
											expr: &charClassMatcher{
												pos:        position{line: 96, col: 10, offset: 2116},
												val:        "[êÄÄD\\t -\\u007f\\u0080-\\ud7ff\\ue000-ÔøΩêÄÄ-\\U0001fffd†ÄÄ-\\U0002fffd\\U00030000-\\U0003fffd\\U00040000-\\U0004fffd\\U00050000-\\U0005fffd\\U00060000-\\U0006fffd\\U00070000-\\U0007fffd\\U00080000-\\U0008fffd\\U00090000-\\U0009fffd\\U000a0000-\\U000afffd\\U000b0000-\\U000bfffd\\U000c0000-\\U000cfffd\\U000d0000-\\U000dfffd\\U000e0000-\\U000efffd\\U000f0000-\\U000ffffd0-\\U00010fff]",
												chars:      []rune{'êÄÄ', 'D', '\t'},
												ranges:     []rune{' ', '\u007f', '\u0080', '\ud7ff', '\ue000', 'ÔøΩ', 'êÄÄ', '\U0001fffd', '†ÄÄ', '\U0002fffd', '\U00030000', '\U0003fffd', '\U00040000', '\U0004fffd', '\U00050000', '\U0005fffd', '\U00060000', '\U0006fffd', '\U00070000', '\U0007fffd', '\U00080000', '\U0008fffd', '\U00090000', '\U0009fffd', '\U000a0000', '\U000afffd', '\U000b0000', '\U000bfffd', '\U000c0000', '\U000cfffd', '\U000d0000', '\U000dfffd', '\U000e0000', '\U000efffd', '\U000f0000', '\U000ffffd', '0', '\U00010fff'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&choiceExpr{
									pos: position{line: 61, col: 7, offset: 1314},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 61, col: 7, offset: 1314},
											val:        "\n",
											ignoreCase: false,
										},
										&actionExpr{
											pos: position{line: 61, col: 14, offset: 1321},
											run: (*parser).callonWhitespaceChunk14,
											expr: &litMatcher{
												pos:        position{line: 61, col: 14, offset: 1321},
												val:        "\r\n",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 100, col: 52, offset: 2303},
						name: "BlockComment",
					},
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 102, col: 1, offset: 2317},
			expr: &zeroOrMoreExpr{
				pos: position{line: 102, col: 5, offset: 2323},
				expr: &ruleRefExpr{
					pos:  position{line: 102, col: 5, offset: 2323},
					name: "WhitespaceChunk",
				},
			},
		},
		{
			name: "_1",
			pos:  position{line: 104, col: 1, offset: 2341},
			expr: &oneOrMoreExpr{
				pos: position{line: 104, col: 6, offset: 2348},
				expr: &ruleRefExpr{
					pos:  position{line: 104, col: 6, offset: 2348},
					name: "WhitespaceChunk",
				},
			},
		},
		{
			name: "DoubleQuoteChunk",
			pos:  position{line: 130, col: 1, offset: 3071},
			expr: &choiceExpr{
				pos: position{line: 131, col: 6, offset: 3097},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 131, col: 6, offset: 3097},
						name: "Interpolation",
					},
					&actionExpr{
						pos: position{line: 132, col: 6, offset: 3116},
						run: (*parser).callonDoubleQuoteChunk3,
						expr: &seqExpr{
							pos: position{line: 132, col: 6, offset: 3116},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 132, col: 6, offset: 3116},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 132, col: 11, offset: 3121},
									label: "e",
									expr: &choiceExpr{
										pos: position{line: 136, col: 8, offset: 3212},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 136, col: 8, offset: 3212},
												val:        "[\"$\\\\/]",
												chars:      []rune{'"', '$', '\\', '/'},
												ignoreCase: false,
												inverted:   false,
											},
											&actionExpr{
												pos: position{line: 140, col: 8, offset: 3257},
												run: (*parser).callonDoubleQuoteChunk9,
												expr: &litMatcher{
													pos:        position{line: 140, col: 8, offset: 3257},
													val:        "b",
													ignoreCase: false,
												},
											},
											&actionExpr{
												pos: position{line: 141, col: 8, offset: 3297},
												run: (*parser).callonDoubleQuoteChunk11,
												expr: &litMatcher{
													pos:        position{line: 141, col: 8, offset: 3297},
													val:        "f",
													ignoreCase: false,
												},
											},
											&actionExpr{
												pos: position{line: 142, col: 8, offset: 3337},
												run: (*parser).callonDoubleQuoteChunk13,
												expr: &litMatcher{
													pos:        position{line: 142, col: 8, offset: 3337},
													val:        "n",
													ignoreCase: false,
												},
											},
											&actionExpr{
												pos: position{line: 143, col: 8, offset: 3377},
												run: (*parser).callonDoubleQuoteChunk15,
												expr: &litMatcher{
													pos:        position{line: 143, col: 8, offset: 3377},
													val:        "r",
													ignoreCase: false,
												},
											},
											&actionExpr{
												pos: position{line: 144, col: 8, offset: 3417},
												run: (*parser).callonDoubleQuoteChunk17,
												expr: &litMatcher{
													pos:        position{line: 144, col: 8, offset: 3417},
													val:        "t",
													ignoreCase: false,
												},
											},
											&actionExpr{
												pos: position{line: 145, col: 8, offset: 3457},
												run: (*parser).callonDoubleQuoteChunk19,
												expr: &seqExpr{
													pos: position{line: 145, col: 8, offset: 3457},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 145, col: 8, offset: 3457},
															val:        "u",
															ignoreCase: false,
														},
														&labeledExpr{
															pos:   position{line: 145, col: 12, offset: 3461},
															label: "u",
															expr: &choiceExpr{
																pos: position{line: 148, col: 9, offset: 3522},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 148, col: 9, offset: 3522},
																		run: (*parser).callonDoubleQuoteChunk24,
																		expr: &seqExpr{
																			pos: position{line: 148, col: 9, offset: 3522},
																			exprs: []interface{}{
																				&choiceExpr{
																					pos: position{line: 108, col: 10, offset: 2394},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 106, col: 9, offset: 2376},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 108, col: 18, offset: 2402},
																							val:        "[a-f]i",
																							ranges:     []rune{'a', 'f'},
																							ignoreCase: true,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 108, col: 10, offset: 2394},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 106, col: 9, offset: 2376},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 108, col: 18, offset: 2402},
																							val:        "[a-f]i",
																							ranges:     []rune{'a', 'f'},
																							ignoreCase: true,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 108, col: 10, offset: 2394},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 106, col: 9, offset: 2376},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 108, col: 18, offset: 2402},
																							val:        "[a-f]i",
																							ranges:     []rune{'a', 'f'},
																							ignoreCase: true,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 108, col: 10, offset: 2394},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 106, col: 9, offset: 2376},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 108, col: 18, offset: 2402},
																							val:        "[a-f]i",
																							ranges:     []rune{'a', 'f'},
																							ignoreCase: true,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 151, col: 9, offset: 3620},
																		run: (*parser).callonDoubleQuoteChunk38,
																		expr: &seqExpr{
																			pos: position{line: 151, col: 9, offset: 3620},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 151, col: 9, offset: 3620},
																					val:        "{",
																					ignoreCase: false,
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 151, col: 13, offset: 3624},
																					expr: &choiceExpr{
																						pos: position{line: 108, col: 10, offset: 2394},
																						alternatives: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 106, col: 9, offset: 2376},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 108, col: 18, offset: 2402},
																								val:        "[a-f]i",
																								ranges:     []rune{'a', 'f'},
																								ignoreCase: true,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 151, col: 21, offset: 3632},
																					val:        "}",
																					ignoreCase: false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 156, col: 6, offset: 3741},
						val:        "[êÄÄD -!#-[]-\\u007f\\u0080-\\ud7ff\\ue000-ÔøΩêÄÄ-\\U0001fffd†ÄÄ-\\U0002fffd\\U00030000-\\U0003fffd\\U00040000-\\U0004fffd\\U00050000-\\U0005fffd\\U00060000-\\U0006fffd\\U00070000-\\U0007fffd\\U00080000-\\U0008fffd\\U00090000-\\U0009fffd\\U000a0000-\\U000afffd\\U000b0000-\\U000bfffd\\U000c0000-\\U000cfffd\\U000d0000-\\U000dfffd\\U000e0000-\\U000efffd\\U000f0000-\\U000ffffd0-\\U00010fff]",
						chars:      []rune{'êÄÄ', 'D'},
						ranges:     []rune{' ', '!', '#', '[', ']', '\u007f', '\u0080', '\ud7ff', '\ue000', 'ÔøΩ', 'êÄÄ', '\U0001fffd', '†ÄÄ', '\U0002fffd', '\U00030000', '\U0003fffd', '\U00040000', '\U0004fffd', '\U00050000', '\U0005fffd', '\U00060000', '\U0006fffd', '\U00070000', '\U0007fffd', '\U00080000', '\U0008fffd', '\U00090000', '\U0009fffd', '\U000a0000', '\U000afffd', '\U000b0000', '\U000bfffd', '\U000c0000', '\U000cfffd', '\U000d0000', '\U000dfffd', '\U000e0000', '\U000efffd', '\U000f0000', '\U000ffffd', '0', '\U00010fff'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "DoubleQuoteLiteral",
			pos:  position{line: 161, col: 1, offset: 3807},
			expr: &actionExpr{
				pos: position{line: 161, col: 22, offset: 3830},
				run: (*parser).callonDoubleQuoteLiteral1,
				expr: &seqExpr{
					pos: position{line: 161, col: 22, offset: 3830},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 161, col: 22, offset: 3830},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 161, col: 26, offset: 3834},
							label: "chunks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 161, col: 33, offset: 3841},
								expr: &ruleRefExpr{
									pos:  position{line: 161, col: 33, offset: 3841},
									name: "DoubleQuoteChunk",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 161, col: 51, offset: 3859},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteContinue",
			pos:  position{line: 178, col: 1, offset: 4327},
			expr: &choiceExpr{
				pos: position{line: 179, col: 7, offset: 4357},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 179, col: 7, offset: 4357},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 179, col: 7, offset: 4357},
								name: "Interpolation",
							},
							&ruleRefExpr{
								pos:  position{line: 179, col: 21, offset: 4371},
								name: "SingleQuoteContinue",
							},
						},
					},
					&seqExpr{
						pos: position{line: 180, col: 7, offset: 4397},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 185, col: 20, offset: 4556},
								run: (*parser).callonSingleQuoteContinue6,
								expr: &litMatcher{
									pos:        position{line: 185, col: 20, offset: 4556},
									val:        "'''",
									ignoreCase: false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 180, col: 24, offset: 4414},
								name: "SingleQuoteContinue",
							},
						},
					},
					&seqExpr{
						pos: position{line: 181, col: 7, offset: 4440},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 189, col: 24, offset: 4716},
								run: (*parser).callonSingleQuoteContinue10,
								expr: &litMatcher{
									pos:        position{line: 189, col: 24, offset: 4716},
									val:        "''${",
									ignoreCase: false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 181, col: 28, offset: 4461},
								name: "SingleQuoteContinue",
							},
						},
					},
					&seqExpr{
						pos: position{line: 182, col: 7, offset: 4487},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 192, col: 6, offset: 4783},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 192, col: 6, offset: 4783},
										val:        "[êÄÄD\\t\\n -\\u007f\\u0080-\\ud7ff\\ue000-ÔøΩêÄÄ-\\U0001fffd†ÄÄ-\\U0002fffd\\U00030000-\\U0003fffd\\U00040000-\\U0004fffd\\U00050000-\\U0005fffd\\U00060000-\\U0006fffd\\U00070000-\\U0007fffd\\U00080000-\\U0008fffd\\U00090000-\\U0009fffd\\U000a0000-\\U000afffd\\U000b0000-\\U000bfffd\\U000c0000-\\U000cfffd\\U000d0000-\\U000dfffd\\U000e0000-\\U000efffd\\U000f0000-\\U000ffffd0-\\U00010fff]",
										chars:      []rune{'êÄÄ', 'D', '\t', '\n'},
										ranges:     []rune{' ', '\u007f', '\u0080', '\ud7ff', '\ue000', 'ÔøΩ', 'êÄÄ', '\U0001fffd', '†ÄÄ', '\U0002fffd', '\U00030000', '\U0003fffd', '\U00040000', '\U0004fffd', '\U00050000', '\U0005fffd', '\U00060000', '\U0006fffd', '\U00070000', '\U0007fffd', '\U00080000', '\U0008fffd', '\U00090000', '\U0009fffd', '\U000a0000', '\U000afffd', '\U000b0000', '\U000bfffd', '\U000c0000', '\U000cfffd', '\U000d0000', '\U000dfffd', '\U000e0000', '\U000efffd', '\U000f0000', '\U000ffffd', '0', '\U00010fff'},
										ignoreCase: false,
										inverted:   false,
									},
									&actionExpr{
										pos: position{line: 61, col: 14, offset: 1321},
										run: (*parser).callonSingleQuoteContinue16,
										expr: &litMatcher{
											pos:        position{line: 61, col: 14, offset: 1321},
											val:        "\r\n",
											ignoreCase: false,
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 182, col: 23, offset: 4503},
								name: "SingleQuoteContinue",
							},
						},
					},
					&litMatcher{
						pos:        position{line: 183, col: 7, offset: 4529},
						val:        "''",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleQuoteLiteral",
			pos:  position{line: 197, col: 1, offset: 4834},
			expr: &actionExpr{
				pos: position{line: 197, col: 22, offset: 4857},
				run: (*parser).callonSingleQuoteLiteral1,
				expr: &seqExpr{
					pos: position{line: 197, col: 22, offset: 4857},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 197, col: 22, offset: 4857},
							val:        "''",
							ignoreCase: false,
						},
						&choiceExpr{
							pos: position{line: 61, col: 7, offset: 1314},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 61, col: 7, offset: 1314},
									val:        "\n",
									ignoreCase: false,
								},
								&actionExpr{
									pos: position{line: 61, col: 14, offset: 1321},
									run: (*parser).callonSingleQuoteLiteral6,
									expr: &litMatcher{
										pos:        position{line: 61, col: 14, offset: 1321},
										val:        "\r\n",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 197, col: 31, offset: 4866},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 197, col: 39, offset: 4874},
								name: "SingleQuoteContinue",
							},
						},
					},
				},
			},
		},
		{
			name: "Interpolation",
			pos:  position{line: 215, col: 1, offset: 5424},
			expr: &actionExpr{
				pos: position{line: 215, col: 17, offset: 5442},
				run: (*parser).callonInterpolation1,
				expr: &seqExpr{
					pos: position{line: 215, col: 17, offset: 5442},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 215, col: 17, offset: 5442},
							val:        "${",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 215, col: 22, offset: 5447},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 215, col: 24, offset: 5449},
								name: "CompleteExpression",
							},
						},
						&litMatcher{
							pos:        position{line: 215, col: 43, offset: 5468},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TextLiteral",
			pos:  position{line: 217, col: 1, offset: 5491},
			expr: &choiceExpr{
				pos: position{line: 217, col: 15, offset: 5507},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 217, col: 15, offset: 5507},
						name: "DoubleQuoteLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 217, col: 36, offset: 5528},
						name: "SingleQuoteLiteral",
					},
				},
			},
		},
		{
			name: "DeBruijn",
			pos:  position{line: 322, col: 1, offset: 8506},
			expr: &actionExpr{
				pos: position{line: 322, col: 12, offset: 8519},
				run: (*parser).callonDeBruijn1,
				expr: &seqExpr{
					pos: position{line: 322, col: 12, offset: 8519},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 322, col: 12, offset: 8519},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 322, col: 14, offset: 8521},
							val:        "@",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 322, col: 18, offset: 8525},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 322, col: 20, offset: 8527},
							label: "index",
							expr: &actionExpr{
								pos: position{line: 309, col: 18, offset: 8242},
								run: (*parser).callonDeBruijn7,
								expr: &oneOrMoreExpr{
									pos: position{line: 309, col: 18, offset: 8242},
									expr: &charClassMatcher{
										pos:        position{line: 106, col: 9, offset: 2376},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Variable",
			pos:  position{line: 324, col: 1, offset: 8589},
			expr: &actionExpr{
				pos: position{line: 324, col: 12, offset: 8602},
				run: (*parser).callonVariable1,
				expr: &seqExpr{
					pos: position{line: 324, col: 12, offset: 8602},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 324, col: 12, offset: 8602},
							label: "name",
							expr: &choiceExpr{
								pos: position{line: 124, col: 20, offset: 2921},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 124, col: 20, offset: 2921},
										run: (*parser).callonVariable5,
										expr: &seqExpr{
											pos: position{line: 124, col: 20, offset: 2921},
											exprs: []interface{}{
												&andExpr{
													pos: position{line: 124, col: 20, offset: 2921},
													expr: &seqExpr{
														pos: position{line: 124, col: 22, offset: 2923},
														exprs: []interface{}{
															&choiceExpr{
																pos: position{line: 221, col: 5, offset: 5650},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 221, col: 5, offset: 5650},
																		run: (*parser).callonVariable10,
																		expr: &litMatcher{
																			pos:        position{line: 221, col: 5, offset: 5650},
																			val:        "Natural/build",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 222, col: 5, offset: 5699},
																		run: (*parser).callonVariable12,
																		expr: &litMatcher{
																			pos:        position{line: 222, col: 5, offset: 5699},
																			val:        "Natural/fold",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 223, col: 5, offset: 5746},
																		run: (*parser).callonVariable14,
																		expr: &litMatcher{
																			pos:        position{line: 223, col: 5, offset: 5746},
																			val:        "Natural/isZero",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 224, col: 5, offset: 5797},
																		run: (*parser).callonVariable16,
																		expr: &litMatcher{
																			pos:        position{line: 224, col: 5, offset: 5797},
																			val:        "Natural/even",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 225, col: 5, offset: 5844},
																		run: (*parser).callonVariable18,
																		expr: &litMatcher{
																			pos:        position{line: 225, col: 5, offset: 5844},
																			val:        "Natural/odd",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 226, col: 5, offset: 5889},
																		run: (*parser).callonVariable20,
																		expr: &litMatcher{
																			pos:        position{line: 226, col: 5, offset: 5889},
																			val:        "Natural/toInteger",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 227, col: 5, offset: 5946},
																		run: (*parser).callonVariable22,
																		expr: &litMatcher{
																			pos:        position{line: 227, col: 5, offset: 5946},
																			val:        "Natural/show",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 228, col: 5, offset: 5993},
																		run: (*parser).callonVariable24,
																		expr: &litMatcher{
																			pos:        position{line: 228, col: 5, offset: 5993},
																			val:        "Natural/subtract",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 229, col: 5, offset: 6048},
																		run: (*parser).callonVariable26,
																		expr: &litMatcher{
																			pos:        position{line: 229, col: 5, offset: 6048},
																			val:        "Integer/toDouble",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 230, col: 5, offset: 6103},
																		run: (*parser).callonVariable28,
																		expr: &litMatcher{
																			pos:        position{line: 230, col: 5, offset: 6103},
																			val:        "Integer/show",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 231, col: 5, offset: 6150},
																		run: (*parser).callonVariable30,
																		expr: &litMatcher{
																			pos:        position{line: 231, col: 5, offset: 6150},
																			val:        "Double/show",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 232, col: 5, offset: 6195},
																		run: (*parser).callonVariable32,
																		expr: &litMatcher{
																			pos:        position{line: 232, col: 5, offset: 6195},
																			val:        "List/build",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 233, col: 5, offset: 6238},
																		run: (*parser).callonVariable34,
																		expr: &litMatcher{
																			pos:        position{line: 233, col: 5, offset: 6238},
																			val:        "List/fold",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 234, col: 5, offset: 6279},
																		run: (*parser).callonVariable36,
																		expr: &litMatcher{
																			pos:        position{line: 234, col: 5, offset: 6279},
																			val:        "List/length",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 235, col: 5, offset: 6324},
																		run: (*parser).callonVariable38,
																		expr: &litMatcher{
																			pos:        position{line: 235, col: 5, offset: 6324},
																			val:        "List/head",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 236, col: 5, offset: 6365},
																		run: (*parser).callonVariable40,
																		expr: &litMatcher{
																			pos:        position{line: 236, col: 5, offset: 6365},
																			val:        "List/last",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 237, col: 5, offset: 6406},
																		run: (*parser).callonVariable42,
																		expr: &litMatcher{
																			pos:        position{line: 237, col: 5, offset: 6406},
																			val:        "List/indexed",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 238, col: 5, offset: 6453},
																		run: (*parser).callonVariable44,
																		expr: &litMatcher{
																			pos:        position{line: 238, col: 5, offset: 6453},
																			val:        "List/reverse",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 239, col: 5, offset: 6500},
																		run: (*parser).callonVariable46,
																		expr: &litMatcher{
																			pos:        position{line: 239, col: 5, offset: 6500},
																			val:        "Optional/build",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 240, col: 5, offset: 6551},
																		run: (*parser).callonVariable48,
																		expr: &litMatcher{
																			pos:        position{line: 240, col: 5, offset: 6551},
																			val:        "Optional/fold",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 241, col: 5, offset: 6600},
																		run: (*parser).callonVariable50,
																		expr: &litMatcher{
																			pos:        position{line: 241, col: 5, offset: 6600},
																			val:        "Text/show",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 242, col: 5, offset: 6641},
																		run: (*parser).callonVariable52,
																		expr: &litMatcher{
																			pos:        position{line: 242, col: 5, offset: 6641},
																			val:        "Bool",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 243, col: 5, offset: 6673},
																		run: (*parser).callonVariable54,
																		expr: &litMatcher{
																			pos:        position{line: 243, col: 5, offset: 6673},
																			val:        "True",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 244, col: 5, offset: 6705},
																		run: (*parser).callonVariable56,
																		expr: &litMatcher{
																			pos:        position{line: 244, col: 5, offset: 6705},
																			val:        "False",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 245, col: 5, offset: 6739},
																		run: (*parser).callonVariable58,
																		expr: &litMatcher{
																			pos:        position{line: 245, col: 5, offset: 6739},
																			val:        "Optional",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 246, col: 5, offset: 6779},
																		run: (*parser).callonVariable60,
																		expr: &litMatcher{
																			pos:        position{line: 246, col: 5, offset: 6779},
																			val:        "Natural",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 247, col: 5, offset: 6817},
																		run: (*parser).callonVariable62,
																		expr: &litMatcher{
																			pos:        position{line: 247, col: 5, offset: 6817},
																			val:        "Integer",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 248, col: 5, offset: 6855},
																		run: (*parser).callonVariable64,
																		expr: &litMatcher{
																			pos:        position{line: 248, col: 5, offset: 6855},
																			val:        "Double",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 249, col: 5, offset: 6891},
																		run: (*parser).callonVariable66,
																		expr: &litMatcher{
																			pos:        position{line: 249, col: 5, offset: 6891},
																			val:        "Text",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 250, col: 5, offset: 6923},
																		run: (*parser).callonVariable68,
																		expr: &litMatcher{
																			pos:        position{line: 250, col: 5, offset: 6923},
																			val:        "List",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 251, col: 5, offset: 6955},
																		run: (*parser).callonVariable70,
																		expr: &litMatcher{
																			pos:        position{line: 251, col: 5, offset: 6955},
																			val:        "None",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 252, col: 5, offset: 6987},
																		run: (*parser).callonVariable72,
																		expr: &litMatcher{
																			pos:        position{line: 252, col: 5, offset: 6987},
																			val:        "Type",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 253, col: 5, offset: 7019},
																		run: (*parser).callonVariable74,
																		expr: &litMatcher{
																			pos:        position{line: 253, col: 5, offset: 7019},
																			val:        "Kind",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 254, col: 5, offset: 7051},
																		run: (*parser).callonVariable76,
																		expr: &litMatcher{
																			pos:        position{line: 254, col: 5, offset: 7051},
																			val:        "Sort",
																			ignoreCase: false,
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 111, col: 23, offset: 2469},
																val:        "[_/-A-Za-z0-9]",
																chars:      []rune{'_', '/', '-'},
																ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 124, col: 52, offset: 2953},
													label: "label",
													expr: &choiceExpr{
														pos: position{line: 121, col: 9, offset: 2803},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 121, col: 9, offset: 2803},
																run: (*parser).callonVariable81,
																expr: &seqExpr{
																	pos: position{line: 121, col: 9, offset: 2803},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 121, col: 9, offset: 2803},
																			val:        "`",
																			ignoreCase: false,
																		},
																		&labeledExpr{
																			pos:   position{line: 121, col: 13, offset: 2807},
																			label: "label",
																			expr: &actionExpr{
																				pos: position{line: 119, col: 15, offset: 2744},
																				run: (*parser).callonVariable85,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 119, col: 15, offset: 2744},
																					expr: &charClassMatcher{
																						pos:        position{line: 118, col: 19, offset: 2707},
																						val:        "[ -_a-~]",
																						ranges:     []rune{' ', '_', 'a', '~'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 121, col: 31, offset: 2825},
																			val:        "`",
																			ignoreCase: false,
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 122, col: 9, offset: 2859},
																run: (*parser).callonVariable89,
																expr: &labeledExpr{
																	pos:   position{line: 122, col: 9, offset: 2859},
																	label: "label",
																	expr: &choiceExpr{
																		pos: position{line: 112, col: 15, offset: 2500},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 112, col: 15, offset: 2500},
																				run: (*parser).callonVariable92,
																				expr: &seqExpr{
																					pos: position{line: 112, col: 15, offset: 2500},
																					exprs: []interface{}{
																						&choiceExpr{
																							pos: position{line: 274, col: 5, offset: 7389},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 256, col: 6, offset: 7087},
																									val:        "if",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 257, col: 8, offset: 7101},
																									val:        "then",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 258, col: 8, offset: 7117},
																									val:        "else",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 259, col: 7, offset: 7132},
																									val:        "let",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 260, col: 6, offset: 7145},
																									val:        "in",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 262, col: 9, offset: 7172},
																									val:        "using",
																									ignoreCase: false,
																								},
																								&actionExpr{
																									pos: position{line: 264, col: 11, offset: 7210},
																									run: (*parser).callonVariable101,
																									expr: &litMatcher{
																										pos:        position{line: 264, col: 11, offset: 7210},
																										val:        "missing",
																										ignoreCase: false,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 261, col: 6, offset: 7157},
																									val:        "as",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 265, col: 8, offset: 7255},
																									val:        "True",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 266, col: 9, offset: 7272},
																									val:        "False",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 267, col: 12, offset: 7293},
																									val:        "Infinity",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 268, col: 7, offset: 7312},
																									val:        "NaN",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 263, col: 9, offset: 7190},
																									val:        "merge",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 269, col: 8, offset: 7327},
																									val:        "Some",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 270, col: 9, offset: 7344},
																									val:        "toMap",
																									ignoreCase: false,
																								},
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 112, col: 23, offset: 2508},
																							expr: &charClassMatcher{
																								pos:        position{line: 111, col: 23, offset: 2469},
																								val:        "[_/-A-Za-z0-9]",
																								chars:      []rune{'_', '/', '-'},
																								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 113, col: 13, offset: 2572},
																				run: (*parser).callonVariable113,
																				expr: &seqExpr{
																					pos: position{line: 113, col: 13, offset: 2572},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 113, col: 13, offset: 2572},
																							expr: &choiceExpr{
																								pos: position{line: 274, col: 5, offset: 7389},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 256, col: 6, offset: 7087},
																										val:        "if",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 257, col: 8, offset: 7101},
																										val:        "then",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 258, col: 8, offset: 7117},
																										val:        "else",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 259, col: 7, offset: 7132},
																										val:        "let",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 260, col: 6, offset: 7145},
																										val:        "in",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 262, col: 9, offset: 7172},
																										val:        "using",
																										ignoreCase: false,
																									},
																									&actionExpr{
																										pos: position{line: 264, col: 11, offset: 7210},
																										run: (*parser).callonVariable123,
																										expr: &litMatcher{
																											pos:        position{line: 264, col: 11, offset: 7210},
																											val:        "missing",
																											ignoreCase: false,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 261, col: 6, offset: 7157},
																										val:        "as",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 265, col: 8, offset: 7255},
																										val:        "True",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 266, col: 9, offset: 7272},
																										val:        "False",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 267, col: 12, offset: 7293},
																										val:        "Infinity",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 268, col: 7, offset: 7312},
																										val:        "NaN",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 263, col: 9, offset: 7190},
																										val:        "merge",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 269, col: 8, offset: 7327},
																										val:        "Some",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 270, col: 9, offset: 7344},
																										val:        "toMap",
																										ignoreCase: false,
																									},
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 110, col: 24, offset: 2435},
																							val:        "[_A-Za-z]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'A', 'Z', 'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 113, col: 43, offset: 2602},
																							expr: &charClassMatcher{
																								pos:        position{line: 111, col: 23, offset: 2469},
																								val:        "[_/-A-Za-z0-9]",
																								chars:      []rune{'_', '/', '-'},
																								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 125, col: 19, offset: 3005},
										run: (*parser).callonVariable136,
										expr: &seqExpr{
											pos: position{line: 125, col: 19, offset: 3005},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 125, col: 19, offset: 3005},
													expr: &choiceExpr{
														pos: position{line: 221, col: 5, offset: 5650},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 221, col: 5, offset: 5650},
																run: (*parser).callonVariable140,
																expr: &litMatcher{
																	pos:        position{line: 221, col: 5, offset: 5650},
																	val:        "Natural/build",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 222, col: 5, offset: 5699},
																run: (*parser).callonVariable142,
																expr: &litMatcher{
																	pos:        position{line: 222, col: 5, offset: 5699},
																	val:        "Natural/fold",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 223, col: 5, offset: 5746},
																run: (*parser).callonVariable144,
																expr: &litMatcher{
																	pos:        position{line: 223, col: 5, offset: 5746},
																	val:        "Natural/isZero",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 224, col: 5, offset: 5797},
																run: (*parser).callonVariable146,
																expr: &litMatcher{
																	pos:        position{line: 224, col: 5, offset: 5797},
																	val:        "Natural/even",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 225, col: 5, offset: 5844},
																run: (*parser).callonVariable148,
																expr: &litMatcher{
																	pos:        position{line: 225, col: 5, offset: 5844},
																	val:        "Natural/odd",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 226, col: 5, offset: 5889},
																run: (*parser).callonVariable150,
																expr: &litMatcher{
																	pos:        position{line: 226, col: 5, offset: 5889},
																	val:        "Natural/toInteger",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 227, col: 5, offset: 5946},
																run: (*parser).callonVariable152,
																expr: &litMatcher{
																	pos:        position{line: 227, col: 5, offset: 5946},
																	val:        "Natural/show",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 228, col: 5, offset: 5993},
																run: (*parser).callonVariable154,
																expr: &litMatcher{
																	pos:        position{line: 228, col: 5, offset: 5993},
																	val:        "Natural/subtract",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 229, col: 5, offset: 6048},
																run: (*parser).callonVariable156,
																expr: &litMatcher{
																	pos:        position{line: 229, col: 5, offset: 6048},
																	val:        "Integer/toDouble",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 230, col: 5, offset: 6103},
																run: (*parser).callonVariable158,
																expr: &litMatcher{
																	pos:        position{line: 230, col: 5, offset: 6103},
																	val:        "Integer/show",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 231, col: 5, offset: 6150},
																run: (*parser).callonVariable160,
																expr: &litMatcher{
																	pos:        position{line: 231, col: 5, offset: 6150},
																	val:        "Double/show",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 232, col: 5, offset: 6195},
																run: (*parser).callonVariable162,
																expr: &litMatcher{
																	pos:        position{line: 232, col: 5, offset: 6195},
																	val:        "List/build",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 233, col: 5, offset: 6238},
																run: (*parser).callonVariable164,
																expr: &litMatcher{
																	pos:        position{line: 233, col: 5, offset: 6238},
																	val:        "List/fold",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 234, col: 5, offset: 6279},
																run: (*parser).callonVariable166,
																expr: &litMatcher{
																	pos:        position{line: 234, col: 5, offset: 6279},
																	val:        "List/length",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 235, col: 5, offset: 6324},
																run: (*parser).callonVariable168,
																expr: &litMatcher{
																	pos:        position{line: 235, col: 5, offset: 6324},
																	val:        "List/head",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 236, col: 5, offset: 6365},
																run: (*parser).callonVariable170,
																expr: &litMatcher{
																	pos:        position{line: 236, col: 5, offset: 6365},
																	val:        "List/last",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 237, col: 5, offset: 6406},
																run: (*parser).callonVariable172,
																expr: &litMatcher{
																	pos:        position{line: 237, col: 5, offset: 6406},
																	val:        "List/indexed",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 238, col: 5, offset: 6453},
																run: (*parser).callonVariable174,
																expr: &litMatcher{
																	pos:        position{line: 238, col: 5, offset: 6453},
																	val:        "List/reverse",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 239, col: 5, offset: 6500},
																run: (*parser).callonVariable176,
																expr: &litMatcher{
																	pos:        position{line: 239, col: 5, offset: 6500},
																	val:        "Optional/build",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 240, col: 5, offset: 6551},
																run: (*parser).callonVariable178,
																expr: &litMatcher{
																	pos:        position{line: 240, col: 5, offset: 6551},
																	val:        "Optional/fold",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 241, col: 5, offset: 6600},
																run: (*parser).callonVariable180,
																expr: &litMatcher{
																	pos:        position{line: 241, col: 5, offset: 6600},
																	val:        "Text/show",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 242, col: 5, offset: 6641},
																run: (*parser).callonVariable182,
																expr: &litMatcher{
																	pos:        position{line: 242, col: 5, offset: 6641},
																	val:        "Bool",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 243, col: 5, offset: 6673},
																run: (*parser).callonVariable184,
																expr: &litMatcher{
																	pos:        position{line: 243, col: 5, offset: 6673},
																	val:        "True",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 244, col: 5, offset: 6705},
																run: (*parser).callonVariable186,
																expr: &litMatcher{
																	pos:        position{line: 244, col: 5, offset: 6705},
																	val:        "False",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 245, col: 5, offset: 6739},
																run: (*parser).callonVariable188,
																expr: &litMatcher{
																	pos:        position{line: 245, col: 5, offset: 6739},
																	val:        "Optional",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 246, col: 5, offset: 6779},
																run: (*parser).callonVariable190,
																expr: &litMatcher{
																	pos:        position{line: 246, col: 5, offset: 6779},
																	val:        "Natural",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 247, col: 5, offset: 6817},
																run: (*parser).callonVariable192,
																expr: &litMatcher{
																	pos:        position{line: 247, col: 5, offset: 6817},
																	val:        "Integer",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 248, col: 5, offset: 6855},
																run: (*parser).callonVariable194,
																expr: &litMatcher{
																	pos:        position{line: 248, col: 5, offset: 6855},
																	val:        "Double",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 249, col: 5, offset: 6891},
																run: (*parser).callonVariable196,
																expr: &litMatcher{
																	pos:        position{line: 249, col: 5, offset: 6891},
																	val:        "Text",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 250, col: 5, offset: 6923},
																run: (*parser).callonVariable198,
																expr: &litMatcher{
																	pos:        position{line: 250, col: 5, offset: 6923},
																	val:        "List",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 251, col: 5, offset: 6955},
																run: (*parser).callonVariable200,
																expr: &litMatcher{
																	pos:        position{line: 251, col: 5, offset: 6955},
																	val:        "None",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 252, col: 5, offset: 6987},
																run: (*parser).callonVariable202,
																expr: &litMatcher{
																	pos:        position{line: 252, col: 5, offset: 6987},
																	val:        "Type",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 253, col: 5, offset: 7019},
																run: (*parser).callonVariable204,
																expr: &litMatcher{
																	pos:        position{line: 253, col: 5, offset: 7019},
																	val:        "Kind",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 254, col: 5, offset: 7051},
																run: (*parser).callonVariable206,
																expr: &litMatcher{
																	pos:        position{line: 254, col: 5, offset: 7051},
																	val:        "Sort",
																	ignoreCase: false,
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 125, col: 29, offset: 3015},
													label: "label",
													expr: &choiceExpr{
														pos: position{line: 121, col: 9, offset: 2803},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 121, col: 9, offset: 2803},
																run: (*parser).callonVariable210,
																expr: &seqExpr{
																	pos: position{line: 121, col: 9, offset: 2803},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 121, col: 9, offset: 2803},
																			val:        "`",
																			ignoreCase: false,
																		},
																		&labeledExpr{
																			pos:   position{line: 121, col: 13, offset: 2807},
																			label: "label",
																			expr: &actionExpr{
																				pos: position{line: 119, col: 15, offset: 2744},
																				run: (*parser).callonVariable214,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 119, col: 15, offset: 2744},
																					expr: &charClassMatcher{
																						pos:        position{line: 118, col: 19, offset: 2707},
																						val:        "[ -_a-~]",
																						ranges:     []rune{' ', '_', 'a', '~'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 121, col: 31, offset: 2825},
																			val:        "`",
																			ignoreCase: false,
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 122, col: 9, offset: 2859},
																run: (*parser).callonVariable218,
																expr: &labeledExpr{
																	pos:   position{line: 122, col: 9, offset: 2859},
																	label: "label",
																	expr: &choiceExpr{
																		pos: position{line: 112, col: 15, offset: 2500},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 112, col: 15, offset: 2500},
																				run: (*parser).callonVariable221,
																				expr: &seqExpr{
																					pos: position{line: 112, col: 15, offset: 2500},
																					exprs: []interface{}{
																						&choiceExpr{
																							pos: position{line: 274, col: 5, offset: 7389},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 256, col: 6, offset: 7087},
																									val:        "if",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 257, col: 8, offset: 7101},
																									val:        "then",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 258, col: 8, offset: 7117},
																									val:        "else",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 259, col: 7, offset: 7132},
																									val:        "let",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 260, col: 6, offset: 7145},
																									val:        "in",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 262, col: 9, offset: 7172},
																									val:        "using",
																									ignoreCase: false,
																								},
																								&actionExpr{
																									pos: position{line: 264, col: 11, offset: 7210},
																									run: (*parser).callonVariable230,
																									expr: &litMatcher{
																										pos:        position{line: 264, col: 11, offset: 7210},
																										val:        "missing",
																										ignoreCase: false,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 261, col: 6, offset: 7157},
																									val:        "as",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 265, col: 8, offset: 7255},
																									val:        "True",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 266, col: 9, offset: 7272},
																									val:        "False",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 267, col: 12, offset: 7293},
																									val:        "Infinity",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 268, col: 7, offset: 7312},
																									val:        "NaN",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 263, col: 9, offset: 7190},
																									val:        "merge",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 269, col: 8, offset: 7327},
																									val:        "Some",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 270, col: 9, offset: 7344},
																									val:        "toMap",
																									ignoreCase: false,
																								},
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 112, col: 23, offset: 2508},
																							expr: &charClassMatcher{
																								pos:        position{line: 111, col: 23, offset: 2469},
																								val:        "[_/-A-Za-z0-9]",
																								chars:      []rune{'_', '/', '-'},
																								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 113, col: 13, offset: 2572},
																				run: (*parser).callonVariable242,
																				expr: &seqExpr{
																					pos: position{line: 113, col: 13, offset: 2572},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 113, col: 13, offset: 2572},
																							expr: &choiceExpr{
																								pos: position{line: 274, col: 5, offset: 7389},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 256, col: 6, offset: 7087},
																										val:        "if",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 257, col: 8, offset: 7101},
																										val:        "then",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 258, col: 8, offset: 7117},
																										val:        "else",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 259, col: 7, offset: 7132},
																										val:        "let",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 260, col: 6, offset: 7145},
																										val:        "in",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 262, col: 9, offset: 7172},
																										val:        "using",
																										ignoreCase: false,
																									},
																									&actionExpr{
																										pos: position{line: 264, col: 11, offset: 7210},
																										run: (*parser).callonVariable252,
																										expr: &litMatcher{
																											pos:        position{line: 264, col: 11, offset: 7210},
																											val:        "missing",
																											ignoreCase: false,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 261, col: 6, offset: 7157},
																										val:        "as",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 265, col: 8, offset: 7255},
																										val:        "True",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 266, col: 9, offset: 7272},
																										val:        "False",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 267, col: 12, offset: 7293},
																										val:        "Infinity",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 268, col: 7, offset: 7312},
																										val:        "NaN",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 263, col: 9, offset: 7190},
																										val:        "merge",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 269, col: 8, offset: 7327},
																										val:        "Some",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 270, col: 9, offset: 7344},
																										val:        "toMap",
																										ignoreCase: false,
																									},
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 110, col: 24, offset: 2435},
																							val:        "[_A-Za-z]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'A', 'Z', 'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 113, col: 43, offset: 2602},
																							expr: &charClassMatcher{
																								pos:        position{line: 111, col: 23, offset: 2469},
																								val:        "[_/-A-Za-z0-9]",
																								chars:      []rune{'_', '/', '-'},
																								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 324, col: 34, offset: 8624},
							label: "index",
							expr: &zeroOrOneExpr{
								pos: position{line: 324, col: 40, offset: 8630},
								expr: &ruleRefExpr{
									pos:  position{line: 324, col: 40, offset: 8630},
									name: "DeBruijn",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 332, col: 1, offset: 8793},
			expr: &choiceExpr{
				pos: position{line: 332, col: 14, offset: 8808},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 332, col: 14, offset: 8808},
						name: "Variable",
					},
					&actionExpr{
						pos: position{line: 221, col: 5, offset: 5650},
						run: (*parser).callonIdentifier3,
						expr: &litMatcher{
							pos:        position{line: 221, col: 5, offset: 5650},
							val:        "Natural/build",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 222, col: 5, offset: 5699},
						run: (*parser).callonIdentifier5,
						expr: &litMatcher{
							pos:        position{line: 222, col: 5, offset: 5699},
							val:        "Natural/fold",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 223, col: 5, offset: 5746},
						run: (*parser).callonIdentifier7,
						expr: &litMatcher{
							pos:        position{line: 223, col: 5, offset: 5746},
							val:        "Natural/isZero",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 224, col: 5, offset: 5797},
						run: (*parser).callonIdentifier9,
						expr: &litMatcher{
							pos:        position{line: 224, col: 5, offset: 5797},
							val:        "Natural/even",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 225, col: 5, offset: 5844},
						run: (*parser).callonIdentifier11,
						expr: &litMatcher{
							pos:        position{line: 225, col: 5, offset: 5844},
							val:        "Natural/odd",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 226, col: 5, offset: 5889},
						run: (*parser).callonIdentifier13,
						expr: &litMatcher{
							pos:        position{line: 226, col: 5, offset: 5889},
							val:        "Natural/toInteger",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 227, col: 5, offset: 5946},
						run: (*parser).callonIdentifier15,
						expr: &litMatcher{
							pos:        position{line: 227, col: 5, offset: 5946},
							val:        "Natural/show",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 228, col: 5, offset: 5993},
						run: (*parser).callonIdentifier17,
						expr: &litMatcher{
							pos:        position{line: 228, col: 5, offset: 5993},
							val:        "Natural/subtract",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 229, col: 5, offset: 6048},
						run: (*parser).callonIdentifier19,
						expr: &litMatcher{
							pos:        position{line: 229, col: 5, offset: 6048},
							val:        "Integer/toDouble",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 230, col: 5, offset: 6103},
						run: (*parser).callonIdentifier21,
						expr: &litMatcher{
							pos:        position{line: 230, col: 5, offset: 6103},
							val:        "Integer/show",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 231, col: 5, offset: 6150},
						run: (*parser).callonIdentifier23,
						expr: &litMatcher{
							pos:        position{line: 231, col: 5, offset: 6150},
							val:        "Double/show",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 232, col: 5, offset: 6195},
						run: (*parser).callonIdentifier25,
						expr: &litMatcher{
							pos:        position{line: 232, col: 5, offset: 6195},
							val:        "List/build",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 233, col: 5, offset: 6238},
						run: (*parser).callonIdentifier27,
						expr: &litMatcher{
							pos:        position{line: 233, col: 5, offset: 6238},
							val:        "List/fold",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 234, col: 5, offset: 6279},
						run: (*parser).callonIdentifier29,
						expr: &litMatcher{
							pos:        position{line: 234, col: 5, offset: 6279},
							val:        "List/length",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 235, col: 5, offset: 6324},
						run: (*parser).callonIdentifier31,
						expr: &litMatcher{
							pos:        position{line: 235, col: 5, offset: 6324},
							val:        "List/head",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 236, col: 5, offset: 6365},
						run: (*parser).callonIdentifier33,
						expr: &litMatcher{
							pos:        position{line: 236, col: 5, offset: 6365},
							val:        "List/last",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 237, col: 5, offset: 6406},
						run: (*parser).callonIdentifier35,
						expr: &litMatcher{
							pos:        position{line: 237, col: 5, offset: 6406},
							val:        "List/indexed",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 238, col: 5, offset: 6453},
						run: (*parser).callonIdentifier37,
						expr: &litMatcher{
							pos:        position{line: 238, col: 5, offset: 6453},
							val:        "List/reverse",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 239, col: 5, offset: 6500},
						run: (*parser).callonIdentifier39,
						expr: &litMatcher{
							pos:        position{line: 239, col: 5, offset: 6500},
							val:        "Optional/build",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 240, col: 5, offset: 6551},
						run: (*parser).callonIdentifier41,
						expr: &litMatcher{
							pos:        position{line: 240, col: 5, offset: 6551},
							val:        "Optional/fold",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 241, col: 5, offset: 6600},
						run: (*parser).callonIdentifier43,
						expr: &litMatcher{
							pos:        position{line: 241, col: 5, offset: 6600},
							val:        "Text/show",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 242, col: 5, offset: 6641},
						run: (*parser).callonIdentifier45,
						expr: &litMatcher{
							pos:        position{line: 242, col: 5, offset: 6641},
							val:        "Bool",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 243, col: 5, offset: 6673},
						run: (*parser).callonIdentifier47,
						expr: &litMatcher{
							pos:        position{line: 243, col: 5, offset: 6673},
							val:        "True",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 244, col: 5, offset: 6705},
						run: (*parser).callonIdentifier49,
						expr: &litMatcher{
							pos:        position{line: 244, col: 5, offset: 6705},
							val:        "False",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 245, col: 5, offset: 6739},
						run: (*parser).callonIdentifier51,
						expr: &litMatcher{
							pos:        position{line: 245, col: 5, offset: 6739},
							val:        "Optional",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 246, col: 5, offset: 6779},
						run: (*parser).callonIdentifier53,
						expr: &litMatcher{
							pos:        position{line: 246, col: 5, offset: 6779},
							val:        "Natural",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 247, col: 5, offset: 6817},
						run: (*parser).callonIdentifier55,
						expr: &litMatcher{
							pos:        position{line: 247, col: 5, offset: 6817},
							val:        "Integer",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 248, col: 5, offset: 6855},
						run: (*parser).callonIdentifier57,
						expr: &litMatcher{
							pos:        position{line: 248, col: 5, offset: 6855},
							val:        "Double",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 249, col: 5, offset: 6891},
						run: (*parser).callonIdentifier59,
						expr: &litMatcher{
							pos:        position{line: 249, col: 5, offset: 6891},
							val:        "Text",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 250, col: 5, offset: 6923},
						run: (*parser).callonIdentifier61,
						expr: &litMatcher{
							pos:        position{line: 250, col: 5, offset: 6923},
							val:        "List",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 251, col: 5, offset: 6955},
						run: (*parser).callonIdentifier63,
						expr: &litMatcher{
							pos:        position{line: 251, col: 5, offset: 6955},
							val:        "None",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 252, col: 5, offset: 6987},
						run: (*parser).callonIdentifier65,
						expr: &litMatcher{
							pos:        position{line: 252, col: 5, offset: 6987},
							val:        "Type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 253, col: 5, offset: 7019},
						run: (*parser).callonIdentifier67,
						expr: &litMatcher{
							pos:        position{line: 253, col: 5, offset: 7019},
							val:        "Kind",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 254, col: 5, offset: 7051},
						run: (*parser).callonIdentifier69,
						expr: &litMatcher{
							pos:        position{line: 254, col: 5, offset: 7051},
							val:        "Sort",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ImportHashed",
			pos:  position{line: 464, col: 1, offset: 12792},
			expr: &actionExpr{
				pos: position{line: 464, col: 16, offset: 12809},
				run: (*parser).callonImportHashed1,
				expr: &seqExpr{
					pos: position{line: 464, col: 16, offset: 12809},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 464, col: 16, offset: 12809},
							label: "i",
							expr: &choiceExpr{
								pos: position{line: 446, col: 14, offset: 11922},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 264, col: 11, offset: 7210},
										run: (*parser).callonImportHashed5,
										expr: &litMatcher{
											pos:        position{line: 264, col: 11, offset: 7210},
											val:        "missing",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 369, col: 14, offset: 9735},
										run: (*parser).callonImportHashed7,
										expr: &seqExpr{
											pos: position{line: 369, col: 14, offset: 9735},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 369, col: 14, offset: 9735},
													val:        "..",
													ignoreCase: false,
												},
												&labeledExpr{
													pos:   position{line: 369, col: 19, offset: 9740},
													label: "p",
													expr: &actionExpr{
														pos: position{line: 358, col: 8, offset: 9384},
														run: (*parser).callonImportHashed11,
														expr: &labeledExpr{
															pos:   position{line: 358, col: 8, offset: 9384},
															label: "cs",
															expr: &oneOrMoreExpr{
																pos: position{line: 358, col: 11, offset: 9387},
																expr: &choiceExpr{
																	pos: position{line: 355, col: 17, offset: 9260},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 355, col: 17, offset: 9260},
																			run: (*parser).callonImportHashed15,
																			expr: &seqExpr{
																				pos: position{line: 355, col: 17, offset: 9260},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 355, col: 17, offset: 9260},
																						val:        "/",
																						ignoreCase: false,
																					},
																					&labeledExpr{
																						pos:   position{line: 355, col: 21, offset: 9264},
																						label: "u",
																						expr: &actionExpr{
																							pos: position{line: 352, col: 25, offset: 9119},
																							run: (*parser).callonImportHashed19,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 352, col: 25, offset: 9119},
																								expr: &charClassMatcher{
																									pos:        position{line: 336, col: 6, offset: 8864},
																									val:        "[!=|~$-\\*-+--.0-;@-Z^-z]",
																									chars:      []rune{'!', '=', '|', '~'},
																									ranges:     []rune{'$', '\'', '*', '+', '-', '.', '0', ';', '@', 'Z', '^', 'z'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 356, col: 17, offset: 9322},
																			run: (*parser).callonImportHashed22,
																			expr: &seqExpr{
																				pos: position{line: 356, col: 17, offset: 9322},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 356, col: 17, offset: 9322},
																						val:        "/\"",
																						ignoreCase: false,
																					},
																					&labeledExpr{
																						pos:   position{line: 356, col: 25, offset: 9330},
																						label: "q",
																						expr: &actionExpr{
																							pos: position{line: 353, col: 23, offset: 9189},
																							run: (*parser).callonImportHashed26,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 353, col: 23, offset: 9189},
																								expr: &charClassMatcher{
																									pos:        position{line: 347, col: 6, offset: 9027},
																									val:        "[êÄÄD -!#-.0-\\u007f\\u0080-\\ud7ff\\ue000-ÔøΩêÄÄ-\\U0001fffd†ÄÄ-\\U0002fffd\\U00030000-\\U0003fffd\\U00040000-\\U0004fffd\\U00050000-\\U0005fffd\\U00060000-\\U0006fffd\\U00070000-\\U0007fffd\\U00080000-\\U0008fffd\\U00090000-\\U0009fffd\\U000a0000-\\U000afffd\\U000b0000-\\U000bfffd\\U000c0000-\\U000cfffd\\U000d0000-\\U000dfffd\\U000e0000-\\U000efffd\\U000f0000-\\U000ffffd0-\\U00010fff]",
																									chars:      []rune{'êÄÄ', 'D'},
																									ranges:     []rune{' ', '!', '#', '.', '0', '\u007f', '\u0080', '\ud7ff', '\ue000', 'ÔøΩ', 'êÄÄ', '\U0001fffd', '†ÄÄ', '\U0002fffd', '\U00030000', '\U0003fffd', '\U00040000', '\U0004fffd', '\U00050000', '\U0005fffd', '\U00060000', '\U0006fffd', '\U00070000', '\U0007fffd', '\U00080000', '\U0008fffd', '\U00090000', '\U0009fffd', '\U000a0000', '\U000afffd', '\U000b0000', '\U000bfffd', '\U000c0000', '\U000cfffd', '\U000d0000', '\U000dfffd', '\U000e0000', '\U000efffd', '\U000f0000', '\U000ffffd', '0', '\U00010fff'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 356, col: 47, offset: 9352},
																						val:        "\"",
																						ignoreCase: false,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 370, col: 12, offset: 9811},
										run: (*parser).callonImportHashed30,
										expr: &seqExpr{
											pos: position{line: 370, col: 12, offset: 9811},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 370, col: 12, offset: 9811},
													val:        ".",
													ignoreCase: false,
												},
												&labeledExpr{
													pos:   position{line: 370, col: 16, offset: 9815},
													label: "p",
													expr: &actionExpr{
														pos: position{line: 358, col: 8, offset: 9384},
														run: (*parser).callonImportHashed34,
														expr: &labeledExpr{
															pos:   position{line: 358, col: 8, offset: 9384},
															label: "cs",
															expr: &oneOrMoreExpr{
																pos: position{line: 358, col: 11, offset: 9387},
																expr: &choiceExpr{
																	pos: position{line: 355, col: 17, offset: 9260},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 355, col: 17, offset: 9260},
																			run: (*parser).callonImportHashed38,
																			expr: &seqExpr{
																				pos: position{line: 355, col: 17, offset: 9260},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 355, col: 17, offset: 9260},
																						val:        "/",
																						ignoreCase: false,
																					},
																					&labeledExpr{
																						pos:   position{line: 355, col: 21, offset: 9264},
																						label: "u",
																						expr: &actionExpr{
																							pos: position{line: 352, col: 25, offset: 9119},
																							run: (*parser).callonImportHashed42,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 352, col: 25, offset: 9119},
																								expr: &charClassMatcher{
																									pos:        position{line: 336, col: 6, offset: 8864},
																									val:        "[!=|~$-\\*-+--.0-;@-Z^-z]",
																									chars:      []rune{'!', '=', '|', '~'},
																									ranges:     []rune{'$', '\'', '*', '+', '-', '.', '0', ';', '@', 'Z', '^', 'z'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 356, col: 17, offset: 9322},
																			run: (*parser).callonImportHashed45,
																			expr: &seqExpr{
																				pos: position{line: 356, col: 17, offset: 9322},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 356, col: 17, offset: 9322},
																						val:        "/\"",
																						ignoreCase: false,
																					},
																					&labeledExpr{
																						pos:   position{line: 356, col: 25, offset: 9330},
																						label: "q",
																						expr: &actionExpr{
																							pos: position{line: 353, col: 23, offset: 9189},
																							run: (*parser).callonImportHashed49,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 353, col: 23, offset: 9189},
																								expr: &charClassMatcher{
																									pos:        position{line: 347, col: 6, offset: 9027},
																									val:        "[êÄÄD -!#-.0-\\u007f\\u0080-\\ud7ff\\ue000-ÔøΩêÄÄ-\\U0001fffd†ÄÄ-\\U0002fffd\\U00030000-\\U0003fffd\\U00040000-\\U0004fffd\\U00050000-\\U0005fffd\\U00060000-\\U0006fffd\\U00070000-\\U0007fffd\\U00080000-\\U0008fffd\\U00090000-\\U0009fffd\\U000a0000-\\U000afffd\\U000b0000-\\U000bfffd\\U000c0000-\\U000cfffd\\U000d0000-\\U000dfffd\\U000e0000-\\U000efffd\\U000f0000-\\U000ffffd0-\\U00010fff]",
																									chars:      []rune{'êÄÄ', 'D'},
																									ranges:     []rune{' ', '!', '#', '.', '0', '\u007f', '\u0080', '\ud7ff', '\ue000', 'ÔøΩ', 'êÄÄ', '\U0001fffd', '†ÄÄ', '\U0002fffd', '\U00030000', '\U0003fffd', '\U00040000', '\U0004fffd', '\U00050000', '\U0005fffd', '\U00060000', '\U0006fffd', '\U00070000', '\U0007fffd', '\U00080000', '\U0008fffd', '\U00090000', '\U0009fffd', '\U000a0000', '\U000afffd', '\U000b0000', '\U000bfffd', '\U000c0000', '\U000cfffd', '\U000d0000', '\U000dfffd', '\U000e0000', '\U000efffd', '\U000f0000', '\U000ffffd', '0', '\U00010fff'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 356, col: 47, offset: 9352},
																						val:        "\"",
																						ignoreCase: false,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 371, col: 12, offset: 9869},
										run: (*parser).callonImportHashed53,
										expr: &seqExpr{
											pos: position{line: 371, col: 12, offset: 9869},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 371, col: 12, offset: 9869},
													val:        "~",
													ignoreCase: false,
												},
												&labeledExpr{
													pos:   position{line: 371, col: 16, offset: 9873},
													label: "p",
													expr: &actionExpr{
														pos: position{line: 358, col: 8, offset: 9384},
														run: (*parser).callonImportHashed57,
														expr: &labeledExpr{
															pos:   position{line: 358, col: 8, offset: 9384},
															label: "cs",
															expr: &oneOrMoreExpr{
																pos: position{line: 358, col: 11, offset: 9387},
																expr: &choiceExpr{
																	pos: position{line: 355, col: 17, offset: 9260},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 355, col: 17, offset: 9260},
																			run: (*parser).callonImportHashed61,
																			expr: &seqExpr{
																				pos: position{line: 355, col: 17, offset: 9260},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 355, col: 17, offset: 9260},
																						val:        "/",
																						ignoreCase: false,
																					},
																					&labeledExpr{
																						pos:   position{line: 355, col: 21, offset: 9264},
																						label: "u",
																						expr: &actionExpr{
																							pos: position{line: 352, col: 25, offset: 9119},
																							run: (*parser).callonImportHashed65,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 352, col: 25, offset: 9119},
																								expr: &charClassMatcher{
																									pos:        position{line: 336, col: 6, offset: 8864},
																									val:        "[!=|~$-\\*-+--.0-;@-Z^-z]",
																									chars:      []rune{'!', '=', '|', '~'},
																									ranges:     []rune{'$', '\'', '*', '+', '-', '.', '0', ';', '@', 'Z', '^', 'z'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 356, col: 17, offset: 9322},
																			run: (*parser).callonImportHashed68,
																			expr: &seqExpr{
																				pos: position{line: 356, col: 17, offset: 9322},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 356, col: 17, offset: 9322},
																						val:        "/\"",
																						ignoreCase: false,
																					},
																					&labeledExpr{
																						pos:   position{line: 356, col: 25, offset: 9330},
																						label: "q",
																						expr: &actionExpr{
																							pos: position{line: 353, col: 23, offset: 9189},
																							run: (*parser).callonImportHashed72,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 353, col: 23, offset: 9189},
																								expr: &charClassMatcher{
																									pos:        position{line: 347, col: 6, offset: 9027},
																									val:        "[êÄÄD -!#-.0-\\u007f\\u0080-\\ud7ff\\ue000-ÔøΩêÄÄ-\\U0001fffd†ÄÄ-\\U0002fffd\\U00030000-\\U0003fffd\\U00040000-\\U0004fffd\\U00050000-\\U0005fffd\\U00060000-\\U0006fffd\\U00070000-\\U0007fffd\\U00080000-\\U0008fffd\\U00090000-\\U0009fffd\\U000a0000-\\U000afffd\\U000b0000-\\U000bfffd\\U000c0000-\\U000cfffd\\U000d0000-\\U000dfffd\\U000e0000-\\U000efffd\\U000f0000-\\U000ffffd0-\\U00010fff]",
																									chars:      []rune{'êÄÄ', 'D'},
																									ranges:     []rune{' ', '!', '#', '.', '0', '\u007f', '\u0080', '\ud7ff', '\ue000', 'ÔøΩ', 'êÄÄ', '\U0001fffd', '†ÄÄ', '\U0002fffd', '\U00030000', '\U0003fffd', '\U00040000', '\U0004fffd', '\U00050000', '\U0005fffd', '\U00060000', '\U0006fffd', '\U00070000', '\U0007fffd', '\U00080000', '\U0008fffd', '\U00090000', '\U0009fffd', '\U000a0000', '\U000afffd', '\U000b0000', '\U000bfffd', '\U000c0000', '\U000cfffd', '\U000d0000', '\U000dfffd', '\U000e0000', '\U000efffd', '\U000f0000', '\U000ffffd', '0', '\U00010fff'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 356, col: 47, offset: 9352},
																						val:        "\"",
																						ignoreCase: false,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 372, col: 16, offset: 9947},
										run: (*parser).callonImportHashed76,
										expr: &labeledExpr{
											pos:   position{line: 372, col: 16, offset: 9947},
											label: "p",
											expr: &actionExpr{
												pos: position{line: 358, col: 8, offset: 9384},
												run: (*parser).callonImportHashed78,
												expr: &labeledExpr{
													pos:   position{line: 358, col: 8, offset: 9384},
													label: "cs",
													expr: &oneOrMoreExpr{
														pos: position{line: 358, col: 11, offset: 9387},
														expr: &choiceExpr{
															pos: position{line: 355, col: 17, offset: 9260},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 355, col: 17, offset: 9260},
																	run: (*parser).callonImportHashed82,
																	expr: &seqExpr{
																		pos: position{line: 355, col: 17, offset: 9260},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 355, col: 17, offset: 9260},
																				val:        "/",
																				ignoreCase: false,
																			},
																			&labeledExpr{
																				pos:   position{line: 355, col: 21, offset: 9264},
																				label: "u",
																				expr: &actionExpr{
																					pos: position{line: 352, col: 25, offset: 9119},
																					run: (*parser).callonImportHashed86,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 352, col: 25, offset: 9119},
																						expr: &charClassMatcher{
																							pos:        position{line: 336, col: 6, offset: 8864},
																							val:        "[!=|~$-\\*-+--.0-;@-Z^-z]",
																							chars:      []rune{'!', '=', '|', '~'},
																							ranges:     []rune{'$', '\'', '*', '+', '-', '.', '0', ';', '@', 'Z', '^', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 356, col: 17, offset: 9322},
																	run: (*parser).callonImportHashed89,
																	expr: &seqExpr{
																		pos: position{line: 356, col: 17, offset: 9322},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 356, col: 17, offset: 9322},
																				val:        "/\"",
																				ignoreCase: false,
																			},
																			&labeledExpr{
																				pos:   position{line: 356, col: 25, offset: 9330},
																				label: "q",
																				expr: &actionExpr{
																					pos: position{line: 353, col: 23, offset: 9189},
																					run: (*parser).callonImportHashed93,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 353, col: 23, offset: 9189},
																						expr: &charClassMatcher{
																							pos:        position{line: 347, col: 6, offset: 9027},
																							val:        "[êÄÄD -!#-.0-\\u007f\\u0080-\\ud7ff\\ue000-ÔøΩêÄÄ-\\U0001fffd†ÄÄ-\\U0002fffd\\U00030000-\\U0003fffd\\U00040000-\\U0004fffd\\U00050000-\\U0005fffd\\U00060000-\\U0006fffd\\U00070000-\\U0007fffd\\U00080000-\\U0008fffd\\U00090000-\\U0009fffd\\U000a0000-\\U000afffd\\U000b0000-\\U000bfffd\\U000c0000-\\U000cfffd\\U000d0000-\\U000dfffd\\U000e0000-\\U000efffd\\U000f0000-\\U000ffffd0-\\U00010fff]",
																							chars:      []rune{'êÄÄ', 'D'},
																							ranges:     []rune{' ', '!', '#', '.', '0', '\u007f', '\u0080', '\ud7ff', '\ue000', 'ÔøΩ', 'êÄÄ', '\U0001fffd', '†ÄÄ', '\U0002fffd', '\U00030000', '\U0003fffd', '\U00040000', '\U0004fffd', '\U00050000', '\U0005fffd', '\U00060000', '\U0006fffd', '\U00070000', '\U0007fffd', '\U00080000', '\U0008fffd', '\U00090000', '\U0009fffd', '\U000a0000', '\U000afffd', '\U000b0000', '\U000bfffd', '\U000c0000', '\U000cfffd', '\U000d0000', '\U000dfffd', '\U000e0000', '\U000efffd', '\U000f0000', '\U000ffffd', '0', '\U00010fff'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 356, col: 47, offset: 9352},
																				val:        "\"",
																				ignoreCase: false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 410, col: 8, offset: 10859},
										run: (*parser).callonImportHashed97,
										expr: &labeledExpr{
											pos:   position{line: 410, col: 8, offset: 10859},
											label: "u",
											expr: &actionExpr{
												pos: position{line: 376, col: 11, offset: 10041},
												run: (*parser).callonImportHashed99,
												expr: &seqExpr{
													pos: position{line: 376, col: 11, offset: 10041},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 374, col: 10, offset: 10016},
															val:        "http",
															ignoreCase: false,
														},
														&zeroOrOneExpr{
															pos: position{line: 374, col: 17, offset: 10023},
															expr: &litMatcher{
																pos:        position{line: 374, col: 17, offset: 10023},
																val:        "s",
																ignoreCase: false,
															},
														},
														&litMatcher{
															pos:        position{line: 376, col: 18, offset: 10048},
															val:        "://",
															ignoreCase: false,
														},
														&zeroOrOneExpr{
															pos: position{line: 380, col: 13, offset: 10193},
															expr: &seqExpr{
																pos: position{line: 380, col: 14, offset: 10194},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 382, col: 12, offset: 10240},
																		expr: &choiceExpr{
																			pos: position{line: 382, col: 14, offset: 10242},
																			alternatives: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 406, col: 14, offset: 10772},
																					val:        "[._~-A-Za-z0-9]",
																					chars:      []rune{'.', '_', '~', '-'},
																					ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&seqExpr{
																					pos: position{line: 404, col: 14, offset: 10738},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 404, col: 14, offset: 10738},
																							val:        "%",
																							ignoreCase: false,
																						},
																						&choiceExpr{
																							pos: position{line: 108, col: 10, offset: 2394},
																							alternatives: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 106, col: 9, offset: 2376},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 108, col: 18, offset: 2402},
																									val:        "[a-f]i",
																									ranges:     []rune{'a', 'f'},
																									ignoreCase: true,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 108, col: 10, offset: 2394},
																							alternatives: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 106, col: 9, offset: 2376},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 108, col: 18, offset: 2402},
																									val:        "[a-f]i",
																									ranges:     []rune{'a', 'f'},
																									ignoreCase: true,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 408, col: 13, offset: 10803},
																					val:        "[!$&\\*+;=:]",
																					chars:      []rune{'!', '$', '&', '\'', '*', '+', ';', '=', ':'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 380, col: 23, offset: 10203},
																		val:        "@",
																		ignoreCase: false,
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 384, col: 8, offset: 10297},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 388, col: 13, offset: 10349},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 388, col: 13, offset: 10349},
																			val:        "[",
																			ignoreCase: false,
																		},
																		&actionExpr{
																			pos: position{line: 390, col: 15, offset: 10386},
																			run: (*parser).callonImportHashed123,
																			expr: &seqExpr{
																				pos: position{line: 390, col: 15, offset: 10386},
																				exprs: []interface{}{
																					&zeroOrMoreExpr{
																						pos: position{line: 390, col: 15, offset: 10386},
																						expr: &choiceExpr{
																							pos: position{line: 108, col: 10, offset: 2394},
																							alternatives: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 106, col: 9, offset: 2376},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 108, col: 18, offset: 2402},
																									val:        "[a-f]i",
																									ranges:     []rune{'a', 'f'},
																									ignoreCase: true,
																									inverted:   false,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 390, col: 25, offset: 10396},
																						val:        ":",
																						ignoreCase: false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 390, col: 29, offset: 10400},
																						expr: &choiceExpr{
																							pos: position{line: 390, col: 30, offset: 10401},
																							alternatives: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 106, col: 9, offset: 2376},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 108, col: 18, offset: 2402},
																									val:        "[a-f]i",
																									ranges:     []rune{'a', 'f'},
																									ignoreCase: true,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 390, col: 39, offset: 10410},
																									val:        "[:.]",
																									chars:      []rune{':', '.'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 388, col: 29, offset: 10365},
																			val:        "]",
																			ignoreCase: false,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 396, col: 11, offset: 10582},
																	expr: &choiceExpr{
																		pos: position{line: 396, col: 12, offset: 10583},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 406, col: 14, offset: 10772},
																				val:        "[._~-A-Za-z0-9]",
																				chars:      []rune{'.', '_', '~', '-'},
																				ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&seqExpr{
																				pos: position{line: 404, col: 14, offset: 10738},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 404, col: 14, offset: 10738},
																						val:        "%",
																						ignoreCase: false,
																					},
																					&choiceExpr{
																						pos: position{line: 108, col: 10, offset: 2394},
																						alternatives: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 106, col: 9, offset: 2376},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 108, col: 18, offset: 2402},
																								val:        "[a-f]i",
																								ranges:     []rune{'a', 'f'},
																								ignoreCase: true,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 108, col: 10, offset: 2394},
																						alternatives: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 106, col: 9, offset: 2376},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 108, col: 18, offset: 2402},
																								val:        "[a-f]i",
																								ranges:     []rune{'a', 'f'},
																								ignoreCase: true,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 408, col: 13, offset: 10803},
																				val:        "[!$&\\*+;=]",
																				chars:      []rune{'!', '$', '&', '\'', '*', '+', ';', '='},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 380, col: 34, offset: 10214},
															expr: &seqExpr{
																pos: position{line: 380, col: 35, offset: 10215},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 380, col: 35, offset: 10215},
																		val:        ":",
																		ignoreCase: false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 386, col: 8, offset: 10327},
																		expr: &charClassMatcher{
																			pos:        position{line: 106, col: 9, offset: 2376},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&zeroOrMoreExpr{
															pos: position{line: 378, col: 11, offset: 10147},
															expr: &choiceExpr{
																pos: position{line: 378, col: 12, offset: 10148},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 355, col: 17, offset: 9260},
																		run: (*parser).callonImportHashed155,
																		expr: &seqExpr{
																			pos: position{line: 355, col: 17, offset: 9260},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 355, col: 17, offset: 9260},
																					val:        "/",
																					ignoreCase: false,
																				},
																				&labeledExpr{
																					pos:   position{line: 355, col: 21, offset: 9264},
																					label: "u",
																					expr: &actionExpr{
																						pos: position{line: 352, col: 25, offset: 9119},
																						run: (*parser).callonImportHashed159,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 352, col: 25, offset: 9119},
																							expr: &charClassMatcher{
																								pos:        position{line: 336, col: 6, offset: 8864},
																								val:        "[!=|~$-\\*-+--.0-;@-Z^-z]",
																								chars:      []rune{'!', '=', '|', '~'},
																								ranges:     []rune{'$', '\'', '*', '+', '-', '.', '0', ';', '@', 'Z', '^', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 356, col: 17, offset: 9322},
																		run: (*parser).callonImportHashed162,
																		expr: &seqExpr{
																			pos: position{line: 356, col: 17, offset: 9322},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 356, col: 17, offset: 9322},
																					val:        "/\"",
																					ignoreCase: false,
																				},
																				&labeledExpr{
																					pos:   position{line: 356, col: 25, offset: 9330},
																					label: "q",
																					expr: &actionExpr{
																						pos: position{line: 353, col: 23, offset: 9189},
																						run: (*parser).callonImportHashed166,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 353, col: 23, offset: 9189},
																							expr: &charClassMatcher{
																								pos:        position{line: 347, col: 6, offset: 9027},
																								val:        "[êÄÄD -!#-.0-\\u007f\\u0080-\\ud7ff\\ue000-ÔøΩêÄÄ-\\U0001fffd†ÄÄ-\\U0002fffd\\U00030000-\\U0003fffd\\U00040000-\\U0004fffd\\U00050000-\\U0005fffd\\U00060000-\\U0006fffd\\U00070000-\\U0007fffd\\U00080000-\\U0008fffd\\U00090000-\\U0009fffd\\U000a0000-\\U000afffd\\U000b0000-\\U000bfffd\\U000c0000-\\U000cfffd\\U000d0000-\\U000dfffd\\U000e0000-\\U000efffd\\U000f0000-\\U000ffffd0-\\U00010fff]",
																								chars:      []rune{'êÄÄ', 'D'},
																								ranges:     []rune{' ', '!', '#', '.', '0', '\u007f', '\u0080', '\ud7ff', '\ue000', 'ÔøΩ', 'êÄÄ', '\U0001fffd', '†ÄÄ', '\U0002fffd', '\U00030000', '\U0003fffd', '\U00040000', '\U0004fffd', '\U00050000', '\U0005fffd', '\U00060000', '\U0006fffd', '\U00070000', '\U0007fffd', '\U00080000', '\U0008fffd', '\U00090000', '\U0009fffd', '\U000a0000', '\U000afffd', '\U000b0000', '\U000bfffd', '\U000c0000', '\U000cfffd', '\U000d0000', '\U000dfffd', '\U000e0000', '\U000efffd', '\U000f0000', '\U000ffffd', '0', '\U00010fff'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 356, col: 47, offset: 9352},
																					val:        "\"",
																					ignoreCase: false,
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 378, col: 28, offset: 10164},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 378, col: 28, offset: 10164},
																				val:        "/",
																				ignoreCase: false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 398, col: 11, offset: 10634},
																				expr: &choiceExpr{
																					pos: position{line: 400, col: 9, offset: 10652},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 406, col: 14, offset: 10772},
																							val:        "[._~-A-Za-z0-9]",
																							chars:      []rune{'.', '_', '~', '-'},
																							ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 404, col: 14, offset: 10738},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 404, col: 14, offset: 10738},
																									val:        "%",
																									ignoreCase: false,
																								},
																								&choiceExpr{
																									pos: position{line: 108, col: 10, offset: 2394},
																									alternatives: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 106, col: 9, offset: 2376},
																											val:        "[0-9]",
																											ranges:     []rune{'0', '9'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 108, col: 18, offset: 2402},
																											val:        "[a-f]i",
																											ranges:     []rune{'a', 'f'},
																											ignoreCase: true,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 108, col: 10, offset: 2394},
																									alternatives: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 106, col: 9, offset: 2376},
																											val:        "[0-9]",
																											ranges:     []rune{'0', '9'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&charClassMatcher{
																											pos:        position{line: 108, col: 18, offset: 2402},
																											val:        "[a-f]i",
																											ranges:     []rune{'a', 'f'},
																											ignoreCase: true,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 408, col: 13, offset: 10803},
																							val:        "[!$&\\*+;=:@]",
																							chars:      []rune{'!', '$', '&', '\'', '*', '+', ';', '=', ':', '@'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 376, col: 42, offset: 10072},
															expr: &seqExpr{
																pos: position{line: 376, col: 44, offset: 10074},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 376, col: 44, offset: 10074},
																		val:        "?",
																		ignoreCase: false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 402, col: 9, offset: 10706},
																		expr: &choiceExpr{
																			pos: position{line: 402, col: 10, offset: 10707},
																			alternatives: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 406, col: 14, offset: 10772},
																					val:        "[._~-A-Za-z0-9]",
																					chars:      []rune{'.', '_', '~', '-'},
																					ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&seqExpr{
																					pos: position{line: 404, col: 14, offset: 10738},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 404, col: 14, offset: 10738},
																							val:        "%",
																							ignoreCase: false,
																						},
																						&choiceExpr{
																							pos: position{line: 108, col: 10, offset: 2394},
																							alternatives: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 106, col: 9, offset: 2376},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 108, col: 18, offset: 2402},
																									val:        "[a-f]i",
																									ranges:     []rune{'a', 'f'},
																									ignoreCase: true,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 108, col: 10, offset: 2394},
																							alternatives: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 106, col: 9, offset: 2376},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&charClassMatcher{
																									pos:        position{line: 108, col: 18, offset: 2402},
																									val:        "[a-f]i",
																									ranges:     []rune{'a', 'f'},
																									ignoreCase: true,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 408, col: 13, offset: 10803},
																					val:        "[!$&\\*+;=:@/?]",
																					chars:      []rune{'!', '$', '&', '\'', '*', '+', ';', '=', ':', '@', '/', '?'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 412, col: 7, offset: 10919},
										run: (*parser).callonImportHashed199,
										expr: &seqExpr{
											pos: position{line: 412, col: 7, offset: 10919},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 412, col: 7, offset: 10919},
													val:        "env:",
													ignoreCase: false,
												},
												&labeledExpr{
													pos:   position{line: 412, col: 14, offset: 10926},
													label: "v",
													expr: &choiceExpr{
														pos: position{line: 412, col: 17, offset: 10929},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 414, col: 27, offset: 11028},
																run: (*parser).callonImportHashed204,
																expr: &seqExpr{
																	pos: position{line: 414, col: 27, offset: 11028},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 414, col: 27, offset: 11028},
																			val:        "[_A-Za-z]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 414, col: 36, offset: 11037},
																			expr: &charClassMatcher{
																				pos:        position{line: 414, col: 36, offset: 11037},
																				val:        "[_A-Za-z0-9]",
																				chars:      []rune{'_'},
																				ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 418, col: 28, offset: 11122},
																run: (*parser).callonImportHashed209,
																expr: &seqExpr{
																	pos: position{line: 418, col: 28, offset: 11122},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 418, col: 28, offset: 11122},
																			val:        "\"",
																			ignoreCase: false,
																		},
																		&labeledExpr{
																			pos:   position{line: 418, col: 32, offset: 11126},
																			label: "v",
																			expr: &actionExpr{
																				pos: position{line: 422, col: 35, offset: 11221},
																				run: (*parser).callonImportHashed213,
																				expr: &labeledExpr{
																					pos:   position{line: 422, col: 35, offset: 11221},
																					label: "v",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 422, col: 37, offset: 11223},
																						expr: &choiceExpr{
																							pos: position{line: 432, col: 7, offset: 11480},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 432, col: 7, offset: 11480},
																									run: (*parser).callonImportHashed217,
																									expr: &litMatcher{
																										pos:        position{line: 432, col: 7, offset: 11480},
																										val:        "\\\"",
																										ignoreCase: false,
																									},
																								},
																								&actionExpr{
																									pos: position{line: 433, col: 7, offset: 11520},
																									run: (*parser).callonImportHashed219,
																									expr: &litMatcher{
																										pos:        position{line: 433, col: 7, offset: 11520},
																										val:        "\\\\",
																										ignoreCase: false,
																									},
																								},
																								&actionExpr{
																									pos: position{line: 434, col: 7, offset: 11560},
																									run: (*parser).callonImportHashed221,
																									expr: &litMatcher{
																										pos:        position{line: 434, col: 7, offset: 11560},
																										val:        "\\a",
																										ignoreCase: false,
																									},
																								},
																								&actionExpr{
																									pos: position{line: 435, col: 7, offset: 11600},
																									run: (*parser).callonImportHashed223,
																									expr: &litMatcher{
																										pos:        position{line: 435, col: 7, offset: 11600},
																										val:        "\\b",
																										ignoreCase: false,
																									},
																								},
																								&actionExpr{
																									pos: position{line: 436, col: 7, offset: 11640},
																									run: (*parser).callonImportHashed225,
																									expr: &litMatcher{
																										pos:        position{line: 436, col: 7, offset: 11640},
																										val:        "\\f",
																										ignoreCase: false,
																									},
																								},
																								&actionExpr{
																									pos: position{line: 437, col: 7, offset: 11680},
																									run: (*parser).callonImportHashed227,
																									expr: &litMatcher{
																										pos:        position{line: 437, col: 7, offset: 11680},
																										val:        "\\n",
																										ignoreCase: false,
																									},
																								},
																								&actionExpr{
																									pos: position{line: 438, col: 7, offset: 11720},
																									run: (*parser).callonImportHashed229,
																									expr: &litMatcher{
																										pos:        position{line: 438, col: 7, offset: 11720},
																										val:        "\\r",
																										ignoreCase: false,
																									},
																								},
																								&actionExpr{
																									pos: position{line: 439, col: 7, offset: 11760},
																									run: (*parser).callonImportHashed231,
																									expr: &litMatcher{
																										pos:        position{line: 439, col: 7, offset: 11760},
																										val:        "\\t",
																										ignoreCase: false,
																									},
																								},
																								&actionExpr{
																									pos: position{line: 440, col: 7, offset: 11800},
																									run: (*parser).callonImportHashed233,
																									expr: &litMatcher{
																										pos:        position{line: 440, col: 7, offset: 11800},
																										val:        "\\v",
																										ignoreCase: false,
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 441, col: 7, offset: 11840},
																									val:        "[ -!#-<>-[]-~]",
																									ranges:     []rune{' ', '!', '#', '<', '>', '[', ']', '~'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 418, col: 66, offset: 11160},
																			val:        "\"",
																			ignoreCase: false,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 464, col: 29, offset: 12822},
							label: "h",
							expr: &zeroOrOneExpr{
								pos: position{line: 464, col: 31, offset: 12824},
								expr: &seqExpr{
									pos: position{line: 464, col: 32, offset: 12825},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 464, col: 32, offset: 12825},
											name: "_1",
										},
										&actionExpr{
											pos: position{line: 462, col: 8, offset: 12708},
											run: (*parser).callonImportHashed241,
											expr: &seqExpr{
												pos: position{line: 462, col: 8, offset: 12708},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 462, col: 8, offset: 12708},
														val:        "sha256:",
														ignoreCase: false,
													},
													&labeledExpr{
														pos:   position{line: 462, col: 18, offset: 12718},
														label: "val",
														expr: &actionExpr{
															pos: position{line: 449, col: 13, offset: 12032},
															run: (*parser).callonImportHashed245,
															expr: &seqExpr{
																pos: position{line: 449, col: 13, offset: 12032},
																exprs: []interface{}{
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Import",
			pos:  position{line: 472, col: 1, offset: 12983},
			expr: &choiceExpr{
				pos: position{line: 472, col: 10, offset: 12994},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 472, col: 10, offset: 12994},
						run: (*parser).callonImport2,
						expr: &seqExpr{
							pos: position{line: 472, col: 10, offset: 12994},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 472, col: 10, offset: 12994},
									label: "i",
									expr: &ruleRefExpr{
										pos:  position{line: 472, col: 12, offset: 12996},
										name: "ImportHashed",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 472, col: 25, offset: 13009},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 261, col: 6, offset: 7157},
									val:        "as",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 472, col: 30, offset: 13014},
									name: "_1",
								},
								&litMatcher{
									pos:        position{line: 282, col: 8, offset: 7539},
									val:        "Text",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 473, col: 10, offset: 13107},
						run: (*parser).callonImport10,
						expr: &seqExpr{
							pos: position{line: 473, col: 10, offset: 13107},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 473, col: 10, offset: 13107},
									label: "i",
									expr: &ruleRefExpr{
										pos:  position{line: 473, col: 12, offset: 13109},
										name: "ImportHashed",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 473, col: 25, offset: 13122},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 261, col: 6, offset: 7157},
									val:        "as",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 473, col: 30, offset: 13127},
									name: "_1",
								},
								&litMatcher{
									pos:        position{line: 284, col: 12, offset: 7575},
									val:        "Location",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 474, col: 10, offset: 13225},
						run: (*parser).callonImport18,
						expr: &labeledExpr{
							pos:   position{line: 474, col: 10, offset: 13225},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 12, offset: 13227},
								name: "ImportHashed",
							},
						},
					},
				},
			},
		},
		{
			name: "LetBinding",
			pos:  position{line: 477, col: 1, offset: 13315},
			expr: &actionExpr{
				pos: position{line: 477, col: 14, offset: 13330},
				run: (*parser).callonLetBinding1,
				expr: &seqExpr{
					pos: position{line: 477, col: 14, offset: 13330},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 259, col: 7, offset: 7132},
							val:        "let",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 477, col: 18, offset: 13334},
							name: "_1",
						},
						&labeledExpr{
							pos:   position{line: 477, col: 21, offset: 13337},
							label: "label",
							expr: &choiceExpr{
								pos: position{line: 124, col: 20, offset: 2921},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 124, col: 20, offset: 2921},
										run: (*parser).callonLetBinding7,
										expr: &seqExpr{
											pos: position{line: 124, col: 20, offset: 2921},
											exprs: []interface{}{
												&andExpr{
													pos: position{line: 124, col: 20, offset: 2921},
													expr: &seqExpr{
														pos: position{line: 124, col: 22, offset: 2923},
														exprs: []interface{}{
															&choiceExpr{
																pos: position{line: 221, col: 5, offset: 5650},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 221, col: 5, offset: 5650},
																		run: (*parser).callonLetBinding12,
																		expr: &litMatcher{
																			pos:        position{line: 221, col: 5, offset: 5650},
																			val:        "Natural/build",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 222, col: 5, offset: 5699},
																		run: (*parser).callonLetBinding14,
																		expr: &litMatcher{
																			pos:        position{line: 222, col: 5, offset: 5699},
																			val:        "Natural/fold",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 223, col: 5, offset: 5746},
																		run: (*parser).callonLetBinding16,
																		expr: &litMatcher{
																			pos:        position{line: 223, col: 5, offset: 5746},
																			val:        "Natural/isZero",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 224, col: 5, offset: 5797},
																		run: (*parser).callonLetBinding18,
																		expr: &litMatcher{
																			pos:        position{line: 224, col: 5, offset: 5797},
																			val:        "Natural/even",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 225, col: 5, offset: 5844},
																		run: (*parser).callonLetBinding20,
																		expr: &litMatcher{
																			pos:        position{line: 225, col: 5, offset: 5844},
																			val:        "Natural/odd",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 226, col: 5, offset: 5889},
																		run: (*parser).callonLetBinding22,
																		expr: &litMatcher{
																			pos:        position{line: 226, col: 5, offset: 5889},
																			val:        "Natural/toInteger",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 227, col: 5, offset: 5946},
																		run: (*parser).callonLetBinding24,
																		expr: &litMatcher{
																			pos:        position{line: 227, col: 5, offset: 5946},
																			val:        "Natural/show",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 228, col: 5, offset: 5993},
																		run: (*parser).callonLetBinding26,
																		expr: &litMatcher{
																			pos:        position{line: 228, col: 5, offset: 5993},
																			val:        "Natural/subtract",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 229, col: 5, offset: 6048},
																		run: (*parser).callonLetBinding28,
																		expr: &litMatcher{
																			pos:        position{line: 229, col: 5, offset: 6048},
																			val:        "Integer/toDouble",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 230, col: 5, offset: 6103},
																		run: (*parser).callonLetBinding30,
																		expr: &litMatcher{
																			pos:        position{line: 230, col: 5, offset: 6103},
																			val:        "Integer/show",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 231, col: 5, offset: 6150},
																		run: (*parser).callonLetBinding32,
																		expr: &litMatcher{
																			pos:        position{line: 231, col: 5, offset: 6150},
																			val:        "Double/show",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 232, col: 5, offset: 6195},
																		run: (*parser).callonLetBinding34,
																		expr: &litMatcher{
																			pos:        position{line: 232, col: 5, offset: 6195},
																			val:        "List/build",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 233, col: 5, offset: 6238},
																		run: (*parser).callonLetBinding36,
																		expr: &litMatcher{
																			pos:        position{line: 233, col: 5, offset: 6238},
																			val:        "List/fold",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 234, col: 5, offset: 6279},
																		run: (*parser).callonLetBinding38,
																		expr: &litMatcher{
																			pos:        position{line: 234, col: 5, offset: 6279},
																			val:        "List/length",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 235, col: 5, offset: 6324},
																		run: (*parser).callonLetBinding40,
																		expr: &litMatcher{
																			pos:        position{line: 235, col: 5, offset: 6324},
																			val:        "List/head",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 236, col: 5, offset: 6365},
																		run: (*parser).callonLetBinding42,
																		expr: &litMatcher{
																			pos:        position{line: 236, col: 5, offset: 6365},
																			val:        "List/last",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 237, col: 5, offset: 6406},
																		run: (*parser).callonLetBinding44,
																		expr: &litMatcher{
																			pos:        position{line: 237, col: 5, offset: 6406},
																			val:        "List/indexed",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 238, col: 5, offset: 6453},
																		run: (*parser).callonLetBinding46,
																		expr: &litMatcher{
																			pos:        position{line: 238, col: 5, offset: 6453},
																			val:        "List/reverse",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 239, col: 5, offset: 6500},
																		run: (*parser).callonLetBinding48,
																		expr: &litMatcher{
																			pos:        position{line: 239, col: 5, offset: 6500},
																			val:        "Optional/build",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 240, col: 5, offset: 6551},
																		run: (*parser).callonLetBinding50,
																		expr: &litMatcher{
																			pos:        position{line: 240, col: 5, offset: 6551},
																			val:        "Optional/fold",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 241, col: 5, offset: 6600},
																		run: (*parser).callonLetBinding52,
																		expr: &litMatcher{
																			pos:        position{line: 241, col: 5, offset: 6600},
																			val:        "Text/show",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 242, col: 5, offset: 6641},
																		run: (*parser).callonLetBinding54,
																		expr: &litMatcher{
																			pos:        position{line: 242, col: 5, offset: 6641},
																			val:        "Bool",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 243, col: 5, offset: 6673},
																		run: (*parser).callonLetBinding56,
																		expr: &litMatcher{
																			pos:        position{line: 243, col: 5, offset: 6673},
																			val:        "True",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 244, col: 5, offset: 6705},
																		run: (*parser).callonLetBinding58,
																		expr: &litMatcher{
																			pos:        position{line: 244, col: 5, offset: 6705},
																			val:        "False",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 245, col: 5, offset: 6739},
																		run: (*parser).callonLetBinding60,
																		expr: &litMatcher{
																			pos:        position{line: 245, col: 5, offset: 6739},
																			val:        "Optional",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 246, col: 5, offset: 6779},
																		run: (*parser).callonLetBinding62,
																		expr: &litMatcher{
																			pos:        position{line: 246, col: 5, offset: 6779},
																			val:        "Natural",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 247, col: 5, offset: 6817},
																		run: (*parser).callonLetBinding64,
																		expr: &litMatcher{
																			pos:        position{line: 247, col: 5, offset: 6817},
																			val:        "Integer",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 248, col: 5, offset: 6855},
																		run: (*parser).callonLetBinding66,
																		expr: &litMatcher{
																			pos:        position{line: 248, col: 5, offset: 6855},
																			val:        "Double",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 249, col: 5, offset: 6891},
																		run: (*parser).callonLetBinding68,
																		expr: &litMatcher{
																			pos:        position{line: 249, col: 5, offset: 6891},
																			val:        "Text",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 250, col: 5, offset: 6923},
																		run: (*parser).callonLetBinding70,
																		expr: &litMatcher{
																			pos:        position{line: 250, col: 5, offset: 6923},
																			val:        "List",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 251, col: 5, offset: 6955},
																		run: (*parser).callonLetBinding72,
																		expr: &litMatcher{
																			pos:        position{line: 251, col: 5, offset: 6955},
																			val:        "None",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 252, col: 5, offset: 6987},
																		run: (*parser).callonLetBinding74,
																		expr: &litMatcher{
																			pos:        position{line: 252, col: 5, offset: 6987},
																			val:        "Type",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 253, col: 5, offset: 7019},
																		run: (*parser).callonLetBinding76,
																		expr: &litMatcher{
																			pos:        position{line: 253, col: 5, offset: 7019},
																			val:        "Kind",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 254, col: 5, offset: 7051},
																		run: (*parser).callonLetBinding78,
																		expr: &litMatcher{
																			pos:        position{line: 254, col: 5, offset: 7051},
																			val:        "Sort",
																			ignoreCase: false,
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 111, col: 23, offset: 2469},
																val:        "[_/-A-Za-z0-9]",
																chars:      []rune{'_', '/', '-'},
																ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 124, col: 52, offset: 2953},
													label: "label",
													expr: &choiceExpr{
														pos: position{line: 121, col: 9, offset: 2803},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 121, col: 9, offset: 2803},
																run: (*parser).callonLetBinding83,
																expr: &seqExpr{
																	pos: position{line: 121, col: 9, offset: 2803},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 121, col: 9, offset: 2803},
																			val:        "`",
																			ignoreCase: false,
																		},
																		&labeledExpr{
																			pos:   position{line: 121, col: 13, offset: 2807},
																			label: "label",
																			expr: &actionExpr{
																				pos: position{line: 119, col: 15, offset: 2744},
																				run: (*parser).callonLetBinding87,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 119, col: 15, offset: 2744},
																					expr: &charClassMatcher{
																						pos:        position{line: 118, col: 19, offset: 2707},
																						val:        "[ -_a-~]",
																						ranges:     []rune{' ', '_', 'a', '~'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 121, col: 31, offset: 2825},
																			val:        "`",
																			ignoreCase: false,
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 122, col: 9, offset: 2859},
																run: (*parser).callonLetBinding91,
																expr: &labeledExpr{
																	pos:   position{line: 122, col: 9, offset: 2859},
																	label: "label",
																	expr: &choiceExpr{
																		pos: position{line: 112, col: 15, offset: 2500},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 112, col: 15, offset: 2500},
																				run: (*parser).callonLetBinding94,
																				expr: &seqExpr{
																					pos: position{line: 112, col: 15, offset: 2500},
																					exprs: []interface{}{
																						&choiceExpr{
																							pos: position{line: 274, col: 5, offset: 7389},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 256, col: 6, offset: 7087},
																									val:        "if",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 257, col: 8, offset: 7101},
																									val:        "then",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 258, col: 8, offset: 7117},
																									val:        "else",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 259, col: 7, offset: 7132},
																									val:        "let",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 260, col: 6, offset: 7145},
																									val:        "in",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 262, col: 9, offset: 7172},
																									val:        "using",
																									ignoreCase: false,
																								},
																								&actionExpr{
																									pos: position{line: 264, col: 11, offset: 7210},
																									run: (*parser).callonLetBinding103,
																									expr: &litMatcher{
																										pos:        position{line: 264, col: 11, offset: 7210},
																										val:        "missing",
																										ignoreCase: false,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 261, col: 6, offset: 7157},
																									val:        "as",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 265, col: 8, offset: 7255},
																									val:        "True",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 266, col: 9, offset: 7272},
																									val:        "False",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 267, col: 12, offset: 7293},
																									val:        "Infinity",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 268, col: 7, offset: 7312},
																									val:        "NaN",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 263, col: 9, offset: 7190},
																									val:        "merge",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 269, col: 8, offset: 7327},
																									val:        "Some",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 270, col: 9, offset: 7344},
																									val:        "toMap",
																									ignoreCase: false,
																								},
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 112, col: 23, offset: 2508},
																							expr: &charClassMatcher{
																								pos:        position{line: 111, col: 23, offset: 2469},
																								val:        "[_/-A-Za-z0-9]",
																								chars:      []rune{'_', '/', '-'},
																								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 113, col: 13, offset: 2572},
																				run: (*parser).callonLetBinding115,
																				expr: &seqExpr{
																					pos: position{line: 113, col: 13, offset: 2572},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 113, col: 13, offset: 2572},
																							expr: &choiceExpr{
																								pos: position{line: 274, col: 5, offset: 7389},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 256, col: 6, offset: 7087},
																										val:        "if",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 257, col: 8, offset: 7101},
																										val:        "then",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 258, col: 8, offset: 7117},
																										val:        "else",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 259, col: 7, offset: 7132},
																										val:        "let",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 260, col: 6, offset: 7145},
																										val:        "in",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 262, col: 9, offset: 7172},
																										val:        "using",
																										ignoreCase: false,
																									},
																									&actionExpr{
																										pos: position{line: 264, col: 11, offset: 7210},
																										run: (*parser).callonLetBinding125,
																										expr: &litMatcher{
																											pos:        position{line: 264, col: 11, offset: 7210},
																											val:        "missing",
																											ignoreCase: false,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 261, col: 6, offset: 7157},
																										val:        "as",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 265, col: 8, offset: 7255},
																										val:        "True",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 266, col: 9, offset: 7272},
																										val:        "False",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 267, col: 12, offset: 7293},
																										val:        "Infinity",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 268, col: 7, offset: 7312},
																										val:        "NaN",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 263, col: 9, offset: 7190},
																										val:        "merge",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 269, col: 8, offset: 7327},
																										val:        "Some",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 270, col: 9, offset: 7344},
																										val:        "toMap",
																										ignoreCase: false,
																									},
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 110, col: 24, offset: 2435},
																							val:        "[_A-Za-z]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'A', 'Z', 'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 113, col: 43, offset: 2602},
																							expr: &charClassMatcher{
																								pos:        position{line: 111, col: 23, offset: 2469},
																								val:        "[_/-A-Za-z0-9]",
																								chars:      []rune{'_', '/', '-'},
																								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 125, col: 19, offset: 3005},
										run: (*parser).callonLetBinding138,
										expr: &seqExpr{
											pos: position{line: 125, col: 19, offset: 3005},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 125, col: 19, offset: 3005},
													expr: &choiceExpr{
														pos: position{line: 221, col: 5, offset: 5650},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 221, col: 5, offset: 5650},
																run: (*parser).callonLetBinding142,
																expr: &litMatcher{
																	pos:        position{line: 221, col: 5, offset: 5650},
																	val:        "Natural/build",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 222, col: 5, offset: 5699},
																run: (*parser).callonLetBinding144,
																expr: &litMatcher{
																	pos:        position{line: 222, col: 5, offset: 5699},
																	val:        "Natural/fold",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 223, col: 5, offset: 5746},
																run: (*parser).callonLetBinding146,
																expr: &litMatcher{
																	pos:        position{line: 223, col: 5, offset: 5746},
																	val:        "Natural/isZero",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 224, col: 5, offset: 5797},
																run: (*parser).callonLetBinding148,
																expr: &litMatcher{
																	pos:        position{line: 224, col: 5, offset: 5797},
																	val:        "Natural/even",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 225, col: 5, offset: 5844},
																run: (*parser).callonLetBinding150,
																expr: &litMatcher{
																	pos:        position{line: 225, col: 5, offset: 5844},
																	val:        "Natural/odd",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 226, col: 5, offset: 5889},
																run: (*parser).callonLetBinding152,
																expr: &litMatcher{
																	pos:        position{line: 226, col: 5, offset: 5889},
																	val:        "Natural/toInteger",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 227, col: 5, offset: 5946},
																run: (*parser).callonLetBinding154,
																expr: &litMatcher{
																	pos:        position{line: 227, col: 5, offset: 5946},
																	val:        "Natural/show",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 228, col: 5, offset: 5993},
																run: (*parser).callonLetBinding156,
																expr: &litMatcher{
																	pos:        position{line: 228, col: 5, offset: 5993},
																	val:        "Natural/subtract",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 229, col: 5, offset: 6048},
																run: (*parser).callonLetBinding158,
																expr: &litMatcher{
																	pos:        position{line: 229, col: 5, offset: 6048},
																	val:        "Integer/toDouble",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 230, col: 5, offset: 6103},
																run: (*parser).callonLetBinding160,
																expr: &litMatcher{
																	pos:        position{line: 230, col: 5, offset: 6103},
																	val:        "Integer/show",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 231, col: 5, offset: 6150},
																run: (*parser).callonLetBinding162,
																expr: &litMatcher{
																	pos:        position{line: 231, col: 5, offset: 6150},
																	val:        "Double/show",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 232, col: 5, offset: 6195},
																run: (*parser).callonLetBinding164,
																expr: &litMatcher{
																	pos:        position{line: 232, col: 5, offset: 6195},
																	val:        "List/build",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 233, col: 5, offset: 6238},
																run: (*parser).callonLetBinding166,
																expr: &litMatcher{
																	pos:        position{line: 233, col: 5, offset: 6238},
																	val:        "List/fold",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 234, col: 5, offset: 6279},
																run: (*parser).callonLetBinding168,
																expr: &litMatcher{
																	pos:        position{line: 234, col: 5, offset: 6279},
																	val:        "List/length",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 235, col: 5, offset: 6324},
																run: (*parser).callonLetBinding170,
																expr: &litMatcher{
																	pos:        position{line: 235, col: 5, offset: 6324},
																	val:        "List/head",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 236, col: 5, offset: 6365},
																run: (*parser).callonLetBinding172,
																expr: &litMatcher{
																	pos:        position{line: 236, col: 5, offset: 6365},
																	val:        "List/last",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 237, col: 5, offset: 6406},
																run: (*parser).callonLetBinding174,
																expr: &litMatcher{
																	pos:        position{line: 237, col: 5, offset: 6406},
																	val:        "List/indexed",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 238, col: 5, offset: 6453},
																run: (*parser).callonLetBinding176,
																expr: &litMatcher{
																	pos:        position{line: 238, col: 5, offset: 6453},
																	val:        "List/reverse",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 239, col: 5, offset: 6500},
																run: (*parser).callonLetBinding178,
																expr: &litMatcher{
																	pos:        position{line: 239, col: 5, offset: 6500},
																	val:        "Optional/build",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 240, col: 5, offset: 6551},
																run: (*parser).callonLetBinding180,
																expr: &litMatcher{
																	pos:        position{line: 240, col: 5, offset: 6551},
																	val:        "Optional/fold",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 241, col: 5, offset: 6600},
																run: (*parser).callonLetBinding182,
																expr: &litMatcher{
																	pos:        position{line: 241, col: 5, offset: 6600},
																	val:        "Text/show",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 242, col: 5, offset: 6641},
																run: (*parser).callonLetBinding184,
																expr: &litMatcher{
																	pos:        position{line: 242, col: 5, offset: 6641},
																	val:        "Bool",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 243, col: 5, offset: 6673},
																run: (*parser).callonLetBinding186,
																expr: &litMatcher{
																	pos:        position{line: 243, col: 5, offset: 6673},
																	val:        "True",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 244, col: 5, offset: 6705},
																run: (*parser).callonLetBinding188,
																expr: &litMatcher{
																	pos:        position{line: 244, col: 5, offset: 6705},
																	val:        "False",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 245, col: 5, offset: 6739},
																run: (*parser).callonLetBinding190,
																expr: &litMatcher{
																	pos:        position{line: 245, col: 5, offset: 6739},
																	val:        "Optional",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 246, col: 5, offset: 6779},
																run: (*parser).callonLetBinding192,
																expr: &litMatcher{
																	pos:        position{line: 246, col: 5, offset: 6779},
																	val:        "Natural",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 247, col: 5, offset: 6817},
																run: (*parser).callonLetBinding194,
																expr: &litMatcher{
																	pos:        position{line: 247, col: 5, offset: 6817},
																	val:        "Integer",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 248, col: 5, offset: 6855},
																run: (*parser).callonLetBinding196,
																expr: &litMatcher{
																	pos:        position{line: 248, col: 5, offset: 6855},
																	val:        "Double",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 249, col: 5, offset: 6891},
																run: (*parser).callonLetBinding198,
																expr: &litMatcher{
																	pos:        position{line: 249, col: 5, offset: 6891},
																	val:        "Text",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 250, col: 5, offset: 6923},
																run: (*parser).callonLetBinding200,
																expr: &litMatcher{
																	pos:        position{line: 250, col: 5, offset: 6923},
																	val:        "List",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 251, col: 5, offset: 6955},
																run: (*parser).callonLetBinding202,
																expr: &litMatcher{
																	pos:        position{line: 251, col: 5, offset: 6955},
																	val:        "None",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 252, col: 5, offset: 6987},
																run: (*parser).callonLetBinding204,
																expr: &litMatcher{
																	pos:        position{line: 252, col: 5, offset: 6987},
																	val:        "Type",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 253, col: 5, offset: 7019},
																run: (*parser).callonLetBinding206,
																expr: &litMatcher{
																	pos:        position{line: 253, col: 5, offset: 7019},
																	val:        "Kind",
																	ignoreCase: false,
																},
															},
															&actionExpr{
																pos: position{line: 254, col: 5, offset: 7051},
																run: (*parser).callonLetBinding208,
																expr: &litMatcher{
																	pos:        position{line: 254, col: 5, offset: 7051},
																	val:        "Sort",
																	ignoreCase: false,
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 125, col: 29, offset: 3015},
													label: "label",
													expr: &choiceExpr{
														pos: position{line: 121, col: 9, offset: 2803},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 121, col: 9, offset: 2803},
																run: (*parser).callonLetBinding212,
																expr: &seqExpr{
																	pos: position{line: 121, col: 9, offset: 2803},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 121, col: 9, offset: 2803},
																			val:        "`",
																			ignoreCase: false,
																		},
																		&labeledExpr{
																			pos:   position{line: 121, col: 13, offset: 2807},
																			label: "label",
																			expr: &actionExpr{
																				pos: position{line: 119, col: 15, offset: 2744},
																				run: (*parser).callonLetBinding216,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 119, col: 15, offset: 2744},
																					expr: &charClassMatcher{
																						pos:        position{line: 118, col: 19, offset: 2707},
																						val:        "[ -_a-~]",
																						ranges:     []rune{' ', '_', 'a', '~'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 121, col: 31, offset: 2825},
																			val:        "`",
																			ignoreCase: false,
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 122, col: 9, offset: 2859},
																run: (*parser).callonLetBinding220,
																expr: &labeledExpr{
																	pos:   position{line: 122, col: 9, offset: 2859},
																	label: "label",
																	expr: &choiceExpr{
																		pos: position{line: 112, col: 15, offset: 2500},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 112, col: 15, offset: 2500},
																				run: (*parser).callonLetBinding223,
																				expr: &seqExpr{
																					pos: position{line: 112, col: 15, offset: 2500},
																					exprs: []interface{}{
																						&choiceExpr{
																							pos: position{line: 274, col: 5, offset: 7389},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 256, col: 6, offset: 7087},
																									val:        "if",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 257, col: 8, offset: 7101},
																									val:        "then",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 258, col: 8, offset: 7117},
																									val:        "else",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 259, col: 7, offset: 7132},
																									val:        "let",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 260, col: 6, offset: 7145},
																									val:        "in",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 262, col: 9, offset: 7172},
																									val:        "using",
																									ignoreCase: false,
																								},
																								&actionExpr{
																									pos: position{line: 264, col: 11, offset: 7210},
																									run: (*parser).callonLetBinding232,
																									expr: &litMatcher{
																										pos:        position{line: 264, col: 11, offset: 7210},
																										val:        "missing",
																										ignoreCase: false,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 261, col: 6, offset: 7157},
																									val:        "as",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 265, col: 8, offset: 7255},
																									val:        "True",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 266, col: 9, offset: 7272},
																									val:        "False",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 267, col: 12, offset: 7293},
																									val:        "Infinity",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 268, col: 7, offset: 7312},
																									val:        "NaN",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 263, col: 9, offset: 7190},
																									val:        "merge",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 269, col: 8, offset: 7327},
																									val:        "Some",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 270, col: 9, offset: 7344},
																									val:        "toMap",
																									ignoreCase: false,
																								},
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 112, col: 23, offset: 2508},
																							expr: &charClassMatcher{
																								pos:        position{line: 111, col: 23, offset: 2469},
																								val:        "[_/-A-Za-z0-9]",
																								chars:      []rune{'_', '/', '-'},
																								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 113, col: 13, offset: 2572},
																				run: (*parser).callonLetBinding244,
																				expr: &seqExpr{
																					pos: position{line: 113, col: 13, offset: 2572},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 113, col: 13, offset: 2572},
																							expr: &choiceExpr{
																								pos: position{line: 274, col: 5, offset: 7389},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 256, col: 6, offset: 7087},
																										val:        "if",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 257, col: 8, offset: 7101},
																										val:        "then",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 258, col: 8, offset: 7117},
																										val:        "else",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 259, col: 7, offset: 7132},
																										val:        "let",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 260, col: 6, offset: 7145},
																										val:        "in",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 262, col: 9, offset: 7172},
																										val:        "using",
																										ignoreCase: false,
																									},
																									&actionExpr{
																										pos: position{line: 264, col: 11, offset: 7210},
																										run: (*parser).callonLetBinding254,
																										expr: &litMatcher{
																											pos:        position{line: 264, col: 11, offset: 7210},
																											val:        "missing",
																											ignoreCase: false,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 261, col: 6, offset: 7157},
																										val:        "as",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 265, col: 8, offset: 7255},
																										val:        "True",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 266, col: 9, offset: 7272},
																										val:        "False",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 267, col: 12, offset: 7293},
																										val:        "Infinity",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 268, col: 7, offset: 7312},
																										val:        "NaN",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 263, col: 9, offset: 7190},
																										val:        "merge",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 269, col: 8, offset: 7327},
																										val:        "Some",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 270, col: 9, offset: 7344},
																										val:        "toMap",
																										ignoreCase: false,
																									},
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 110, col: 24, offset: 2435},
																							val:        "[_A-Za-z]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'A', 'Z', 'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 113, col: 43, offset: 2602},
																							expr: &charClassMatcher{
																								pos:        position{line: 111, col: 23, offset: 2469},
																								val:        "[_/-A-Za-z0-9]",
																								chars:      []rune{'_', '/', '-'},
																								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 477, col: 44, offset: 13360},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 477, col: 46, offset: 13362},
							label: "a",
							expr: &zeroOrOneExpr{
								pos: position{line: 477, col: 48, offset: 13364},
								expr: &seqExpr{
									pos: position{line: 477, col: 49, offset: 13365},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 477, col: 49, offset: 13365},
											name: "Annotation",
										},
										&ruleRefExpr{
											pos:  position{line: 477, col: 60, offset: 13376},
											name: "_",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 478, col: 13, offset: 13392},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 478, col: 17, offset: 13396},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 478, col: 19, offset: 13398},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 478, col: 21, offset: 13400},
								name: "Expression",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 478, col: 32, offset: 13411},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "Expression",
			pos:  position{line: 493, col: 1, offset: 13720},
			expr: &choiceExpr{
				pos: position{line: 494, col: 7, offset: 13741},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 494, col: 7, offset: 13741},
						run: (*parser).callonExpression2,
						expr: &seqExpr{
							pos: position{line: 494, col: 7, offset: 13741},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 290, col: 10, offset: 7711},
									val:        "[\\\\Œª]",
									chars:      []rune{'\\', 'Œª'},
									ignoreCase: false,
									inverted:   false,
								},
								&ruleRefExpr{
									pos:  position{line: 494, col: 14, offset: 13748},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 494, col: 16, offset: 13750},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 494, col: 20, offset: 13754},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 494, col: 22, offset: 13756},
									label: "label",
									expr: &choiceExpr{
										pos: position{line: 124, col: 20, offset: 2921},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 124, col: 20, offset: 2921},
												run: (*parser).callonExpression10,
												expr: &seqExpr{
													pos: position{line: 124, col: 20, offset: 2921},
													exprs: []interface{}{
														&andExpr{
															pos: position{line: 124, col: 20, offset: 2921},
															expr: &seqExpr{
																pos: position{line: 124, col: 22, offset: 2923},
																exprs: []interface{}{
																	&choiceExpr{
																		pos: position{line: 221, col: 5, offset: 5650},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 221, col: 5, offset: 5650},
																				run: (*parser).callonExpression15,
																				expr: &litMatcher{
																					pos:        position{line: 221, col: 5, offset: 5650},
																					val:        "Natural/build",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 222, col: 5, offset: 5699},
																				run: (*parser).callonExpression17,
																				expr: &litMatcher{
																					pos:        position{line: 222, col: 5, offset: 5699},
																					val:        "Natural/fold",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 223, col: 5, offset: 5746},
																				run: (*parser).callonExpression19,
																				expr: &litMatcher{
																					pos:        position{line: 223, col: 5, offset: 5746},
																					val:        "Natural/isZero",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 224, col: 5, offset: 5797},
																				run: (*parser).callonExpression21,
																				expr: &litMatcher{
																					pos:        position{line: 224, col: 5, offset: 5797},
																					val:        "Natural/even",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 225, col: 5, offset: 5844},
																				run: (*parser).callonExpression23,
																				expr: &litMatcher{
																					pos:        position{line: 225, col: 5, offset: 5844},
																					val:        "Natural/odd",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 226, col: 5, offset: 5889},
																				run: (*parser).callonExpression25,
																				expr: &litMatcher{
																					pos:        position{line: 226, col: 5, offset: 5889},
																					val:        "Natural/toInteger",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 227, col: 5, offset: 5946},
																				run: (*parser).callonExpression27,
																				expr: &litMatcher{
																					pos:        position{line: 227, col: 5, offset: 5946},
																					val:        "Natural/show",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 228, col: 5, offset: 5993},
																				run: (*parser).callonExpression29,
																				expr: &litMatcher{
																					pos:        position{line: 228, col: 5, offset: 5993},
																					val:        "Natural/subtract",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 229, col: 5, offset: 6048},
																				run: (*parser).callonExpression31,
																				expr: &litMatcher{
																					pos:        position{line: 229, col: 5, offset: 6048},
																					val:        "Integer/toDouble",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 230, col: 5, offset: 6103},
																				run: (*parser).callonExpression33,
																				expr: &litMatcher{
																					pos:        position{line: 230, col: 5, offset: 6103},
																					val:        "Integer/show",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 231, col: 5, offset: 6150},
																				run: (*parser).callonExpression35,
																				expr: &litMatcher{
																					pos:        position{line: 231, col: 5, offset: 6150},
																					val:        "Double/show",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 232, col: 5, offset: 6195},
																				run: (*parser).callonExpression37,
																				expr: &litMatcher{
																					pos:        position{line: 232, col: 5, offset: 6195},
																					val:        "List/build",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 233, col: 5, offset: 6238},
																				run: (*parser).callonExpression39,
																				expr: &litMatcher{
																					pos:        position{line: 233, col: 5, offset: 6238},
																					val:        "List/fold",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 234, col: 5, offset: 6279},
																				run: (*parser).callonExpression41,
																				expr: &litMatcher{
																					pos:        position{line: 234, col: 5, offset: 6279},
																					val:        "List/length",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 235, col: 5, offset: 6324},
																				run: (*parser).callonExpression43,
																				expr: &litMatcher{
																					pos:        position{line: 235, col: 5, offset: 6324},
																					val:        "List/head",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 236, col: 5, offset: 6365},
																				run: (*parser).callonExpression45,
																				expr: &litMatcher{
																					pos:        position{line: 236, col: 5, offset: 6365},
																					val:        "List/last",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 237, col: 5, offset: 6406},
																				run: (*parser).callonExpression47,
																				expr: &litMatcher{
																					pos:        position{line: 237, col: 5, offset: 6406},
																					val:        "List/indexed",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 238, col: 5, offset: 6453},
																				run: (*parser).callonExpression49,
																				expr: &litMatcher{
																					pos:        position{line: 238, col: 5, offset: 6453},
																					val:        "List/reverse",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 239, col: 5, offset: 6500},
																				run: (*parser).callonExpression51,
																				expr: &litMatcher{
																					pos:        position{line: 239, col: 5, offset: 6500},
																					val:        "Optional/build",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 240, col: 5, offset: 6551},
																				run: (*parser).callonExpression53,
																				expr: &litMatcher{
																					pos:        position{line: 240, col: 5, offset: 6551},
																					val:        "Optional/fold",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 241, col: 5, offset: 6600},
																				run: (*parser).callonExpression55,
																				expr: &litMatcher{
																					pos:        position{line: 241, col: 5, offset: 6600},
																					val:        "Text/show",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 242, col: 5, offset: 6641},
																				run: (*parser).callonExpression57,
																				expr: &litMatcher{
																					pos:        position{line: 242, col: 5, offset: 6641},
																					val:        "Bool",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 243, col: 5, offset: 6673},
																				run: (*parser).callonExpression59,
																				expr: &litMatcher{
																					pos:        position{line: 243, col: 5, offset: 6673},
																					val:        "True",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 244, col: 5, offset: 6705},
																				run: (*parser).callonExpression61,
																				expr: &litMatcher{
																					pos:        position{line: 244, col: 5, offset: 6705},
																					val:        "False",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 245, col: 5, offset: 6739},
																				run: (*parser).callonExpression63,
																				expr: &litMatcher{
																					pos:        position{line: 245, col: 5, offset: 6739},
																					val:        "Optional",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 246, col: 5, offset: 6779},
																				run: (*parser).callonExpression65,
																				expr: &litMatcher{
																					pos:        position{line: 246, col: 5, offset: 6779},
																					val:        "Natural",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 247, col: 5, offset: 6817},
																				run: (*parser).callonExpression67,
																				expr: &litMatcher{
																					pos:        position{line: 247, col: 5, offset: 6817},
																					val:        "Integer",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 248, col: 5, offset: 6855},
																				run: (*parser).callonExpression69,
																				expr: &litMatcher{
																					pos:        position{line: 248, col: 5, offset: 6855},
																					val:        "Double",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 249, col: 5, offset: 6891},
																				run: (*parser).callonExpression71,
																				expr: &litMatcher{
																					pos:        position{line: 249, col: 5, offset: 6891},
																					val:        "Text",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 250, col: 5, offset: 6923},
																				run: (*parser).callonExpression73,
																				expr: &litMatcher{
																					pos:        position{line: 250, col: 5, offset: 6923},
																					val:        "List",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 251, col: 5, offset: 6955},
																				run: (*parser).callonExpression75,
																				expr: &litMatcher{
																					pos:        position{line: 251, col: 5, offset: 6955},
																					val:        "None",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 252, col: 5, offset: 6987},
																				run: (*parser).callonExpression77,
																				expr: &litMatcher{
																					pos:        position{line: 252, col: 5, offset: 6987},
																					val:        "Type",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 253, col: 5, offset: 7019},
																				run: (*parser).callonExpression79,
																				expr: &litMatcher{
																					pos:        position{line: 253, col: 5, offset: 7019},
																					val:        "Kind",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 254, col: 5, offset: 7051},
																				run: (*parser).callonExpression81,
																				expr: &litMatcher{
																					pos:        position{line: 254, col: 5, offset: 7051},
																					val:        "Sort",
																					ignoreCase: false,
																				},
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 111, col: 23, offset: 2469},
																		val:        "[_/-A-Za-z0-9]",
																		chars:      []rune{'_', '/', '-'},
																		ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 124, col: 52, offset: 2953},
															label: "label",
															expr: &choiceExpr{
																pos: position{line: 121, col: 9, offset: 2803},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 121, col: 9, offset: 2803},
																		run: (*parser).callonExpression86,
																		expr: &seqExpr{
																			pos: position{line: 121, col: 9, offset: 2803},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 121, col: 9, offset: 2803},
																					val:        "`",
																					ignoreCase: false,
																				},
																				&labeledExpr{
																					pos:   position{line: 121, col: 13, offset: 2807},
																					label: "label",
																					expr: &actionExpr{
																						pos: position{line: 119, col: 15, offset: 2744},
																						run: (*parser).callonExpression90,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 119, col: 15, offset: 2744},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 19, offset: 2707},
																								val:        "[ -_a-~]",
																								ranges:     []rune{' ', '_', 'a', '~'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 121, col: 31, offset: 2825},
																					val:        "`",
																					ignoreCase: false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 122, col: 9, offset: 2859},
																		run: (*parser).callonExpression94,
																		expr: &labeledExpr{
																			pos:   position{line: 122, col: 9, offset: 2859},
																			label: "label",
																			expr: &choiceExpr{
																				pos: position{line: 112, col: 15, offset: 2500},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 112, col: 15, offset: 2500},
																						run: (*parser).callonExpression97,
																						expr: &seqExpr{
																							pos: position{line: 112, col: 15, offset: 2500},
																							exprs: []interface{}{
																								&choiceExpr{
																									pos: position{line: 274, col: 5, offset: 7389},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 256, col: 6, offset: 7087},
																											val:        "if",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 257, col: 8, offset: 7101},
																											val:        "then",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 258, col: 8, offset: 7117},
																											val:        "else",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 259, col: 7, offset: 7132},
																											val:        "let",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 260, col: 6, offset: 7145},
																											val:        "in",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 262, col: 9, offset: 7172},
																											val:        "using",
																											ignoreCase: false,
																										},
																										&actionExpr{
																											pos: position{line: 264, col: 11, offset: 7210},
																											run: (*parser).callonExpression106,
																											expr: &litMatcher{
																												pos:        position{line: 264, col: 11, offset: 7210},
																												val:        "missing",
																												ignoreCase: false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 261, col: 6, offset: 7157},
																											val:        "as",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 265, col: 8, offset: 7255},
																											val:        "True",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 266, col: 9, offset: 7272},
																											val:        "False",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 267, col: 12, offset: 7293},
																											val:        "Infinity",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 268, col: 7, offset: 7312},
																											val:        "NaN",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 263, col: 9, offset: 7190},
																											val:        "merge",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 269, col: 8, offset: 7327},
																											val:        "Some",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 270, col: 9, offset: 7344},
																											val:        "toMap",
																											ignoreCase: false,
																										},
																									},
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 112, col: 23, offset: 2508},
																									expr: &charClassMatcher{
																										pos:        position{line: 111, col: 23, offset: 2469},
																										val:        "[_/-A-Za-z0-9]",
																										chars:      []rune{'_', '/', '-'},
																										ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 113, col: 13, offset: 2572},
																						run: (*parser).callonExpression118,
																						expr: &seqExpr{
																							pos: position{line: 113, col: 13, offset: 2572},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 113, col: 13, offset: 2572},
																									expr: &choiceExpr{
																										pos: position{line: 274, col: 5, offset: 7389},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 256, col: 6, offset: 7087},
																												val:        "if",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 257, col: 8, offset: 7101},
																												val:        "then",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 258, col: 8, offset: 7117},
																												val:        "else",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 259, col: 7, offset: 7132},
																												val:        "let",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 260, col: 6, offset: 7145},
																												val:        "in",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 262, col: 9, offset: 7172},
																												val:        "using",
																												ignoreCase: false,
																											},
																											&actionExpr{
																												pos: position{line: 264, col: 11, offset: 7210},
																												run: (*parser).callonExpression128,
																												expr: &litMatcher{
																													pos:        position{line: 264, col: 11, offset: 7210},
																													val:        "missing",
																													ignoreCase: false,
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 261, col: 6, offset: 7157},
																												val:        "as",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 265, col: 8, offset: 7255},
																												val:        "True",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 266, col: 9, offset: 7272},
																												val:        "False",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 267, col: 12, offset: 7293},
																												val:        "Infinity",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 268, col: 7, offset: 7312},
																												val:        "NaN",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 263, col: 9, offset: 7190},
																												val:        "merge",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 269, col: 8, offset: 7327},
																												val:        "Some",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 270, col: 9, offset: 7344},
																												val:        "toMap",
																												ignoreCase: false,
																											},
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 110, col: 24, offset: 2435},
																									val:        "[_A-Za-z]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'A', 'Z', 'a', 'z'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 113, col: 43, offset: 2602},
																									expr: &charClassMatcher{
																										pos:        position{line: 111, col: 23, offset: 2469},
																										val:        "[_/-A-Za-z0-9]",
																										chars:      []rune{'_', '/', '-'},
																										ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 125, col: 19, offset: 3005},
												run: (*parser).callonExpression141,
												expr: &seqExpr{
													pos: position{line: 125, col: 19, offset: 3005},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 125, col: 19, offset: 3005},
															expr: &choiceExpr{
																pos: position{line: 221, col: 5, offset: 5650},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 221, col: 5, offset: 5650},
																		run: (*parser).callonExpression145,
																		expr: &litMatcher{
																			pos:        position{line: 221, col: 5, offset: 5650},
																			val:        "Natural/build",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 222, col: 5, offset: 5699},
																		run: (*parser).callonExpression147,
																		expr: &litMatcher{
																			pos:        position{line: 222, col: 5, offset: 5699},
																			val:        "Natural/fold",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 223, col: 5, offset: 5746},
																		run: (*parser).callonExpression149,
																		expr: &litMatcher{
																			pos:        position{line: 223, col: 5, offset: 5746},
																			val:        "Natural/isZero",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 224, col: 5, offset: 5797},
																		run: (*parser).callonExpression151,
																		expr: &litMatcher{
																			pos:        position{line: 224, col: 5, offset: 5797},
																			val:        "Natural/even",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 225, col: 5, offset: 5844},
																		run: (*parser).callonExpression153,
																		expr: &litMatcher{
																			pos:        position{line: 225, col: 5, offset: 5844},
																			val:        "Natural/odd",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 226, col: 5, offset: 5889},
																		run: (*parser).callonExpression155,
																		expr: &litMatcher{
																			pos:        position{line: 226, col: 5, offset: 5889},
																			val:        "Natural/toInteger",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 227, col: 5, offset: 5946},
																		run: (*parser).callonExpression157,
																		expr: &litMatcher{
																			pos:        position{line: 227, col: 5, offset: 5946},
																			val:        "Natural/show",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 228, col: 5, offset: 5993},
																		run: (*parser).callonExpression159,
																		expr: &litMatcher{
																			pos:        position{line: 228, col: 5, offset: 5993},
																			val:        "Natural/subtract",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 229, col: 5, offset: 6048},
																		run: (*parser).callonExpression161,
																		expr: &litMatcher{
																			pos:        position{line: 229, col: 5, offset: 6048},
																			val:        "Integer/toDouble",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 230, col: 5, offset: 6103},
																		run: (*parser).callonExpression163,
																		expr: &litMatcher{
																			pos:        position{line: 230, col: 5, offset: 6103},
																			val:        "Integer/show",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 231, col: 5, offset: 6150},
																		run: (*parser).callonExpression165,
																		expr: &litMatcher{
																			pos:        position{line: 231, col: 5, offset: 6150},
																			val:        "Double/show",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 232, col: 5, offset: 6195},
																		run: (*parser).callonExpression167,
																		expr: &litMatcher{
																			pos:        position{line: 232, col: 5, offset: 6195},
																			val:        "List/build",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 233, col: 5, offset: 6238},
																		run: (*parser).callonExpression169,
																		expr: &litMatcher{
																			pos:        position{line: 233, col: 5, offset: 6238},
																			val:        "List/fold",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 234, col: 5, offset: 6279},
																		run: (*parser).callonExpression171,
																		expr: &litMatcher{
																			pos:        position{line: 234, col: 5, offset: 6279},
																			val:        "List/length",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 235, col: 5, offset: 6324},
																		run: (*parser).callonExpression173,
																		expr: &litMatcher{
																			pos:        position{line: 235, col: 5, offset: 6324},
																			val:        "List/head",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 236, col: 5, offset: 6365},
																		run: (*parser).callonExpression175,
																		expr: &litMatcher{
																			pos:        position{line: 236, col: 5, offset: 6365},
																			val:        "List/last",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 237, col: 5, offset: 6406},
																		run: (*parser).callonExpression177,
																		expr: &litMatcher{
																			pos:        position{line: 237, col: 5, offset: 6406},
																			val:        "List/indexed",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 238, col: 5, offset: 6453},
																		run: (*parser).callonExpression179,
																		expr: &litMatcher{
																			pos:        position{line: 238, col: 5, offset: 6453},
																			val:        "List/reverse",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 239, col: 5, offset: 6500},
																		run: (*parser).callonExpression181,
																		expr: &litMatcher{
																			pos:        position{line: 239, col: 5, offset: 6500},
																			val:        "Optional/build",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 240, col: 5, offset: 6551},
																		run: (*parser).callonExpression183,
																		expr: &litMatcher{
																			pos:        position{line: 240, col: 5, offset: 6551},
																			val:        "Optional/fold",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 241, col: 5, offset: 6600},
																		run: (*parser).callonExpression185,
																		expr: &litMatcher{
																			pos:        position{line: 241, col: 5, offset: 6600},
																			val:        "Text/show",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 242, col: 5, offset: 6641},
																		run: (*parser).callonExpression187,
																		expr: &litMatcher{
																			pos:        position{line: 242, col: 5, offset: 6641},
																			val:        "Bool",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 243, col: 5, offset: 6673},
																		run: (*parser).callonExpression189,
																		expr: &litMatcher{
																			pos:        position{line: 243, col: 5, offset: 6673},
																			val:        "True",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 244, col: 5, offset: 6705},
																		run: (*parser).callonExpression191,
																		expr: &litMatcher{
																			pos:        position{line: 244, col: 5, offset: 6705},
																			val:        "False",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 245, col: 5, offset: 6739},
																		run: (*parser).callonExpression193,
																		expr: &litMatcher{
																			pos:        position{line: 245, col: 5, offset: 6739},
																			val:        "Optional",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 246, col: 5, offset: 6779},
																		run: (*parser).callonExpression195,
																		expr: &litMatcher{
																			pos:        position{line: 246, col: 5, offset: 6779},
																			val:        "Natural",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 247, col: 5, offset: 6817},
																		run: (*parser).callonExpression197,
																		expr: &litMatcher{
																			pos:        position{line: 247, col: 5, offset: 6817},
																			val:        "Integer",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 248, col: 5, offset: 6855},
																		run: (*parser).callonExpression199,
																		expr: &litMatcher{
																			pos:        position{line: 248, col: 5, offset: 6855},
																			val:        "Double",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 249, col: 5, offset: 6891},
																		run: (*parser).callonExpression201,
																		expr: &litMatcher{
																			pos:        position{line: 249, col: 5, offset: 6891},
																			val:        "Text",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 250, col: 5, offset: 6923},
																		run: (*parser).callonExpression203,
																		expr: &litMatcher{
																			pos:        position{line: 250, col: 5, offset: 6923},
																			val:        "List",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 251, col: 5, offset: 6955},
																		run: (*parser).callonExpression205,
																		expr: &litMatcher{
																			pos:        position{line: 251, col: 5, offset: 6955},
																			val:        "None",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 252, col: 5, offset: 6987},
																		run: (*parser).callonExpression207,
																		expr: &litMatcher{
																			pos:        position{line: 252, col: 5, offset: 6987},
																			val:        "Type",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 253, col: 5, offset: 7019},
																		run: (*parser).callonExpression209,
																		expr: &litMatcher{
																			pos:        position{line: 253, col: 5, offset: 7019},
																			val:        "Kind",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 254, col: 5, offset: 7051},
																		run: (*parser).callonExpression211,
																		expr: &litMatcher{
																			pos:        position{line: 254, col: 5, offset: 7051},
																			val:        "Sort",
																			ignoreCase: false,
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 125, col: 29, offset: 3015},
															label: "label",
															expr: &choiceExpr{
																pos: position{line: 121, col: 9, offset: 2803},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 121, col: 9, offset: 2803},
																		run: (*parser).callonExpression215,
																		expr: &seqExpr{
																			pos: position{line: 121, col: 9, offset: 2803},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 121, col: 9, offset: 2803},
																					val:        "`",
																					ignoreCase: false,
																				},
																				&labeledExpr{
																					pos:   position{line: 121, col: 13, offset: 2807},
																					label: "label",
																					expr: &actionExpr{
																						pos: position{line: 119, col: 15, offset: 2744},
																						run: (*parser).callonExpression219,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 119, col: 15, offset: 2744},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 19, offset: 2707},
																								val:        "[ -_a-~]",
																								ranges:     []rune{' ', '_', 'a', '~'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 121, col: 31, offset: 2825},
																					val:        "`",
																					ignoreCase: false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 122, col: 9, offset: 2859},
																		run: (*parser).callonExpression223,
																		expr: &labeledExpr{
																			pos:   position{line: 122, col: 9, offset: 2859},
																			label: "label",
																			expr: &choiceExpr{
																				pos: position{line: 112, col: 15, offset: 2500},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 112, col: 15, offset: 2500},
																						run: (*parser).callonExpression226,
																						expr: &seqExpr{
																							pos: position{line: 112, col: 15, offset: 2500},
																							exprs: []interface{}{
																								&choiceExpr{
																									pos: position{line: 274, col: 5, offset: 7389},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 256, col: 6, offset: 7087},
																											val:        "if",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 257, col: 8, offset: 7101},
																											val:        "then",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 258, col: 8, offset: 7117},
																											val:        "else",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 259, col: 7, offset: 7132},
																											val:        "let",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 260, col: 6, offset: 7145},
																											val:        "in",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 262, col: 9, offset: 7172},
																											val:        "using",
																											ignoreCase: false,
																										},
																										&actionExpr{
																											pos: position{line: 264, col: 11, offset: 7210},
																											run: (*parser).callonExpression235,
																											expr: &litMatcher{
																												pos:        position{line: 264, col: 11, offset: 7210},
																												val:        "missing",
																												ignoreCase: false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 261, col: 6, offset: 7157},
																											val:        "as",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 265, col: 8, offset: 7255},
																											val:        "True",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 266, col: 9, offset: 7272},
																											val:        "False",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 267, col: 12, offset: 7293},
																											val:        "Infinity",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 268, col: 7, offset: 7312},
																											val:        "NaN",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 263, col: 9, offset: 7190},
																											val:        "merge",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 269, col: 8, offset: 7327},
																											val:        "Some",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 270, col: 9, offset: 7344},
																											val:        "toMap",
																											ignoreCase: false,
																										},
																									},
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 112, col: 23, offset: 2508},
																									expr: &charClassMatcher{
																										pos:        position{line: 111, col: 23, offset: 2469},
																										val:        "[_/-A-Za-z0-9]",
																										chars:      []rune{'_', '/', '-'},
																										ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 113, col: 13, offset: 2572},
																						run: (*parser).callonExpression247,
																						expr: &seqExpr{
																							pos: position{line: 113, col: 13, offset: 2572},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 113, col: 13, offset: 2572},
																									expr: &choiceExpr{
																										pos: position{line: 274, col: 5, offset: 7389},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 256, col: 6, offset: 7087},
																												val:        "if",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 257, col: 8, offset: 7101},
																												val:        "then",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 258, col: 8, offset: 7117},
																												val:        "else",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 259, col: 7, offset: 7132},
																												val:        "let",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 260, col: 6, offset: 7145},
																												val:        "in",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 262, col: 9, offset: 7172},
																												val:        "using",
																												ignoreCase: false,
																											},
																											&actionExpr{
																												pos: position{line: 264, col: 11, offset: 7210},
																												run: (*parser).callonExpression257,
																												expr: &litMatcher{
																													pos:        position{line: 264, col: 11, offset: 7210},
																													val:        "missing",
																													ignoreCase: false,
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 261, col: 6, offset: 7157},
																												val:        "as",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 265, col: 8, offset: 7255},
																												val:        "True",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 266, col: 9, offset: 7272},
																												val:        "False",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 267, col: 12, offset: 7293},
																												val:        "Infinity",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 268, col: 7, offset: 7312},
																												val:        "NaN",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 263, col: 9, offset: 7190},
																												val:        "merge",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 269, col: 8, offset: 7327},
																												val:        "Some",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 270, col: 9, offset: 7344},
																												val:        "toMap",
																												ignoreCase: false,
																											},
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 110, col: 24, offset: 2435},
																									val:        "[_A-Za-z]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'A', 'Z', 'a', 'z'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 113, col: 43, offset: 2602},
																									expr: &charClassMatcher{
																										pos:        position{line: 111, col: 23, offset: 2469},
																										val:        "[_/-A-Za-z0-9]",
																										chars:      []rune{'_', '/', '-'},
																										ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 494, col: 45, offset: 13779},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 494, col: 47, offset: 13781},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 494, col: 51, offset: 13785},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 494, col: 54, offset: 13788},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 494, col: 56, offset: 13790},
										name: "Expression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 494, col: 67, offset: 13801},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 494, col: 69, offset: 13803},
									val:        ")",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 494, col: 73, offset: 13807},
									name: "_",
								},
								&choiceExpr{
									pos: position{line: 292, col: 9, offset: 7761},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 292, col: 9, offset: 7761},
											val:        "->",
											ignoreCase: false,
										},
										&litMatcher{
											pos:        position{line: 292, col: 16, offset: 7768},
											val:        "‚Üí",
											ignoreCase: false,
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 494, col: 81, offset: 13815},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 494, col: 83, offset: 13817},
									label: "body",
									expr: &ruleRefExpr{
										pos:  position{line: 494, col: 88, offset: 13822},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 497, col: 7, offset: 13939},
						run: (*parser).callonExpression284,
						expr: &seqExpr{
							pos: position{line: 497, col: 7, offset: 13939},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 256, col: 6, offset: 7087},
									val:        "if",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 497, col: 10, offset: 13942},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 497, col: 13, offset: 13945},
									label: "cond",
									expr: &ruleRefExpr{
										pos:  position{line: 497, col: 18, offset: 13950},
										name: "Expression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 497, col: 29, offset: 13961},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 257, col: 8, offset: 7101},
									val:        "then",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 497, col: 36, offset: 13968},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 497, col: 39, offset: 13971},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 497, col: 41, offset: 13973},
										name: "Expression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 497, col: 52, offset: 13984},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 258, col: 8, offset: 7117},
									val:        "else",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 497, col: 59, offset: 13991},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 497, col: 62, offset: 13994},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 497, col: 64, offset: 13996},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 500, col: 7, offset: 14082},
						run: (*parser).callonExpression300,
						expr: &seqExpr{
							pos: position{line: 500, col: 7, offset: 14082},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 500, col: 7, offset: 14082},
									label: "bindings",
									expr: &oneOrMoreExpr{
										pos: position{line: 500, col: 16, offset: 14091},
										expr: &ruleRefExpr{
											pos:  position{line: 500, col: 16, offset: 14091},
											name: "LetBinding",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 260, col: 6, offset: 7145},
									val:        "in",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 500, col: 31, offset: 14106},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 500, col: 34, offset: 14109},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 500, col: 36, offset: 14111},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 507, col: 7, offset: 14351},
						run: (*parser).callonExpression309,
						expr: &seqExpr{
							pos: position{line: 507, col: 7, offset: 14351},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 291, col: 10, offset: 7734},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 291, col: 10, offset: 7734},
											val:        "forall",
											ignoreCase: false,
										},
										&litMatcher{
											pos:        position{line: 291, col: 21, offset: 7745},
											val:        "‚àÄ",
											ignoreCase: false,
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 507, col: 14, offset: 14358},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 507, col: 16, offset: 14360},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 507, col: 20, offset: 14364},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 507, col: 22, offset: 14366},
									label: "label",
									expr: &choiceExpr{
										pos: position{line: 124, col: 20, offset: 2921},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 124, col: 20, offset: 2921},
												run: (*parser).callonExpression319,
												expr: &seqExpr{
													pos: position{line: 124, col: 20, offset: 2921},
													exprs: []interface{}{
														&andExpr{
															pos: position{line: 124, col: 20, offset: 2921},
															expr: &seqExpr{
																pos: position{line: 124, col: 22, offset: 2923},
																exprs: []interface{}{
																	&choiceExpr{
																		pos: position{line: 221, col: 5, offset: 5650},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 221, col: 5, offset: 5650},
																				run: (*parser).callonExpression324,
																				expr: &litMatcher{
																					pos:        position{line: 221, col: 5, offset: 5650},
																					val:        "Natural/build",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 222, col: 5, offset: 5699},
																				run: (*parser).callonExpression326,
																				expr: &litMatcher{
																					pos:        position{line: 222, col: 5, offset: 5699},
																					val:        "Natural/fold",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 223, col: 5, offset: 5746},
																				run: (*parser).callonExpression328,
																				expr: &litMatcher{
																					pos:        position{line: 223, col: 5, offset: 5746},
																					val:        "Natural/isZero",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 224, col: 5, offset: 5797},
																				run: (*parser).callonExpression330,
																				expr: &litMatcher{
																					pos:        position{line: 224, col: 5, offset: 5797},
																					val:        "Natural/even",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 225, col: 5, offset: 5844},
																				run: (*parser).callonExpression332,
																				expr: &litMatcher{
																					pos:        position{line: 225, col: 5, offset: 5844},
																					val:        "Natural/odd",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 226, col: 5, offset: 5889},
																				run: (*parser).callonExpression334,
																				expr: &litMatcher{
																					pos:        position{line: 226, col: 5, offset: 5889},
																					val:        "Natural/toInteger",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 227, col: 5, offset: 5946},
																				run: (*parser).callonExpression336,
																				expr: &litMatcher{
																					pos:        position{line: 227, col: 5, offset: 5946},
																					val:        "Natural/show",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 228, col: 5, offset: 5993},
																				run: (*parser).callonExpression338,
																				expr: &litMatcher{
																					pos:        position{line: 228, col: 5, offset: 5993},
																					val:        "Natural/subtract",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 229, col: 5, offset: 6048},
																				run: (*parser).callonExpression340,
																				expr: &litMatcher{
																					pos:        position{line: 229, col: 5, offset: 6048},
																					val:        "Integer/toDouble",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 230, col: 5, offset: 6103},
																				run: (*parser).callonExpression342,
																				expr: &litMatcher{
																					pos:        position{line: 230, col: 5, offset: 6103},
																					val:        "Integer/show",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 231, col: 5, offset: 6150},
																				run: (*parser).callonExpression344,
																				expr: &litMatcher{
																					pos:        position{line: 231, col: 5, offset: 6150},
																					val:        "Double/show",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 232, col: 5, offset: 6195},
																				run: (*parser).callonExpression346,
																				expr: &litMatcher{
																					pos:        position{line: 232, col: 5, offset: 6195},
																					val:        "List/build",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 233, col: 5, offset: 6238},
																				run: (*parser).callonExpression348,
																				expr: &litMatcher{
																					pos:        position{line: 233, col: 5, offset: 6238},
																					val:        "List/fold",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 234, col: 5, offset: 6279},
																				run: (*parser).callonExpression350,
																				expr: &litMatcher{
																					pos:        position{line: 234, col: 5, offset: 6279},
																					val:        "List/length",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 235, col: 5, offset: 6324},
																				run: (*parser).callonExpression352,
																				expr: &litMatcher{
																					pos:        position{line: 235, col: 5, offset: 6324},
																					val:        "List/head",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 236, col: 5, offset: 6365},
																				run: (*parser).callonExpression354,
																				expr: &litMatcher{
																					pos:        position{line: 236, col: 5, offset: 6365},
																					val:        "List/last",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 237, col: 5, offset: 6406},
																				run: (*parser).callonExpression356,
																				expr: &litMatcher{
																					pos:        position{line: 237, col: 5, offset: 6406},
																					val:        "List/indexed",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 238, col: 5, offset: 6453},
																				run: (*parser).callonExpression358,
																				expr: &litMatcher{
																					pos:        position{line: 238, col: 5, offset: 6453},
																					val:        "List/reverse",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 239, col: 5, offset: 6500},
																				run: (*parser).callonExpression360,
																				expr: &litMatcher{
																					pos:        position{line: 239, col: 5, offset: 6500},
																					val:        "Optional/build",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 240, col: 5, offset: 6551},
																				run: (*parser).callonExpression362,
																				expr: &litMatcher{
																					pos:        position{line: 240, col: 5, offset: 6551},
																					val:        "Optional/fold",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 241, col: 5, offset: 6600},
																				run: (*parser).callonExpression364,
																				expr: &litMatcher{
																					pos:        position{line: 241, col: 5, offset: 6600},
																					val:        "Text/show",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 242, col: 5, offset: 6641},
																				run: (*parser).callonExpression366,
																				expr: &litMatcher{
																					pos:        position{line: 242, col: 5, offset: 6641},
																					val:        "Bool",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 243, col: 5, offset: 6673},
																				run: (*parser).callonExpression368,
																				expr: &litMatcher{
																					pos:        position{line: 243, col: 5, offset: 6673},
																					val:        "True",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 244, col: 5, offset: 6705},
																				run: (*parser).callonExpression370,
																				expr: &litMatcher{
																					pos:        position{line: 244, col: 5, offset: 6705},
																					val:        "False",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 245, col: 5, offset: 6739},
																				run: (*parser).callonExpression372,
																				expr: &litMatcher{
																					pos:        position{line: 245, col: 5, offset: 6739},
																					val:        "Optional",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 246, col: 5, offset: 6779},
																				run: (*parser).callonExpression374,
																				expr: &litMatcher{
																					pos:        position{line: 246, col: 5, offset: 6779},
																					val:        "Natural",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 247, col: 5, offset: 6817},
																				run: (*parser).callonExpression376,
																				expr: &litMatcher{
																					pos:        position{line: 247, col: 5, offset: 6817},
																					val:        "Integer",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 248, col: 5, offset: 6855},
																				run: (*parser).callonExpression378,
																				expr: &litMatcher{
																					pos:        position{line: 248, col: 5, offset: 6855},
																					val:        "Double",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 249, col: 5, offset: 6891},
																				run: (*parser).callonExpression380,
																				expr: &litMatcher{
																					pos:        position{line: 249, col: 5, offset: 6891},
																					val:        "Text",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 250, col: 5, offset: 6923},
																				run: (*parser).callonExpression382,
																				expr: &litMatcher{
																					pos:        position{line: 250, col: 5, offset: 6923},
																					val:        "List",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 251, col: 5, offset: 6955},
																				run: (*parser).callonExpression384,
																				expr: &litMatcher{
																					pos:        position{line: 251, col: 5, offset: 6955},
																					val:        "None",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 252, col: 5, offset: 6987},
																				run: (*parser).callonExpression386,
																				expr: &litMatcher{
																					pos:        position{line: 252, col: 5, offset: 6987},
																					val:        "Type",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 253, col: 5, offset: 7019},
																				run: (*parser).callonExpression388,
																				expr: &litMatcher{
																					pos:        position{line: 253, col: 5, offset: 7019},
																					val:        "Kind",
																					ignoreCase: false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 254, col: 5, offset: 7051},
																				run: (*parser).callonExpression390,
																				expr: &litMatcher{
																					pos:        position{line: 254, col: 5, offset: 7051},
																					val:        "Sort",
																					ignoreCase: false,
																				},
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 111, col: 23, offset: 2469},
																		val:        "[_/-A-Za-z0-9]",
																		chars:      []rune{'_', '/', '-'},
																		ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 124, col: 52, offset: 2953},
															label: "label",
															expr: &choiceExpr{
																pos: position{line: 121, col: 9, offset: 2803},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 121, col: 9, offset: 2803},
																		run: (*parser).callonExpression395,
																		expr: &seqExpr{
																			pos: position{line: 121, col: 9, offset: 2803},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 121, col: 9, offset: 2803},
																					val:        "`",
																					ignoreCase: false,
																				},
																				&labeledExpr{
																					pos:   position{line: 121, col: 13, offset: 2807},
																					label: "label",
																					expr: &actionExpr{
																						pos: position{line: 119, col: 15, offset: 2744},
																						run: (*parser).callonExpression399,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 119, col: 15, offset: 2744},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 19, offset: 2707},
																								val:        "[ -_a-~]",
																								ranges:     []rune{' ', '_', 'a', '~'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 121, col: 31, offset: 2825},
																					val:        "`",
																					ignoreCase: false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 122, col: 9, offset: 2859},
																		run: (*parser).callonExpression403,
																		expr: &labeledExpr{
																			pos:   position{line: 122, col: 9, offset: 2859},
																			label: "label",
																			expr: &choiceExpr{
																				pos: position{line: 112, col: 15, offset: 2500},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 112, col: 15, offset: 2500},
																						run: (*parser).callonExpression406,
																						expr: &seqExpr{
																							pos: position{line: 112, col: 15, offset: 2500},
																							exprs: []interface{}{
																								&choiceExpr{
																									pos: position{line: 274, col: 5, offset: 7389},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 256, col: 6, offset: 7087},
																											val:        "if",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 257, col: 8, offset: 7101},
																											val:        "then",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 258, col: 8, offset: 7117},
																											val:        "else",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 259, col: 7, offset: 7132},
																											val:        "let",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 260, col: 6, offset: 7145},
																											val:        "in",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 262, col: 9, offset: 7172},
																											val:        "using",
																											ignoreCase: false,
																										},
																										&actionExpr{
																											pos: position{line: 264, col: 11, offset: 7210},
																											run: (*parser).callonExpression415,
																											expr: &litMatcher{
																												pos:        position{line: 264, col: 11, offset: 7210},
																												val:        "missing",
																												ignoreCase: false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 261, col: 6, offset: 7157},
																											val:        "as",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 265, col: 8, offset: 7255},
																											val:        "True",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 266, col: 9, offset: 7272},
																											val:        "False",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 267, col: 12, offset: 7293},
																											val:        "Infinity",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 268, col: 7, offset: 7312},
																											val:        "NaN",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 263, col: 9, offset: 7190},
																											val:        "merge",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 269, col: 8, offset: 7327},
																											val:        "Some",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 270, col: 9, offset: 7344},
																											val:        "toMap",
																											ignoreCase: false,
																										},
																									},
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 112, col: 23, offset: 2508},
																									expr: &charClassMatcher{
																										pos:        position{line: 111, col: 23, offset: 2469},
																										val:        "[_/-A-Za-z0-9]",
																										chars:      []rune{'_', '/', '-'},
																										ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 113, col: 13, offset: 2572},
																						run: (*parser).callonExpression427,
																						expr: &seqExpr{
																							pos: position{line: 113, col: 13, offset: 2572},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 113, col: 13, offset: 2572},
																									expr: &choiceExpr{
																										pos: position{line: 274, col: 5, offset: 7389},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 256, col: 6, offset: 7087},
																												val:        "if",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 257, col: 8, offset: 7101},
																												val:        "then",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 258, col: 8, offset: 7117},
																												val:        "else",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 259, col: 7, offset: 7132},
																												val:        "let",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 260, col: 6, offset: 7145},
																												val:        "in",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 262, col: 9, offset: 7172},
																												val:        "using",
																												ignoreCase: false,
																											},
																											&actionExpr{
																												pos: position{line: 264, col: 11, offset: 7210},
																												run: (*parser).callonExpression437,
																												expr: &litMatcher{
																													pos:        position{line: 264, col: 11, offset: 7210},
																													val:        "missing",
																													ignoreCase: false,
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 261, col: 6, offset: 7157},
																												val:        "as",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 265, col: 8, offset: 7255},
																												val:        "True",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 266, col: 9, offset: 7272},
																												val:        "False",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 267, col: 12, offset: 7293},
																												val:        "Infinity",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 268, col: 7, offset: 7312},
																												val:        "NaN",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 263, col: 9, offset: 7190},
																												val:        "merge",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 269, col: 8, offset: 7327},
																												val:        "Some",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 270, col: 9, offset: 7344},
																												val:        "toMap",
																												ignoreCase: false,
																											},
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 110, col: 24, offset: 2435},
																									val:        "[_A-Za-z]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'A', 'Z', 'a', 'z'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 113, col: 43, offset: 2602},
																									expr: &charClassMatcher{
																										pos:        position{line: 111, col: 23, offset: 2469},
																										val:        "[_/-A-Za-z0-9]",
																										chars:      []rune{'_', '/', '-'},
																										ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 125, col: 19, offset: 3005},
												run: (*parser).callonExpression450,
												expr: &seqExpr{
													pos: position{line: 125, col: 19, offset: 3005},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 125, col: 19, offset: 3005},
															expr: &choiceExpr{
																pos: position{line: 221, col: 5, offset: 5650},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 221, col: 5, offset: 5650},
																		run: (*parser).callonExpression454,
																		expr: &litMatcher{
																			pos:        position{line: 221, col: 5, offset: 5650},
																			val:        "Natural/build",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 222, col: 5, offset: 5699},
																		run: (*parser).callonExpression456,
																		expr: &litMatcher{
																			pos:        position{line: 222, col: 5, offset: 5699},
																			val:        "Natural/fold",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 223, col: 5, offset: 5746},
																		run: (*parser).callonExpression458,
																		expr: &litMatcher{
																			pos:        position{line: 223, col: 5, offset: 5746},
																			val:        "Natural/isZero",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 224, col: 5, offset: 5797},
																		run: (*parser).callonExpression460,
																		expr: &litMatcher{
																			pos:        position{line: 224, col: 5, offset: 5797},
																			val:        "Natural/even",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 225, col: 5, offset: 5844},
																		run: (*parser).callonExpression462,
																		expr: &litMatcher{
																			pos:        position{line: 225, col: 5, offset: 5844},
																			val:        "Natural/odd",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 226, col: 5, offset: 5889},
																		run: (*parser).callonExpression464,
																		expr: &litMatcher{
																			pos:        position{line: 226, col: 5, offset: 5889},
																			val:        "Natural/toInteger",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 227, col: 5, offset: 5946},
																		run: (*parser).callonExpression466,
																		expr: &litMatcher{
																			pos:        position{line: 227, col: 5, offset: 5946},
																			val:        "Natural/show",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 228, col: 5, offset: 5993},
																		run: (*parser).callonExpression468,
																		expr: &litMatcher{
																			pos:        position{line: 228, col: 5, offset: 5993},
																			val:        "Natural/subtract",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 229, col: 5, offset: 6048},
																		run: (*parser).callonExpression470,
																		expr: &litMatcher{
																			pos:        position{line: 229, col: 5, offset: 6048},
																			val:        "Integer/toDouble",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 230, col: 5, offset: 6103},
																		run: (*parser).callonExpression472,
																		expr: &litMatcher{
																			pos:        position{line: 230, col: 5, offset: 6103},
																			val:        "Integer/show",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 231, col: 5, offset: 6150},
																		run: (*parser).callonExpression474,
																		expr: &litMatcher{
																			pos:        position{line: 231, col: 5, offset: 6150},
																			val:        "Double/show",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 232, col: 5, offset: 6195},
																		run: (*parser).callonExpression476,
																		expr: &litMatcher{
																			pos:        position{line: 232, col: 5, offset: 6195},
																			val:        "List/build",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 233, col: 5, offset: 6238},
																		run: (*parser).callonExpression478,
																		expr: &litMatcher{
																			pos:        position{line: 233, col: 5, offset: 6238},
																			val:        "List/fold",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 234, col: 5, offset: 6279},
																		run: (*parser).callonExpression480,
																		expr: &litMatcher{
																			pos:        position{line: 234, col: 5, offset: 6279},
																			val:        "List/length",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 235, col: 5, offset: 6324},
																		run: (*parser).callonExpression482,
																		expr: &litMatcher{
																			pos:        position{line: 235, col: 5, offset: 6324},
																			val:        "List/head",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 236, col: 5, offset: 6365},
																		run: (*parser).callonExpression484,
																		expr: &litMatcher{
																			pos:        position{line: 236, col: 5, offset: 6365},
																			val:        "List/last",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 237, col: 5, offset: 6406},
																		run: (*parser).callonExpression486,
																		expr: &litMatcher{
																			pos:        position{line: 237, col: 5, offset: 6406},
																			val:        "List/indexed",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 238, col: 5, offset: 6453},
																		run: (*parser).callonExpression488,
																		expr: &litMatcher{
																			pos:        position{line: 238, col: 5, offset: 6453},
																			val:        "List/reverse",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 239, col: 5, offset: 6500},
																		run: (*parser).callonExpression490,
																		expr: &litMatcher{
																			pos:        position{line: 239, col: 5, offset: 6500},
																			val:        "Optional/build",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 240, col: 5, offset: 6551},
																		run: (*parser).callonExpression492,
																		expr: &litMatcher{
																			pos:        position{line: 240, col: 5, offset: 6551},
																			val:        "Optional/fold",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 241, col: 5, offset: 6600},
																		run: (*parser).callonExpression494,
																		expr: &litMatcher{
																			pos:        position{line: 241, col: 5, offset: 6600},
																			val:        "Text/show",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 242, col: 5, offset: 6641},
																		run: (*parser).callonExpression496,
																		expr: &litMatcher{
																			pos:        position{line: 242, col: 5, offset: 6641},
																			val:        "Bool",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 243, col: 5, offset: 6673},
																		run: (*parser).callonExpression498,
																		expr: &litMatcher{
																			pos:        position{line: 243, col: 5, offset: 6673},
																			val:        "True",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 244, col: 5, offset: 6705},
																		run: (*parser).callonExpression500,
																		expr: &litMatcher{
																			pos:        position{line: 244, col: 5, offset: 6705},
																			val:        "False",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 245, col: 5, offset: 6739},
																		run: (*parser).callonExpression502,
																		expr: &litMatcher{
																			pos:        position{line: 245, col: 5, offset: 6739},
																			val:        "Optional",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 246, col: 5, offset: 6779},
																		run: (*parser).callonExpression504,
																		expr: &litMatcher{
																			pos:        position{line: 246, col: 5, offset: 6779},
																			val:        "Natural",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 247, col: 5, offset: 6817},
																		run: (*parser).callonExpression506,
																		expr: &litMatcher{
																			pos:        position{line: 247, col: 5, offset: 6817},
																			val:        "Integer",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 248, col: 5, offset: 6855},
																		run: (*parser).callonExpression508,
																		expr: &litMatcher{
																			pos:        position{line: 248, col: 5, offset: 6855},
																			val:        "Double",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 249, col: 5, offset: 6891},
																		run: (*parser).callonExpression510,
																		expr: &litMatcher{
																			pos:        position{line: 249, col: 5, offset: 6891},
																			val:        "Text",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 250, col: 5, offset: 6923},
																		run: (*parser).callonExpression512,
																		expr: &litMatcher{
																			pos:        position{line: 250, col: 5, offset: 6923},
																			val:        "List",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 251, col: 5, offset: 6955},
																		run: (*parser).callonExpression514,
																		expr: &litMatcher{
																			pos:        position{line: 251, col: 5, offset: 6955},
																			val:        "None",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 252, col: 5, offset: 6987},
																		run: (*parser).callonExpression516,
																		expr: &litMatcher{
																			pos:        position{line: 252, col: 5, offset: 6987},
																			val:        "Type",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 253, col: 5, offset: 7019},
																		run: (*parser).callonExpression518,
																		expr: &litMatcher{
																			pos:        position{line: 253, col: 5, offset: 7019},
																			val:        "Kind",
																			ignoreCase: false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 254, col: 5, offset: 7051},
																		run: (*parser).callonExpression520,
																		expr: &litMatcher{
																			pos:        position{line: 254, col: 5, offset: 7051},
																			val:        "Sort",
																			ignoreCase: false,
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 125, col: 29, offset: 3015},
															label: "label",
															expr: &choiceExpr{
																pos: position{line: 121, col: 9, offset: 2803},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 121, col: 9, offset: 2803},
																		run: (*parser).callonExpression524,
																		expr: &seqExpr{
																			pos: position{line: 121, col: 9, offset: 2803},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 121, col: 9, offset: 2803},
																					val:        "`",
																					ignoreCase: false,
																				},
																				&labeledExpr{
																					pos:   position{line: 121, col: 13, offset: 2807},
																					label: "label",
																					expr: &actionExpr{
																						pos: position{line: 119, col: 15, offset: 2744},
																						run: (*parser).callonExpression528,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 119, col: 15, offset: 2744},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 19, offset: 2707},
																								val:        "[ -_a-~]",
																								ranges:     []rune{' ', '_', 'a', '~'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 121, col: 31, offset: 2825},
																					val:        "`",
																					ignoreCase: false,
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 122, col: 9, offset: 2859},
																		run: (*parser).callonExpression532,
																		expr: &labeledExpr{
																			pos:   position{line: 122, col: 9, offset: 2859},
																			label: "label",
																			expr: &choiceExpr{
																				pos: position{line: 112, col: 15, offset: 2500},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 112, col: 15, offset: 2500},
																						run: (*parser).callonExpression535,
																						expr: &seqExpr{
																							pos: position{line: 112, col: 15, offset: 2500},
																							exprs: []interface{}{
																								&choiceExpr{
																									pos: position{line: 274, col: 5, offset: 7389},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 256, col: 6, offset: 7087},
																											val:        "if",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 257, col: 8, offset: 7101},
																											val:        "then",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 258, col: 8, offset: 7117},
																											val:        "else",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 259, col: 7, offset: 7132},
																											val:        "let",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 260, col: 6, offset: 7145},
																											val:        "in",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 262, col: 9, offset: 7172},
																											val:        "using",
																											ignoreCase: false,
																										},
																										&actionExpr{
																											pos: position{line: 264, col: 11, offset: 7210},
																											run: (*parser).callonExpression544,
																											expr: &litMatcher{
																												pos:        position{line: 264, col: 11, offset: 7210},
																												val:        "missing",
																												ignoreCase: false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 261, col: 6, offset: 7157},
																											val:        "as",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 265, col: 8, offset: 7255},
																											val:        "True",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 266, col: 9, offset: 7272},
																											val:        "False",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 267, col: 12, offset: 7293},
																											val:        "Infinity",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 268, col: 7, offset: 7312},
																											val:        "NaN",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 263, col: 9, offset: 7190},
																											val:        "merge",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 269, col: 8, offset: 7327},
																											val:        "Some",
																											ignoreCase: false,
																										},
																										&litMatcher{
																											pos:        position{line: 270, col: 9, offset: 7344},
																											val:        "toMap",
																											ignoreCase: false,
																										},
																									},
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 112, col: 23, offset: 2508},
																									expr: &charClassMatcher{
																										pos:        position{line: 111, col: 23, offset: 2469},
																										val:        "[_/-A-Za-z0-9]",
																										chars:      []rune{'_', '/', '-'},
																										ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 113, col: 13, offset: 2572},
																						run: (*parser).callonExpression556,
																						expr: &seqExpr{
																							pos: position{line: 113, col: 13, offset: 2572},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 113, col: 13, offset: 2572},
																									expr: &choiceExpr{
																										pos: position{line: 274, col: 5, offset: 7389},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 256, col: 6, offset: 7087},
																												val:        "if",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 257, col: 8, offset: 7101},
																												val:        "then",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 258, col: 8, offset: 7117},
																												val:        "else",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 259, col: 7, offset: 7132},
																												val:        "let",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 260, col: 6, offset: 7145},
																												val:        "in",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 262, col: 9, offset: 7172},
																												val:        "using",
																												ignoreCase: false,
																											},
																											&actionExpr{
																												pos: position{line: 264, col: 11, offset: 7210},
																												run: (*parser).callonExpression566,
																												expr: &litMatcher{
																													pos:        position{line: 264, col: 11, offset: 7210},
																													val:        "missing",
																													ignoreCase: false,
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 261, col: 6, offset: 7157},
																												val:        "as",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 265, col: 8, offset: 7255},
																												val:        "True",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 266, col: 9, offset: 7272},
																												val:        "False",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 267, col: 12, offset: 7293},
																												val:        "Infinity",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 268, col: 7, offset: 7312},
																												val:        "NaN",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 263, col: 9, offset: 7190},
																												val:        "merge",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 269, col: 8, offset: 7327},
																												val:        "Some",
																												ignoreCase: false,
																											},
																											&litMatcher{
																												pos:        position{line: 270, col: 9, offset: 7344},
																												val:        "toMap",
																												ignoreCase: false,
																											},
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 110, col: 24, offset: 2435},
																									val:        "[_A-Za-z]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'A', 'Z', 'a', 'z'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 113, col: 43, offset: 2602},
																									expr: &charClassMatcher{
																										pos:        position{line: 111, col: 23, offset: 2469},
																										val:        "[_/-A-Za-z0-9]",
																										chars:      []rune{'_', '/', '-'},
																										ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 507, col: 45, offset: 14389},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 507, col: 47, offset: 14391},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 507, col: 51, offset: 14395},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 507, col: 54, offset: 14398},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 507, col: 56, offset: 14400},
										name: "Expression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 507, col: 67, offset: 14411},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 507, col: 69, offset: 14413},
									val:        ")",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 507, col: 73, offset: 14417},
									name: "_",
								},
								&choiceExpr{
									pos: position{line: 292, col: 9, offset: 7761},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 292, col: 9, offset: 7761},
											val:        "->",
											ignoreCase: false,
										},
										&litMatcher{
											pos:        position{line: 292, col: 16, offset: 7768},
											val:        "‚Üí",
											ignoreCase: false,
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 507, col: 81, offset: 14425},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 507, col: 83, offset: 14427},
									label: "body",
									expr: &ruleRefExpr{
										pos:  position{line: 507, col: 88, offset: 14432},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 510, col: 7, offset: 14541},
						run: (*parser).callonExpression593,
						expr: &seqExpr{
							pos: position{line: 510, col: 7, offset: 14541},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 510, col: 7, offset: 14541},
									label: "o",
									expr: &ruleRefExpr{
										pos:  position{line: 510, col: 9, offset: 14543},
										name: "OperatorExpression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 510, col: 28, offset: 14562},
									name: "_",
								},
								&choiceExpr{
									pos: position{line: 292, col: 9, offset: 7761},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 292, col: 9, offset: 7761},
											val:        "->",
											ignoreCase: false,
										},
										&litMatcher{
											pos:        position{line: 292, col: 16, offset: 7768},
											val:        "‚Üí",
											ignoreCase: false,
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 510, col: 36, offset: 14570},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 510, col: 38, offset: 14572},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 510, col: 40, offset: 14574},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 511, col: 7, offset: 14633},
						run: (*parser).callonExpression604,
						expr: &seqExpr{
							pos: position{line: 511, col: 7, offset: 14633},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 263, col: 9, offset: 7190},
									val:        "merge",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 511, col: 13, offset: 14639},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 511, col: 16, offset: 14642},
									label: "h",
									expr: &ruleRefExpr{
										pos:  position{line: 511, col: 18, offset: 14644},
										name: "ImportExpression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 511, col: 35, offset: 14661},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 511, col: 38, offset: 14664},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 511, col: 40, offset: 14666},
										name: "ImportExpression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 511, col: 57, offset: 14683},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 511, col: 59, offset: 14685},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 511, col: 63, offset: 14689},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 511, col: 66, offset: 14692},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 511, col: 68, offset: 14694},
										name: "ApplicationExpression",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 514, col: 7, offset: 14815},
						name: "EmptyList",
					},
					&actionExpr{
						pos: position{line: 515, col: 7, offset: 14831},
						run: (*parser).callonExpression619,
						expr: &seqExpr{
							pos: position{line: 515, col: 7, offset: 14831},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 270, col: 9, offset: 7344},
									val:        "toMap",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 515, col: 13, offset: 14837},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 515, col: 16, offset: 14840},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 515, col: 18, offset: 14842},
										name: "ImportExpression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 515, col: 35, offset: 14859},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 515, col: 37, offset: 14861},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 515, col: 41, offset: 14865},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 515, col: 44, offset: 14868},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 515, col: 46, offset: 14870},
										name: "ApplicationExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 516, col: 7, offset: 14940},
						run: (*parser).callonExpression630,
						expr: &seqExpr{
							pos: position{line: 516, col: 7, offset: 14940},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 271, col: 10, offset: 7363},
									val:        "assert",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 516, col: 14, offset: 14947},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 516, col: 16, offset: 14949},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 516, col: 20, offset: 14953},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 516, col: 23, offset: 14956},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 516, col: 25, offset: 14958},
										name: "Expression",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 517, col: 7, offset: 15020},
						name: "AnnotatedExpression",
					},
				},
			},
		},
		{
			name: "Annotation",
			pos:  position{line: 519, col: 1, offset: 15041},
			expr: &actionExpr{
				pos: position{line: 519, col: 14, offset: 15056},
				run: (*parser).callonAnnotation1,
				expr: &seqExpr{
					pos: position{line: 519, col: 14, offset: 15056},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 519, col: 14, offset: 15056},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 519, col: 18, offset: 15060},
							name: "_1",
						},
						&labeledExpr{
							pos:   position{line: 519, col: 21, offset: 15063},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 519, col: 23, offset: 15065},
								name: "Expression",
							},
						},
					},
				},
			},
		},
		{
			name: "AnnotatedExpression",
			pos:  position{line: 521, col: 1, offset: 15095},
			expr: &actionExpr{
				pos: position{line: 522, col: 1, offset: 15119},
				run: (*parser).callonAnnotatedExpression1,
				expr: &seqExpr{
					pos: position{line: 522, col: 1, offset: 15119},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 522, col: 1, offset: 15119},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 522, col: 3, offset: 15121},
								name: "OperatorExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 522, col: 22, offset: 15140},
							label: "a",
							expr: &zeroOrOneExpr{
								pos: position{line: 522, col: 24, offset: 15142},
								expr: &seqExpr{
									pos: position{line: 522, col: 25, offset: 15143},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 522, col: 25, offset: 15143},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 522, col: 27, offset: 15145},
											name: "Annotation",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EmptyList",
			pos:  position{line: 527, col: 1, offset: 15270},
			expr: &actionExpr{
				pos: position{line: 527, col: 13, offset: 15284},
				run: (*parser).callonEmptyList1,
				expr: &seqExpr{
					pos: position{line: 527, col: 13, offset: 15284},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 527, col: 13, offset: 15284},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 527, col: 17, offset: 15288},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 527, col: 19, offset: 15290},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 527, col: 23, offset: 15294},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 527, col: 25, offset: 15296},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 527, col: 29, offset: 15300},
							name: "_1",
						},
						&labeledExpr{
							pos:   position{line: 527, col: 32, offset: 15303},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 527, col: 34, offset: 15305},
								name: "ApplicationExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "OperatorExpression",
			pos:  position{line: 531, col: 1, offset: 15373},
			expr: &ruleRefExpr{
				pos:  position{line: 531, col: 22, offset: 15396},
				name: "ImportAltExpression",
			},
		},
		{
			name: "ImportAltExpression",
			pos:  position{line: 533, col: 1, offset: 15417},
			expr: &actionExpr{
				pos: position{line: 533, col: 26, offset: 15444},
				run: (*parser).callonImportAltExpression1,
				expr: &seqExpr{
					pos: position{line: 533, col: 26, offset: 15444},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 533, col: 26, offset: 15444},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 533, col: 32, offset: 15450},
								name: "OrExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 533, col: 55, offset: 15473},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 533, col: 60, offset: 15478},
								expr: &seqExpr{
									pos: position{line: 533, col: 61, offset: 15479},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 533, col: 61, offset: 15479},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 533, col: 63, offset: 15481},
											val:        "?",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 533, col: 67, offset: 15485},
											name: "_1",
										},
										&ruleRefExpr{
											pos:  position{line: 533, col: 70, offset: 15488},
											name: "OrExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrExpression",
			pos:  position{line: 535, col: 1, offset: 15559},
			expr: &actionExpr{
				pos: position{line: 535, col: 26, offset: 15586},
				run: (*parser).callonOrExpression1,
				expr: &seqExpr{
					pos: position{line: 535, col: 26, offset: 15586},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 535, col: 26, offset: 15586},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 535, col: 32, offset: 15592},
								name: "PlusExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 535, col: 55, offset: 15615},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 535, col: 60, offset: 15620},
								expr: &seqExpr{
									pos: position{line: 535, col: 61, offset: 15621},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 535, col: 61, offset: 15621},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 535, col: 63, offset: 15623},
											val:        "||",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 535, col: 68, offset: 15628},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 535, col: 70, offset: 15630},
											name: "PlusExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PlusExpression",
			pos:  position{line: 537, col: 1, offset: 15696},
			expr: &actionExpr{
				pos: position{line: 537, col: 26, offset: 15723},
				run: (*parser).callonPlusExpression1,
				expr: &seqExpr{
					pos: position{line: 537, col: 26, offset: 15723},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 537, col: 26, offset: 15723},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 537, col: 32, offset: 15729},
								name: "TextAppendExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 537, col: 55, offset: 15752},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 537, col: 60, offset: 15757},
								expr: &seqExpr{
									pos: position{line: 537, col: 61, offset: 15758},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 537, col: 61, offset: 15758},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 537, col: 63, offset: 15760},
											val:        "+",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 537, col: 67, offset: 15764},
											name: "_1",
										},
										&labeledExpr{
											pos:   position{line: 537, col: 70, offset: 15767},
											label: "e",
											expr: &ruleRefExpr{
												pos:  position{line: 537, col: 72, offset: 15769},
												name: "TextAppendExpression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextAppendExpression",
			pos:  position{line: 539, col: 1, offset: 15843},
			expr: &actionExpr{
				pos: position{line: 539, col: 26, offset: 15870},
				run: (*parser).callonTextAppendExpression1,
				expr: &seqExpr{
					pos: position{line: 539, col: 26, offset: 15870},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 539, col: 26, offset: 15870},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 539, col: 32, offset: 15876},
								name: "ListAppendExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 539, col: 55, offset: 15899},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 539, col: 60, offset: 15904},
								expr: &seqExpr{
									pos: position{line: 539, col: 61, offset: 15905},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 539, col: 61, offset: 15905},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 539, col: 63, offset: 15907},
											val:        "++",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 539, col: 68, offset: 15912},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 539, col: 70, offset: 15914},
											label: "e",
											expr: &ruleRefExpr{
												pos:  position{line: 539, col: 72, offset: 15916},
												name: "ListAppendExpression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListAppendExpression",
			pos:  position{line: 541, col: 1, offset: 15996},
			expr: &actionExpr{
				pos: position{line: 541, col: 26, offset: 16023},
				run: (*parser).callonListAppendExpression1,
				expr: &seqExpr{
					pos: position{line: 541, col: 26, offset: 16023},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 541, col: 26, offset: 16023},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 541, col: 32, offset: 16029},
								name: "AndExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 541, col: 55, offset: 16052},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 541, col: 60, offset: 16057},
								expr: &seqExpr{
									pos: position{line: 541, col: 61, offset: 16058},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 541, col: 61, offset: 16058},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 541, col: 63, offset: 16060},
											val:        "#",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 541, col: 67, offset: 16064},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 541, col: 69, offset: 16066},
											label: "e",
											expr: &ruleRefExpr{
												pos:  position{line: 541, col: 71, offset: 16068},
												name: "AndExpression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AndExpression",
			pos:  position{line: 543, col: 1, offset: 16141},
			expr: &actionExpr{
				pos: position{line: 543, col: 26, offset: 16168},
				run: (*parser).callonAndExpression1,
				expr: &seqExpr{
					pos: position{line: 543, col: 26, offset: 16168},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 543, col: 26, offset: 16168},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 32, offset: 16174},
								name: "CombineExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 543, col: 55, offset: 16197},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 543, col: 60, offset: 16202},
								expr: &seqExpr{
									pos: position{line: 543, col: 61, offset: 16203},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 543, col: 61, offset: 16203},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 543, col: 63, offset: 16205},
											val:        "&&",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 543, col: 68, offset: 16210},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 543, col: 70, offset: 16212},
											label: "e",
											expr: &ruleRefExpr{
												pos:  position{line: 543, col: 72, offset: 16214},
												name: "CombineExpression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CombineExpression",
			pos:  position{line: 545, col: 1, offset: 16284},
			expr: &actionExpr{
				pos: position{line: 545, col: 26, offset: 16311},
				run: (*parser).callonCombineExpression1,
				expr: &seqExpr{
					pos: position{line: 545, col: 26, offset: 16311},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 545, col: 26, offset: 16311},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 32, offset: 16317},
								name: "PreferExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 545, col: 55, offset: 16340},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 545, col: 60, offset: 16345},
								expr: &seqExpr{
									pos: position{line: 545, col: 61, offset: 16346},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 545, col: 61, offset: 16346},
											name: "_",
										},
										&choiceExpr{
											pos: position{line: 286, col: 11, offset: 7599},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 286, col: 11, offset: 7599},
													val:        "/\\",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 286, col: 19, offset: 7607},
													val:        "‚àß",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 545, col: 71, offset: 16356},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 545, col: 73, offset: 16358},
											label: "e",
											expr: &ruleRefExpr{
												pos:  position{line: 545, col: 75, offset: 16360},
												name: "PreferExpression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PreferExpression",
			pos:  position{line: 547, col: 1, offset: 16437},
			expr: &actionExpr{
				pos: position{line: 547, col: 26, offset: 16464},
				run: (*parser).callonPreferExpression1,
				expr: &seqExpr{
					pos: position{line: 547, col: 26, offset: 16464},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 547, col: 26, offset: 16464},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 547, col: 32, offset: 16470},
								name: "CombineTypesExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 547, col: 55, offset: 16493},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 547, col: 60, offset: 16498},
								expr: &seqExpr{
									pos: position{line: 547, col: 61, offset: 16499},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 547, col: 61, offset: 16499},
											name: "_",
										},
										&choiceExpr{
											pos: position{line: 289, col: 10, offset: 7687},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 289, col: 10, offset: 7687},
													val:        "//",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 289, col: 17, offset: 7694},
													val:        "‚´Ω",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 547, col: 70, offset: 16508},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 547, col: 72, offset: 16510},
											label: "e",
											expr: &ruleRefExpr{
												pos:  position{line: 547, col: 74, offset: 16512},
												name: "CombineTypesExpression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CombineTypesExpression",
			pos:  position{line: 549, col: 1, offset: 16606},
			expr: &actionExpr{
				pos: position{line: 549, col: 26, offset: 16633},
				run: (*parser).callonCombineTypesExpression1,
				expr: &seqExpr{
					pos: position{line: 549, col: 26, offset: 16633},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 549, col: 26, offset: 16633},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 549, col: 32, offset: 16639},
								name: "TimesExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 549, col: 55, offset: 16662},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 549, col: 60, offset: 16667},
								expr: &seqExpr{
									pos: position{line: 549, col: 61, offset: 16668},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 549, col: 61, offset: 16668},
											name: "_",
										},
										&choiceExpr{
											pos: position{line: 287, col: 16, offset: 7630},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 287, col: 16, offset: 7630},
													val:        "//\\\\",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 287, col: 27, offset: 7641},
													val:        "‚©ì",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 549, col: 76, offset: 16683},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 549, col: 78, offset: 16685},
											label: "e",
											expr: &ruleRefExpr{
												pos:  position{line: 549, col: 80, offset: 16687},
												name: "TimesExpression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimesExpression",
			pos:  position{line: 551, col: 1, offset: 16767},
			expr: &actionExpr{
				pos: position{line: 551, col: 26, offset: 16794},
				run: (*parser).callonTimesExpression1,
				expr: &seqExpr{
					pos: position{line: 551, col: 26, offset: 16794},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 551, col: 26, offset: 16794},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 32, offset: 16800},
								name: "EqualExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 551, col: 55, offset: 16823},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 551, col: 60, offset: 16828},
								expr: &seqExpr{
									pos: position{line: 551, col: 61, offset: 16829},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 551, col: 61, offset: 16829},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 551, col: 63, offset: 16831},
											val:        "*",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 551, col: 67, offset: 16835},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 551, col: 69, offset: 16837},
											label: "e",
											expr: &ruleRefExpr{
												pos:  position{line: 551, col: 71, offset: 16839},
												name: "EqualExpression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualExpression",
			pos:  position{line: 553, col: 1, offset: 16909},
			expr: &actionExpr{
				pos: position{line: 553, col: 26, offset: 16936},
				run: (*parser).callonEqualExpression1,
				expr: &seqExpr{
					pos: position{line: 553, col: 26, offset: 16936},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 553, col: 26, offset: 16936},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 553, col: 32, offset: 16942},
								name: "NotEqualExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 553, col: 55, offset: 16965},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 553, col: 60, offset: 16970},
								expr: &seqExpr{
									pos: position{line: 553, col: 61, offset: 16971},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 553, col: 61, offset: 16971},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 553, col: 63, offset: 16973},
											val:        "==",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 553, col: 68, offset: 16978},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 553, col: 70, offset: 16980},
											label: "e",
											expr: &ruleRefExpr{
												pos:  position{line: 553, col: 72, offset: 16982},
												name: "NotEqualExpression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NotEqualExpression",
			pos:  position{line: 555, col: 1, offset: 17052},
			expr: &actionExpr{
				pos: position{line: 555, col: 26, offset: 17079},
				run: (*parser).callonNotEqualExpression1,
				expr: &seqExpr{
					pos: position{line: 555, col: 26, offset: 17079},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 555, col: 26, offset: 17079},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 555, col: 32, offset: 17085},
								name: "EquivalentExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 555, col: 54, offset: 17107},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 555, col: 59, offset: 17112},
								expr: &seqExpr{
									pos: position{line: 555, col: 60, offset: 17113},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 555, col: 60, offset: 17113},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 555, col: 62, offset: 17115},
											val:        "!=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 555, col: 67, offset: 17120},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 555, col: 69, offset: 17122},
											label: "e",
											expr: &ruleRefExpr{
												pos:  position{line: 555, col: 71, offset: 17124},
												name: "EquivalentExpression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EquivalentExpression",
			pos:  position{line: 557, col: 1, offset: 17196},
			expr: &actionExpr{
				pos: position{line: 557, col: 28, offset: 17225},
				run: (*parser).callonEquivalentExpression1,
				expr: &seqExpr{
					pos: position{line: 557, col: 28, offset: 17225},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 557, col: 28, offset: 17225},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 557, col: 34, offset: 17231},
								name: "ApplicationExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 557, col: 57, offset: 17254},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 557, col: 62, offset: 17259},
								expr: &seqExpr{
									pos: position{line: 557, col: 63, offset: 17260},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 557, col: 63, offset: 17260},
											name: "_",
										},
										&choiceExpr{
											pos: position{line: 288, col: 14, offset: 7662},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 288, col: 14, offset: 7662},
													val:        "===",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 288, col: 22, offset: 7670},
													val:        "‚â°",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 557, col: 76, offset: 17273},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 557, col: 78, offset: 17275},
											label: "e",
											expr: &ruleRefExpr{
												pos:  position{line: 557, col: 80, offset: 17277},
												name: "ApplicationExpression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ApplicationExpression",
			pos:  position{line: 560, col: 1, offset: 17354},
			expr: &actionExpr{
				pos: position{line: 560, col: 25, offset: 17380},
				run: (*parser).callonApplicationExpression1,
				expr: &seqExpr{
					pos: position{line: 560, col: 25, offset: 17380},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 560, col: 25, offset: 17380},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 560, col: 27, offset: 17382},
								name: "FirstApplicationExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 560, col: 54, offset: 17409},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 560, col: 59, offset: 17414},
								expr: &seqExpr{
									pos: position{line: 560, col: 60, offset: 17415},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 560, col: 60, offset: 17415},
											name: "_1",
										},
										&ruleRefExpr{
											pos:  position{line: 560, col: 63, offset: 17418},
											name: "ImportExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstApplicationExpression",
			pos:  position{line: 569, col: 1, offset: 17661},
			expr: &choiceExpr{
				pos: position{line: 570, col: 8, offset: 17699},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 570, col: 8, offset: 17699},
						run: (*parser).callonFirstApplicationExpression2,
						expr: &seqExpr{
							pos: position{line: 570, col: 8, offset: 17699},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 263, col: 9, offset: 7190},
									val:        "merge",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 570, col: 14, offset: 17705},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 570, col: 17, offset: 17708},
									label: "h",
									expr: &ruleRefExpr{
										pos:  position{line: 570, col: 19, offset: 17710},
										name: "ImportExpression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 570, col: 36, offset: 17727},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 570, col: 39, offset: 17730},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 570, col: 41, offset: 17732},
										name: "ImportExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 573, col: 8, offset: 17835},
						run: (*parser).callonFirstApplicationExpression11,
						expr: &seqExpr{
							pos: position{line: 573, col: 8, offset: 17835},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 269, col: 8, offset: 7327},
									val:        "Some",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 573, col: 13, offset: 17840},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 573, col: 16, offset: 17843},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 573, col: 18, offset: 17845},
										name: "ImportExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 574, col: 8, offset: 17900},
						run: (*parser).callonFirstApplicationExpression17,
						expr: &seqExpr{
							pos: position{line: 574, col: 8, offset: 17900},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 270, col: 9, offset: 7344},
									val:        "toMap",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 574, col: 14, offset: 17906},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 574, col: 17, offset: 17909},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 574, col: 19, offset: 17911},
										name: "ImportExpression",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 575, col: 8, offset: 17975},
						name: "ImportExpression",
					},
				},
			},
		},
		{
			name: "ImportExpression",
			pos:  position{line: 577, col: 1, offset: 17993},
			expr: &choiceExpr{
				pos: position{line: 577, col: 20, offset: 18014},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 577, col: 20, offset: 18014},
						name: "Import",
					},
					&ruleRefExpr{
						pos:  position{line: 577, col: 29, offset: 18023},
						name: "SelectorExpression",
					},
				},
			},
		},
		{
			name: "SelectorExpression",
			pos:  position{line: 579, col: 1, offset: 18043},
			expr: &actionExpr{
				pos: position{line: 579, col: 22, offset: 18066},
				run: (*parser).callonSelectorExpression1,
				expr: &seqExpr{
					pos: position{line: 579, col: 22, offset: 18066},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 579, col: 22, offset: 18066},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 579, col: 24, offset: 18068},
								name: "PrimitiveExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 579, col: 44, offset: 18088},
							label: "ls",
							expr: &zeroOrMoreExpr{
								pos: position{line: 579, col: 47, offset: 18091},
								expr: &seqExpr{
									pos: position{line: 579, col: 48, offset: 18092},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 579, col: 48, offset: 18092},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 579, col: 50, offset: 18094},
											val:        ".",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 579, col: 54, offset: 18098},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 579, col: 56, offset: 18100},
											name: "Selector",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Selector",
			pos:  position{line: 598, col: 1, offset: 18653},
			expr: &choiceExpr{
				pos: position{line: 598, col: 12, offset: 18666},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 121, col: 9, offset: 2803},
						run: (*parser).callonSelector2,
						expr: &seqExpr{
							pos: position{line: 121, col: 9, offset: 2803},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 121, col: 9, offset: 2803},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 121, col: 13, offset: 2807},
									label: "label",
									expr: &actionExpr{
										pos: position{line: 119, col: 15, offset: 2744},
										run: (*parser).callonSelector6,
										expr: &oneOrMoreExpr{
											pos: position{line: 119, col: 15, offset: 2744},
											expr: &charClassMatcher{
												pos:        position{line: 118, col: 19, offset: 2707},
												val:        "[ -_a-~]",
												ranges:     []rune{' ', '_', 'a', '~'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 121, col: 31, offset: 2825},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 122, col: 9, offset: 2859},
						run: (*parser).callonSelector10,
						expr: &labeledExpr{
							pos:   position{line: 122, col: 9, offset: 2859},
							label: "label",
							expr: &choiceExpr{
								pos: position{line: 112, col: 15, offset: 2500},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 112, col: 15, offset: 2500},
										run: (*parser).callonSelector13,
										expr: &seqExpr{
											pos: position{line: 112, col: 15, offset: 2500},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 274, col: 5, offset: 7389},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 256, col: 6, offset: 7087},
															val:        "if",
															ignoreCase: false,
														},
														&litMatcher{
															pos:        position{line: 257, col: 8, offset: 7101},
															val:        "then",
															ignoreCase: false,
														},
														&litMatcher{
															pos:        position{line: 258, col: 8, offset: 7117},
															val:        "else",
															ignoreCase: false,
														},
														&litMatcher{
															pos:        position{line: 259, col: 7, offset: 7132},
															val:        "let",
															ignoreCase: false,
														},
														&litMatcher{
															pos:        position{line: 260, col: 6, offset: 7145},
															val:        "in",
															ignoreCase: false,
														},
														&litMatcher{
															pos:        position{line: 262, col: 9, offset: 7172},
															val:        "using",
															ignoreCase: false,
														},
														&actionExpr{
															pos: position{line: 264, col: 11, offset: 7210},
															run: (*parser).callonSelector22,
															expr: &litMatcher{
																pos:        position{line: 264, col: 11, offset: 7210},
																val:        "missing",
																ignoreCase: false,
															},
														},
														&litMatcher{
															pos:        position{line: 261, col: 6, offset: 7157},
															val:        "as",
															ignoreCase: false,
														},
														&litMatcher{
															pos:        position{line: 265, col: 8, offset: 7255},
															val:        "True",
															ignoreCase: false,
														},
														&litMatcher{
															pos:        position{line: 266, col: 9, offset: 7272},
															val:        "False",
															ignoreCase: false,
														},
														&litMatcher{
															pos:        position{line: 267, col: 12, offset: 7293},
															val:        "Infinity",
															ignoreCase: false,
														},
														&litMatcher{
															pos:        position{line: 268, col: 7, offset: 7312},
															val:        "NaN",
															ignoreCase: false,
														},
														&litMatcher{
															pos:        position{line: 263, col: 9, offset: 7190},
															val:        "merge",
															ignoreCase: false,
														},
														&litMatcher{
															pos:        position{line: 269, col: 8, offset: 7327},
															val:        "Some",
															ignoreCase: false,
														},
														&litMatcher{
															pos:        position{line: 270, col: 9, offset: 7344},
															val:        "toMap",
															ignoreCase: false,
														},
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 112, col: 23, offset: 2508},
													expr: &charClassMatcher{
														pos:        position{line: 111, col: 23, offset: 2469},
														val:        "[_/-A-Za-z0-9]",
														chars:      []rune{'_', '/', '-'},
														ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 113, col: 13, offset: 2572},
										run: (*parser).callonSelector34,
										expr: &seqExpr{
											pos: position{line: 113, col: 13, offset: 2572},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 113, col: 13, offset: 2572},
													expr: &choiceExpr{
														pos: position{line: 274, col: 5, offset: 7389},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 256, col: 6, offset: 7087},
																val:        "if",
																ignoreCase: false,
															},
															&litMatcher{
																pos:        position{line: 257, col: 8, offset: 7101},
																val:        "then",
																ignoreCase: false,
															},
															&litMatcher{
																pos:        position{line: 258, col: 8, offset: 7117},
																val:        "else",
																ignoreCase: false,
															},
															&litMatcher{
																pos:        position{line: 259, col: 7, offset: 7132},
																val:        "let",
																ignoreCase: false,
															},
															&litMatcher{
																pos:        position{line: 260, col: 6, offset: 7145},
																val:        "in",
																ignoreCase: false,
															},
															&litMatcher{
																pos:        position{line: 262, col: 9, offset: 7172},
																val:        "using",
																ignoreCase: false,
															},
															&actionExpr{
																pos: position{line: 264, col: 11, offset: 7210},
																run: (*parser).callonSelector44,
																expr: &litMatcher{
																	pos:        position{line: 264, col: 11, offset: 7210},
																	val:        "missing",
																	ignoreCase: false,
																},
															},
															&litMatcher{
																pos:        position{line: 261, col: 6, offset: 7157},
																val:        "as",
																ignoreCase: false,
															},
															&litMatcher{
																pos:        position{line: 265, col: 8, offset: 7255},
																val:        "True",
																ignoreCase: false,
															},
															&litMatcher{
																pos:        position{line: 266, col: 9, offset: 7272},
																val:        "False",
																ignoreCase: false,
															},
															&litMatcher{
																pos:        position{line: 267, col: 12, offset: 7293},
																val:        "Infinity",
																ignoreCase: false,
															},
															&litMatcher{
																pos:        position{line: 268, col: 7, offset: 7312},
																val:        "NaN",
																ignoreCase: false,
															},
															&litMatcher{
																pos:        position{line: 263, col: 9, offset: 7190},
																val:        "merge",
																ignoreCase: false,
															},
															&litMatcher{
																pos:        position{line: 269, col: 8, offset: 7327},
																val:        "Some",
																ignoreCase: false,
															},
															&litMatcher{
																pos:        position{line: 270, col: 9, offset: 7344},
																val:        "toMap",
																ignoreCase: false,
															},
														},
													},
												},
												&charClassMatcher{
													pos:        position{line: 110, col: 24, offset: 2435},
													val:        "[_A-Za-z]",
													chars:      []rune{'_'},
													ranges:     []rune{'A', 'Z', 'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 113, col: 43, offset: 2602},
													expr: &charClassMatcher{
														pos:        position{line: 111, col: 23, offset: 2469},
														val:        "[_/-A-Za-z0-9]",
														chars:      []rune{'_', '/', '-'},
														ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 598, col: 23, offset: 18677},
						name: "Labels",
					},
					&ruleRefExpr{
						pos:  position{line: 598, col: 32, offset: 18686},
						name: "TypeSelector",
					},
				},
			},
		},
		{
			name: "Labels",
			pos:  position{line: 600, col: 1, offset: 18700},
			expr: &actionExpr{
				pos: position{line: 600, col: 10, offset: 18711},
				run: (*parser).callonLabels1,
				expr: &seqExpr{
					pos: position{line: 600, col: 10, offset: 18711},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 600, col: 10, offset: 18711},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 600, col: 14, offset: 18715},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 600, col: 16, offset: 18717},
							label: "optclauses",
							expr: &zeroOrOneExpr{
								pos: position{line: 600, col: 27, offset: 18728},
								expr: &seqExpr{
									pos: position{line: 600, col: 29, offset: 18730},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 121, col: 9, offset: 2803},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 121, col: 9, offset: 2803},
													run: (*parser).callonLabels9,
													expr: &seqExpr{
														pos: position{line: 121, col: 9, offset: 2803},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 121, col: 9, offset: 2803},
																val:        "`",
																ignoreCase: false,
															},
															&labeledExpr{
																pos:   position{line: 121, col: 13, offset: 2807},
																label: "label",
																expr: &actionExpr{
																	pos: position{line: 119, col: 15, offset: 2744},
																	run: (*parser).callonLabels13,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 119, col: 15, offset: 2744},
																		expr: &charClassMatcher{
																			pos:        position{line: 118, col: 19, offset: 2707},
																			val:        "[ -_a-~]",
																			ranges:     []rune{' ', '_', 'a', '~'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 121, col: 31, offset: 2825},
																val:        "`",
																ignoreCase: false,
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 122, col: 9, offset: 2859},
													run: (*parser).callonLabels17,
													expr: &labeledExpr{
														pos:   position{line: 122, col: 9, offset: 2859},
														label: "label",
														expr: &choiceExpr{
															pos: position{line: 112, col: 15, offset: 2500},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 112, col: 15, offset: 2500},
																	run: (*parser).callonLabels20,
																	expr: &seqExpr{
																		pos: position{line: 112, col: 15, offset: 2500},
																		exprs: []interface{}{
																			&choiceExpr{
																				pos: position{line: 274, col: 5, offset: 7389},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 256, col: 6, offset: 7087},
																						val:        "if",
																						ignoreCase: false,
																					},
																					&litMatcher{
																						pos:        position{line: 257, col: 8, offset: 7101},
																						val:        "then",
																						ignoreCase: false,
																					},
																					&litMatcher{
																						pos:        position{line: 258, col: 8, offset: 7117},
																						val:        "else",
																						ignoreCase: false,
																					},
																					&litMatcher{
																						pos:        position{line: 259, col: 7, offset: 7132},
																						val:        "let",
																						ignoreCase: false,
																					},
																					&litMatcher{
																						pos:        position{line: 260, col: 6, offset: 7145},
																						val:        "in",
																						ignoreCase: false,
																					},
																					&litMatcher{
																						pos:        position{line: 262, col: 9, offset: 7172},
																						val:        "using",
																						ignoreCase: false,
																					},
																					&actionExpr{
																						pos: position{line: 264, col: 11, offset: 7210},
																						run: (*parser).callonLabels29,
																						expr: &litMatcher{
																							pos:        position{line: 264, col: 11, offset: 7210},
																							val:        "missing",
																							ignoreCase: false,
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 261, col: 6, offset: 7157},
																						val:        "as",
																						ignoreCase: false,
																					},
																					&litMatcher{
																						pos:        position{line: 265, col: 8, offset: 7255},
																						val:        "True",
																						ignoreCase: false,
																					},
																					&litMatcher{
																						pos:        position{line: 266, col: 9, offset: 7272},
																						val:        "False",
																						ignoreCase: false,
																					},
																					&litMatcher{
																						pos:        position{line: 267, col: 12, offset: 7293},
																						val:        "Infinity",
																						ignoreCase: false,
																					},
																					&litMatcher{
																						pos:        position{line: 268, col: 7, offset: 7312},
																						val:        "NaN",
																						ignoreCase: false,
																					},
																					&litMatcher{
																						pos:        position{line: 263, col: 9, offset: 7190},
																						val:        "merge",
																						ignoreCase: false,
																					},
																					&litMatcher{
																						pos:        position{line: 269, col: 8, offset: 7327},
																						val:        "Some",
																						ignoreCase: false,
																					},
																					&litMatcher{
																						pos:        position{line: 270, col: 9, offset: 7344},
																						val:        "toMap",
																						ignoreCase: false,
																					},
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 112, col: 23, offset: 2508},
																				expr: &charClassMatcher{
																					pos:        position{line: 111, col: 23, offset: 2469},
																					val:        "[_/-A-Za-z0-9]",
																					chars:      []rune{'_', '/', '-'},
																					ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 113, col: 13, offset: 2572},
																	run: (*parser).callonLabels41,
																	expr: &seqExpr{
																		pos: position{line: 113, col: 13, offset: 2572},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 113, col: 13, offset: 2572},
																				expr: &choiceExpr{
																					pos: position{line: 274, col: 5, offset: 7389},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 256, col: 6, offset: 7087},
																							val:        "if",
																							ignoreCase: false,
																						},
																						&litMatcher{
																							pos:        position{line: 257, col: 8, offset: 7101},
																							val:        "then",
																							ignoreCase: false,
																						},
																						&litMatcher{
																							pos:        position{line: 258, col: 8, offset: 7117},
																							val:        "else",
																							ignoreCase: false,
																						},
																						&litMatcher{
																							pos:        position{line: 259, col: 7, offset: 7132},
																							val:        "let",
																							ignoreCase: false,
																						},
																						&litMatcher{
																							pos:        position{line: 260, col: 6, offset: 7145},
																							val:        "in",
																							ignoreCase: false,
																						},
																						&litMatcher{
																							pos:        position{line: 262, col: 9, offset: 7172},
																							val:        "using",
																							ignoreCase: false,
																						},
																						&actionExpr{
																							pos: position{line: 264, col: 11, offset: 7210},
																							run: (*parser).callonLabels51,
																							expr: &litMatcher{
																								pos:        position{line: 264, col: 11, offset: 7210},
																								val:        "missing",
																								ignoreCase: false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 261, col: 6, offset: 7157},
																							val:        "as",
																							ignoreCase: false,
																						},
																						&litMatcher{
																							pos:        position{line: 265, col: 8, offset: 7255},
																							val:        "True",
																							ignoreCase: false,
																						},
																						&litMatcher{
																							pos:        position{line: 266, col: 9, offset: 7272},
																							val:        "False",
																							ignoreCase: false,
																						},
																						&litMatcher{
																							pos:        position{line: 267, col: 12, offset: 7293},
																							val:        "Infinity",
																							ignoreCase: false,
																						},
																						&litMatcher{
																							pos:        position{line: 268, col: 7, offset: 7312},
																							val:        "NaN",
																							ignoreCase: false,
																						},
																						&litMatcher{
																							pos:        position{line: 263, col: 9, offset: 7190},
																							val:        "merge",
																							ignoreCase: false,
																						},
																						&litMatcher{
																							pos:        position{line: 269, col: 8, offset: 7327},
																							val:        "Some",
																							ignoreCase: false,
																						},
																						&litMatcher{
																							pos:        position{line: 270, col: 9, offset: 7344},
																							val:        "toMap",
																							ignoreCase: false,
																						},
																					},
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 110, col: 24, offset: 2435},
																				val:        "[_A-Za-z]",
																				chars:      []rune{'_'},
																				ranges:     []rune{'A', 'Z', 'a', 'z'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 113, col: 43, offset: 2602},
																				expr: &charClassMatcher{
																					pos:        position{line: 111, col: 23, offset: 2469},
																					val:        "[_/-A-Za-z0-9]",
																					chars:      []rune{'_', '/', '-'},
																					ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 600, col: 38, offset: 18739},
											name: "_",
										},
										&zeroOrMoreExpr{
											pos: position{line: 600, col: 40, offset: 18741},
											expr: &seqExpr{
												pos: position{line: 600, col: 41, offset: 18742},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 600, col: 41, offset: 18742},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 600, col: 45, offset: 18746},
														name: "_",
													},
													&choiceExpr{
														pos: position{line: 121, col: 9, offset: 2803},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 121, col: 9, offset: 2803},
																run: (*parser).callonLabels70,
																expr: &seqExpr{
																	pos: position{line: 121, col: 9, offset: 2803},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 121, col: 9, offset: 2803},
																			val:        "`",
																			ignoreCase: false,
																		},
																		&labeledExpr{
																			pos:   position{line: 121, col: 13, offset: 2807},
																			label: "label",
																			expr: &actionExpr{
																				pos: position{line: 119, col: 15, offset: 2744},
																				run: (*parser).callonLabels74,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 119, col: 15, offset: 2744},
																					expr: &charClassMatcher{
																						pos:        position{line: 118, col: 19, offset: 2707},
																						val:        "[ -_a-~]",
																						ranges:     []rune{' ', '_', 'a', '~'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 121, col: 31, offset: 2825},
																			val:        "`",
																			ignoreCase: false,
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 122, col: 9, offset: 2859},
																run: (*parser).callonLabels78,
																expr: &labeledExpr{
																	pos:   position{line: 122, col: 9, offset: 2859},
																	label: "label",
																	expr: &choiceExpr{
																		pos: position{line: 112, col: 15, offset: 2500},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 112, col: 15, offset: 2500},
																				run: (*parser).callonLabels81,
																				expr: &seqExpr{
																					pos: position{line: 112, col: 15, offset: 2500},
																					exprs: []interface{}{
																						&choiceExpr{
																							pos: position{line: 274, col: 5, offset: 7389},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 256, col: 6, offset: 7087},
																									val:        "if",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 257, col: 8, offset: 7101},
																									val:        "then",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 258, col: 8, offset: 7117},
																									val:        "else",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 259, col: 7, offset: 7132},
																									val:        "let",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 260, col: 6, offset: 7145},
																									val:        "in",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 262, col: 9, offset: 7172},
																									val:        "using",
																									ignoreCase: false,
																								},
																								&actionExpr{
																									pos: position{line: 264, col: 11, offset: 7210},
																									run: (*parser).callonLabels90,
																									expr: &litMatcher{
																										pos:        position{line: 264, col: 11, offset: 7210},
																										val:        "missing",
																										ignoreCase: false,
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 261, col: 6, offset: 7157},
																									val:        "as",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 265, col: 8, offset: 7255},
																									val:        "True",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 266, col: 9, offset: 7272},
																									val:        "False",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 267, col: 12, offset: 7293},
																									val:        "Infinity",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 268, col: 7, offset: 7312},
																									val:        "NaN",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 263, col: 9, offset: 7190},
																									val:        "merge",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 269, col: 8, offset: 7327},
																									val:        "Some",
																									ignoreCase: false,
																								},
																								&litMatcher{
																									pos:        position{line: 270, col: 9, offset: 7344},
																									val:        "toMap",
																									ignoreCase: false,
																								},
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 112, col: 23, offset: 2508},
																							expr: &charClassMatcher{
																								pos:        position{line: 111, col: 23, offset: 2469},
																								val:        "[_/-A-Za-z0-9]",
																								chars:      []rune{'_', '/', '-'},
																								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 113, col: 13, offset: 2572},
																				run: (*parser).callonLabels102,
																				expr: &seqExpr{
																					pos: position{line: 113, col: 13, offset: 2572},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 113, col: 13, offset: 2572},
																							expr: &choiceExpr{
																								pos: position{line: 274, col: 5, offset: 7389},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 256, col: 6, offset: 7087},
																										val:        "if",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 257, col: 8, offset: 7101},
																										val:        "then",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 258, col: 8, offset: 7117},
																										val:        "else",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 259, col: 7, offset: 7132},
																										val:        "let",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 260, col: 6, offset: 7145},
																										val:        "in",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 262, col: 9, offset: 7172},
																										val:        "using",
																										ignoreCase: false,
																									},
																									&actionExpr{
																										pos: position{line: 264, col: 11, offset: 7210},
																										run: (*parser).callonLabels112,
																										expr: &litMatcher{
																											pos:        position{line: 264, col: 11, offset: 7210},
																											val:        "missing",
																											ignoreCase: false,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 261, col: 6, offset: 7157},
																										val:        "as",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 265, col: 8, offset: 7255},
																										val:        "True",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 266, col: 9, offset: 7272},
																										val:        "False",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 267, col: 12, offset: 7293},
																										val:        "Infinity",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 268, col: 7, offset: 7312},
																										val:        "NaN",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 263, col: 9, offset: 7190},
																										val:        "merge",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 269, col: 8, offset: 7327},
																										val:        "Some",
																										ignoreCase: false,
																									},
																									&litMatcher{
																										pos:        position{line: 270, col: 9, offset: 7344},
																										val:        "toMap",
																										ignoreCase: false,
																									},
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 110, col: 24, offset: 2435},
																							val:        "[_A-Za-z]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'A', 'Z', 'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 113, col: 43, offset: 2602},
																							expr: &charClassMatcher{
																								pos:        position{line: 111, col: 23, offset: 2469},
																								val:        "[_/-A-Za-z0-9]",
																								chars:      []rune{'_', '/', '-'},
																								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&ruleRefExpr{
														pos:  position{line: 600, col: 56, offset: 18757},
														name: "_",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 600, col: 64, offset: 18765},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeSelector",
			pos:  position{line: 610, col: 1, offset: 19061},
			expr: &actionExpr{
				pos: position{line: 610, col: 16, offset: 19078},
				run: (*parser).callonTypeSelector1,
				expr: &seqExpr{
					pos: position{line: 610, col: 16, offset: 19078},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 610, col: 16, offset: 19078},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 610, col: 20, offset: 19082},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 610, col: 22, offset: 19084},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 610, col: 24, offset: 19086},
								name: "Expression",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 610, col: 35, offset: 19097},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 610, col: 37, offset: 19099},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveExpression",
			pos:  position{line: 612, col: 1, offset: 19122},
			expr: &choiceExpr{
				pos: position{line: 613, col: 7, offset: 19152},
				alternatives: []interface{}{
					&labeledExpr{
						pos:   position{line: 304, col: 17, offset: 8044},
						label: "d",
						expr: &actionExpr{
							pos: position{line: 296, col: 24, offset: 7832},
							run: (*parser).callonPrimitiveExpression3,
							expr: &seqExpr{
								pos: position{line: 296, col: 24, offset: 7832},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 296, col: 24, offset: 7832},
										expr: &charClassMatcher{
											pos:        position{line: 296, col: 24, offset: 7832},
											val:        "[+-]",
											chars:      []rune{'+', '-'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 296, col: 30, offset: 7838},
										expr: &charClassMatcher{
											pos:        position{line: 106, col: 9, offset: 2376},
											val:        "[0-9]",
											ranges:     []rune{'0', '9'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&choiceExpr{
										pos: position{line: 296, col: 39, offset: 7847},
										alternatives: []interface{}{
											&seqExpr{
												pos: position{line: 296, col: 39, offset: 7847},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 296, col: 39, offset: 7847},
														val:        ".",
														ignoreCase: false,
													},
													&oneOrMoreExpr{
														pos: position{line: 296, col: 43, offset: 7851},
														expr: &charClassMatcher{
															pos:        position{line: 106, col: 9, offset: 2376},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 296, col: 50, offset: 7858},
														expr: &seqExpr{
															pos: position{line: 294, col: 12, offset: 7788},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 294, col: 12, offset: 7788},
																	val:        "e",
																	ignoreCase: true,
																},
																&zeroOrOneExpr{
																	pos: position{line: 294, col: 17, offset: 7793},
																	expr: &charClassMatcher{
																		pos:        position{line: 294, col: 17, offset: 7793},
																		val:        "[+-]",
																		chars:      []rune{'+', '-'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 294, col: 23, offset: 7799},
																	expr: &charClassMatcher{
																		pos:        position{line: 106, col: 9, offset: 2376},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&seqExpr{
												pos: position{line: 294, col: 12, offset: 7788},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 294, col: 12, offset: 7788},
														val:        "e",
														ignoreCase: true,
													},
													&zeroOrOneExpr{
														pos: position{line: 294, col: 17, offset: 7793},
														expr: &charClassMatcher{
															pos:        position{line: 294, col: 17, offset: 7793},
															val:        "[+-]",
															chars:      []rune{'+', '-'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&oneOrMoreExpr{
														pos: position{line: 294, col: 23, offset: 7799},
														expr: &charClassMatcher{
															pos:        position{line: 106, col: 9, offset: 2376},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 305, col: 5, offset: 8071},
						run: (*parser).callonPrimitiveExpression27,
						expr: &litMatcher{
							pos:        position{line: 267, col: 12, offset: 7293},
							val:        "Infinity",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 306, col: 5, offset: 8123},
						run: (*parser).callonPrimitiveExpression29,
						expr: &litMatcher{
							pos:        position{line: 306, col: 5, offset: 8123},
							val:        "-Infinity",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 307, col: 5, offset: 8180},
						run: (*parser).callonPrimitiveExpression31,
						expr: &litMatcher{
							pos:        position{line: 268, col: 7, offset: 7312},
							val:        "NaN",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 309, col: 18, offset: 8242},
						run: (*parser).callonPrimitiveExpression33,
						expr: &oneOrMoreExpr{
							pos: position{line: 309, col: 18, offset: 8242},
							expr: &charClassMatcher{
								pos:        position{line: 106, col: 9, offset: 2376},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&actionExpr{
						pos: position{line: 314, col: 18, offset: 8350},
						run: (*parser).callonPrimitiveExpression36,
						expr: &seqExpr{
							pos: position{line: 314, col: 18, offset: 8350},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 314, col: 18, offset: 8350},
									val:        "[+-]",
									chars:      []rune{'+', '-'},
									ignoreCase: false,
									inverted:   false,
								},
								&actionExpr{
									pos: position{line: 309, col: 18, offset: 8242},
									run: (*parser).callonPrimitiveExpression39,
									expr: &oneOrMoreExpr{
										pos: position{line: 309, col: 18, offset: 8242},
										expr: &charClassMatcher{
											pos:        position{line: 106, col: 9, offset: 2376},
											val:        "[0-9]",
											ranges:     []rune{'0', '9'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 616, col: 7, offset: 19214},
						name: "TextLiteral",
					},
					&actionExpr{
						pos: position{line: 617, col: 7, offset: 19232},
						run: (*parser).callonPrimitiveExpression43,
						expr: &seqExpr{
							pos: position{line: 617, col: 7, offset: 19232},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 617, col: 7, offset: 19232},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 617, col: 11, offset: 19236},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 617, col: 13, offset: 19238},
									label: "r",
									expr: &ruleRefExpr{
										pos:  position{line: 617, col: 15, offset: 19240},
										name: "RecordTypeOrLiteral",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 617, col: 35, offset: 19260},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 617, col: 37, offset: 19262},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 618, col: 7, offset: 19290},
						run: (*parser).callonPrimitiveExpression51,
						expr: &seqExpr{
							pos: position{line: 618, col: 7, offset: 19290},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 618, col: 7, offset: 19290},
									val:        "<",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 618, col: 11, offset: 19294},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 618, col: 13, offset: 19296},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 618, col: 15, offset: 19298},
										name: "UnionType",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 618, col: 25, offset: 19308},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 618, col: 27, offset: 19310},
									val:        ">",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 619, col: 7, offset: 19338},
						name: "NonEmptyListLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 620, col: 7, offset: 19364},
						name: "Identifier",
					},
					&actionExpr{
						pos: position{line: 621, col: 7, offset: 19381},
						run: (*parser).callonPrimitiveExpression61,
						expr: &seqExpr{
							pos: position{line: 621, col: 7, offset: 19381},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 621, col: 7, offset: 19381},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 621, col: 11, offset: 19385},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 621, col: 14, offset: 19388},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 621, col: 16, offset: 19390},
										name: "Expression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 621, col: 27, offset: 19401},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 621, col: 29, offset: 19403},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RecordTypeOrLiteral",
			pos:  position{line: 623, col: 1, offset: 19426},
			expr: &choiceExpr{
				pos: position{line: 624, col: 7, offset: 19456},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 624, col: 7, offset: 19456},
						run: (*parser).callonRecordTypeOrLiteral2,
						expr: &litMatcher{
							pos:        position{line: 624, col: 7, offset: 19456},
							val:        "=",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 625, col: 7, offset: 19494},
						name: "NonEmptyRecordType",
					},
					&ruleRefExpr{
						pos:  position{line: 626, col: 7, offset: 19519},
						name: "NonEmptyRecordLiteral",
					},
					&actionExpr{
						pos: position{line: 627, col: 7, offset: 19547},
						run: (*parser).callonRecordTypeOrLiteral6,
						expr: &litMatcher{
							pos:        position{line: 627, col: 7, offset: 19547},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordTypeField",
			pos:  position{line: 629, col: 1, offset: 19576},
			expr: &actionExpr{
				pos: position{line: 629, col: 19, offset: 19596},
				run: (*parser).callonRecordTypeField1,
				expr: &seqExpr{
					pos: position{line: 629, col: 19, offset: 19596},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 629, col: 19, offset: 19596},
							label: "name",
							expr: &choiceExpr{
								pos: position{line: 121, col: 9, offset: 2803},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 121, col: 9, offset: 2803},
										run: (*parser).callonRecordTypeField5,
										expr: &seqExpr{
											pos: position{line: 121, col: 9, offset: 2803},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 121, col: 9, offset: 2803},
													val:        "`",
													ignoreCase: false,
												},
												&labeledExpr{
													pos:   position{line: 121, col: 13, offset: 2807},
													label: "label",
													expr: &actionExpr{
														pos: position{line: 119, col: 15, offset: 2744},
														run: (*parser).callonRecordTypeField9,
														expr: &oneOrMoreExpr{
															pos: position{line: 119, col: 15, offset: 2744},
															expr: &charClassMatcher{
																pos:        position{line: 118, col: 19, offset: 2707},
																val:        "[ -_a-~]",
																ranges:     []rune{' ', '_', 'a', '~'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 121, col: 31, offset: 2825},
													val:        "`",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 122, col: 9, offset: 2859},
										run: (*parser).callonRecordTypeField13,
										expr: &labeledExpr{
											pos:   position{line: 122, col: 9, offset: 2859},
											label: "label",
											expr: &choiceExpr{
												pos: position{line: 112, col: 15, offset: 2500},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 112, col: 15, offset: 2500},
														run: (*parser).callonRecordTypeField16,
														expr: &seqExpr{
															pos: position{line: 112, col: 15, offset: 2500},
															exprs: []interface{}{
																&choiceExpr{
																	pos: position{line: 274, col: 5, offset: 7389},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 256, col: 6, offset: 7087},
																			val:        "if",
																			ignoreCase: false,
																		},
																		&litMatcher{
																			pos:        position{line: 257, col: 8, offset: 7101},
																			val:        "then",
																			ignoreCase: false,
																		},
																		&litMatcher{
																			pos:        position{line: 258, col: 8, offset: 7117},
																			val:        "else",
																			ignoreCase: false,
																		},
																		&litMatcher{
																			pos:        position{line: 259, col: 7, offset: 7132},
																			val:        "let",
																			ignoreCase: false,
																		},
																		&litMatcher{
																			pos:        position{line: 260, col: 6, offset: 7145},
																			val:        "in",
																			ignoreCase: false,
																		},
																		&litMatcher{
																			pos:        position{line: 262, col: 9, offset: 7172},
																			val:        "using",
																			ignoreCase: false,
																		},
																		&actionExpr{
																			pos: position{line: 264, col: 11, offset: 7210},
																			run: (*parser).callonRecordTypeField25,
																			expr: &litMatcher{
																				pos:        position{line: 264, col: 11, offset: 7210},
																				val:        "missing",
																				ignoreCase: false,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 261, col: 6, offset: 7157},
																			val:        "as",
																			ignoreCase: false,
																		},
																		&litMatcher{
																			pos:        position{line: 265, col: 8, offset: 7255},
																			val:        "True",
																			ignoreCase: false,
																		},
																		&litMatcher{
																			pos:        position{line: 266, col: 9, offset: 7272},
																			val:        "False",
																			ignoreCase: false,
																		},
																		&litMatcher{
																			pos:        position{line: 267, col: 12, offset: 7293},
																			val:        "Infinity",
																			ignoreCase: false,
																		},
																		&litMatcher{
																			pos:        position{line: 268, col: 7, offset: 7312},
																			val:        "NaN",
																			ignoreCase: false,
																		},
																		&litMatcher{
																			pos:        position{line: 263, col: 9, offset: 7190},
																			val:        "merge",
																			ignoreCase: false,
																		},
																		&litMatcher{
																			pos:        position{line: 269, col: 8, offset: 7327},
																			val:        "Some",
																			ignoreCase: false,
																		},
																		&litMatcher{
																			pos:        position{line: 270, col: 9, offset: 7344},
																			val:        "toMap",
																			ignoreCase: false,
																		},
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 112, col: 23, offset: 2508},
																	expr: &charClassMatcher{
																		pos:        position{line: 111, col: 23, offset: 2469},
																		val:        "[_/-A-Za-z0-9]",
																		chars:      []rune{'_', '/', '-'},
																		ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 113, col: 13, offset: 2572},
														run: (*parser).callonRecordTypeField37,
														expr: &seqExpr{
															pos: position{line: 113, col: 13, offset: 2572},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 113, col: 13, offset: 2572},
																	expr: &choiceExpr{
																		pos: position{line: 274, col: 5, offset: 7389},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 256, col: 6, offset: 7087},
																				val:        "if",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 257, col: 8, offset: 7101},
																				val:        "then",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 258, col: 8, offset: 7117},
																				val:        "else",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 259, col: 7, offset: 7132},
																				val:        "let",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 260, col: 6, offset: 7145},
																				val:        "in",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 262, col: 9, offset: 7172},
																				val:        "using",
																				ignoreCase: false,
																			},
																			&actionExpr{
																				pos: position{line: 264, col: 11, offset: 7210},
																				run: (*parser).callonRecordTypeField47,
																				expr: &litMatcher{
																					pos:        position{line: 264, col: 11, offset: 7210},
																					val:        "missing",
																					ignoreCase: false,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 261, col: 6, offset: 7157},
																				val:        "as",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 265, col: 8, offset: 7255},
																				val:        "True",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 266, col: 9, offset: 7272},
																				val:        "False",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 267, col: 12, offset: 7293},
																				val:        "Infinity",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 268, col: 7, offset: 7312},
																				val:        "NaN",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 263, col: 9, offset: 7190},
																				val:        "merge",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 269, col: 8, offset: 7327},
																				val:        "Some",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 270, col: 9, offset: 7344},
																				val:        "toMap",
																				ignoreCase: false,
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 110, col: 24, offset: 2435},
																	val:        "[_A-Za-z]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'A', 'Z', 'a', 'z'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 113, col: 43, offset: 2602},
																	expr: &charClassMatcher{
																		pos:        position{line: 111, col: 23, offset: 2469},
																		val:        "[_/-A-Za-z0-9]",
																		chars:      []rune{'_', '/', '-'},
																		ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 629, col: 33, offset: 19610},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 629, col: 35, offset: 19612},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 629, col: 39, offset: 19616},
							name: "_1",
						},
						&labeledExpr{
							pos:   position{line: 629, col: 42, offset: 19619},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 629, col: 47, offset: 19624},
								name: "Expression",
							},
						},
					},
				},
			},
		},
		{
			name: "MoreRecordType",
			pos:  position{line: 632, col: 1, offset: 19681},
			expr: &actionExpr{
				pos: position{line: 632, col: 18, offset: 19700},
				run: (*parser).callonMoreRecordType1,
				expr: &seqExpr{
					pos: position{line: 632, col: 18, offset: 19700},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 632, col: 18, offset: 19700},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 632, col: 20, offset: 19702},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 632, col: 24, offset: 19706},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 632, col: 26, offset: 19708},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 632, col: 28, offset: 19710},
								name: "RecordTypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "NonEmptyRecordType",
			pos:  position{line: 633, col: 1, offset: 19742},
			expr: &actionExpr{
				pos: position{line: 634, col: 7, offset: 19771},
				run: (*parser).callonNonEmptyRecordType1,
				expr: &seqExpr{
					pos: position{line: 634, col: 7, offset: 19771},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 634, col: 7, offset: 19771},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 634, col: 13, offset: 19777},
								name: "RecordTypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 634, col: 29, offset: 19793},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 634, col: 34, offset: 19798},
								expr: &ruleRefExpr{
									pos:  position{line: 634, col: 34, offset: 19798},
									name: "MoreRecordType",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RecordLiteralField",
			pos:  position{line: 648, col: 1, offset: 20365},
			expr: &actionExpr{
				pos: position{line: 648, col: 22, offset: 20388},
				run: (*parser).callonRecordLiteralField1,
				expr: &seqExpr{
					pos: position{line: 648, col: 22, offset: 20388},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 648, col: 22, offset: 20388},
							label: "name",
							expr: &choiceExpr{
								pos: position{line: 121, col: 9, offset: 2803},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 121, col: 9, offset: 2803},
										run: (*parser).callonRecordLiteralField5,
										expr: &seqExpr{
											pos: position{line: 121, col: 9, offset: 2803},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 121, col: 9, offset: 2803},
													val:        "`",
													ignoreCase: false,
												},
												&labeledExpr{
													pos:   position{line: 121, col: 13, offset: 2807},
													label: "label",
													expr: &actionExpr{
														pos: position{line: 119, col: 15, offset: 2744},
														run: (*parser).callonRecordLiteralField9,
														expr: &oneOrMoreExpr{
															pos: position{line: 119, col: 15, offset: 2744},
															expr: &charClassMatcher{
																pos:        position{line: 118, col: 19, offset: 2707},
																val:        "[ -_a-~]",
																ranges:     []rune{' ', '_', 'a', '~'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 121, col: 31, offset: 2825},
													val:        "`",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 122, col: 9, offset: 2859},
										run: (*parser).callonRecordLiteralField13,
										expr: &labeledExpr{
											pos:   position{line: 122, col: 9, offset: 2859},
											label: "label",
											expr: &choiceExpr{
												pos: position{line: 112, col: 15, offset: 2500},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 112, col: 15, offset: 2500},
														run: (*parser).callonRecordLiteralField16,
														expr: &seqExpr{
															pos: position{line: 112, col: 15, offset: 2500},
															exprs: []interface{}{
																&choiceExpr{
																	pos: position{line: 274, col: 5, offset: 7389},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 256, col: 6, offset: 7087},
																			val:        "if",
																			ignoreCase: false,
																		},
																		&litMatcher{
																			pos:        position{line: 257, col: 8, offset: 7101},
																			val:        "then",
																			ignoreCase: false,
																		},
																		&litMatcher{
																			pos:        position{line: 258, col: 8, offset: 7117},
																			val:        "else",
																			ignoreCase: false,
																		},
																		&litMatcher{
																			pos:        position{line: 259, col: 7, offset: 7132},
																			val:        "let",
																			ignoreCase: false,
																		},
																		&litMatcher{
																			pos:        position{line: 260, col: 6, offset: 7145},
																			val:        "in",
																			ignoreCase: false,
																		},
																		&litMatcher{
																			pos:        position{line: 262, col: 9, offset: 7172},
																			val:        "using",
																			ignoreCase: false,
																		},
																		&actionExpr{
																			pos: position{line: 264, col: 11, offset: 7210},
																			run: (*parser).callonRecordLiteralField25,
																			expr: &litMatcher{
																				pos:        position{line: 264, col: 11, offset: 7210},
																				val:        "missing",
																				ignoreCase: false,
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 261, col: 6, offset: 7157},
																			val:        "as",
																			ignoreCase: false,
																		},
																		&litMatcher{
																			pos:        position{line: 265, col: 8, offset: 7255},
																			val:        "True",
																			ignoreCase: false,
																		},
																		&litMatcher{
																			pos:        position{line: 266, col: 9, offset: 7272},
																			val:        "False",
																			ignoreCase: false,
																		},
																		&litMatcher{
																			pos:        position{line: 267, col: 12, offset: 7293},
																			val:        "Infinity",
																			ignoreCase: false,
																		},
																		&litMatcher{
																			pos:        position{line: 268, col: 7, offset: 7312},
																			val:        "NaN",
																			ignoreCase: false,
																		},
																		&litMatcher{
																			pos:        position{line: 263, col: 9, offset: 7190},
																			val:        "merge",
																			ignoreCase: false,
																		},
																		&litMatcher{
																			pos:        position{line: 269, col: 8, offset: 7327},
																			val:        "Some",
																			ignoreCase: false,
																		},
																		&litMatcher{
																			pos:        position{line: 270, col: 9, offset: 7344},
																			val:        "toMap",
																			ignoreCase: false,
																		},
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 112, col: 23, offset: 2508},
																	expr: &charClassMatcher{
																		pos:        position{line: 111, col: 23, offset: 2469},
																		val:        "[_/-A-Za-z0-9]",
																		chars:      []rune{'_', '/', '-'},
																		ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 113, col: 13, offset: 2572},
														run: (*parser).callonRecordLiteralField37,
														expr: &seqExpr{
															pos: position{line: 113, col: 13, offset: 2572},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 113, col: 13, offset: 2572},
																	expr: &choiceExpr{
																		pos: position{line: 274, col: 5, offset: 7389},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 256, col: 6, offset: 7087},
																				val:        "if",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 257, col: 8, offset: 7101},
																				val:        "then",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 258, col: 8, offset: 7117},
																				val:        "else",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 259, col: 7, offset: 7132},
																				val:        "let",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 260, col: 6, offset: 7145},
																				val:        "in",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 262, col: 9, offset: 7172},
																				val:        "using",
																				ignoreCase: false,
																			},
																			&actionExpr{
																				pos: position{line: 264, col: 11, offset: 7210},
																				run: (*parser).callonRecordLiteralField47,
																				expr: &litMatcher{
																					pos:        position{line: 264, col: 11, offset: 7210},
																					val:        "missing",
																					ignoreCase: false,
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 261, col: 6, offset: 7157},
																				val:        "as",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 265, col: 8, offset: 7255},
																				val:        "True",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 266, col: 9, offset: 7272},
																				val:        "False",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 267, col: 12, offset: 7293},
																				val:        "Infinity",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 268, col: 7, offset: 7312},
																				val:        "NaN",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 263, col: 9, offset: 7190},
																				val:        "merge",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 269, col: 8, offset: 7327},
																				val:        "Some",
																				ignoreCase: false,
																			},
																			&litMatcher{
																				pos:        position{line: 270, col: 9, offset: 7344},
																				val:        "toMap",
																				ignoreCase: false,
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 110, col: 24, offset: 2435},
																	val:        "[_A-Za-z]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'A', 'Z', 'a', 'z'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 113, col: 43, offset: 2602},
																	expr: &charClassMatcher{
																		pos:        position{line: 111, col: 23, offset: 2469},
																		val:        "[_/-A-Za-z0-9]",
																		chars:      []rune{'_', '/', '-'},
																		ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 648, col: 36, offset: 20402},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 648, col: 38, offset: 20404},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 648, col: 42, offset: 20408},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 648, col: 44, offset: 20410},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 648, col: 49, offset: 20415},
								name: "Expression",
							},
						},
					},
				},
			},
		},
		{
			name: "MoreRecordLiteral",
			pos:  position{line: 651, col: 1, offset: 20472},
			expr: &actionExpr{
				pos: position{line: 651, col: 21, offset: 20494},
				run: (*parser).callonMoreRecordLiteral1,
				expr: &seqExpr{
					pos: position{line: 651, col: 21, offset: 20494},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 651, col: 21, offset: 20494},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 651, col: 23, offset: 20496},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 651, col: 27, offset: 20500},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 651, col: 29, offset: 20502},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 31, offset: 20504},
								name: "RecordLiteralField",
							},
						},
					},
				},
			},
		},
		{
			name: "NonEmptyRecordLiteral",
			pos:  position{line: 652, col: 1, offset: 20539},
			expr: &actionExpr{
				pos: position{line: 653, col: 7, offset: 20571},
				run: (*parser).callonNonEmptyRecordLiteral1,
				expr: &seqExpr{
					pos: position{line: 653, col: 7, offset: 20571},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 653, col: 7, offset: 20571},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 653, col: 13, offset: 20577},
								name: "RecordLiteralField",
							},
						},
						&labeledExpr{
							pos:   position{line: 653, col: 32, offset: 20596},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 653, col: 37, offset: 20601},
								expr: &ruleRefExpr{
									pos:  position{line: 653, col: 37, offset: 20601},
									name: "MoreRecordLiteral",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnionType",
			pos:  position{line: 667, col: 1, offset: 21174},
			expr: &choiceExpr{
				pos: position{line: 667, col: 13, offset: 21188},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 667, col: 13, offset: 21188},
						name: "NonEmptyUnionType",
					},
					&actionExpr{
						pos: position{line: 669, col: 18, offset: 21243},
						run: (*parser).callonUnionType3,
						expr: &litMatcher{
							pos:        position{line: 669, col: 18, offset: 21243},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NonEmptyUnionType",
			pos:  position{line: 671, col: 1, offset: 21275},
			expr: &actionExpr{
				pos: position{line: 671, col: 21, offset: 21297},
				run: (*parser).callonNonEmptyUnionType1,
				expr: &seqExpr{
					pos: position{line: 671, col: 21, offset: 21297},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 671, col: 21, offset: 21297},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 671, col: 27, offset: 21303},
								name: "UnionVariant",
							},
						},
						&labeledExpr{
							pos:   position{line: 671, col: 40, offset: 21316},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 671, col: 45, offset: 21321},
								expr: &seqExpr{
									pos: position{line: 671, col: 46, offset: 21322},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 671, col: 46, offset: 21322},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 671, col: 48, offset: 21324},
											val:        "|",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 671, col: 52, offset: 21328},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 671, col: 54, offset: 21330},
											name: "UnionVariant",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnionVariant",
			pos:  position{line: 696, col: 1, offset: 22171},
			expr: &seqExpr{
				pos: position{line: 696, col: 16, offset: 22188},
				exprs: []interface{}{
					&choiceExpr{
						pos: position{line: 121, col: 9, offset: 2803},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 121, col: 9, offset: 2803},
								run: (*parser).callonUnionVariant3,
								expr: &seqExpr{
									pos: position{line: 121, col: 9, offset: 2803},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 121, col: 9, offset: 2803},
											val:        "`",
											ignoreCase: false,
										},
										&labeledExpr{
											pos:   position{line: 121, col: 13, offset: 2807},
											label: "label",
											expr: &actionExpr{
												pos: position{line: 119, col: 15, offset: 2744},
												run: (*parser).callonUnionVariant7,
												expr: &oneOrMoreExpr{
													pos: position{line: 119, col: 15, offset: 2744},
													expr: &charClassMatcher{
														pos:        position{line: 118, col: 19, offset: 2707},
														val:        "[ -_a-~]",
														ranges:     []rune{' ', '_', 'a', '~'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 121, col: 31, offset: 2825},
											val:        "`",
											ignoreCase: false,
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 122, col: 9, offset: 2859},
								run: (*parser).callonUnionVariant11,
								expr: &labeledExpr{
									pos:   position{line: 122, col: 9, offset: 2859},
									label: "label",
									expr: &choiceExpr{
										pos: position{line: 112, col: 15, offset: 2500},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 112, col: 15, offset: 2500},
												run: (*parser).callonUnionVariant14,
												expr: &seqExpr{
													pos: position{line: 112, col: 15, offset: 2500},
													exprs: []interface{}{
														&choiceExpr{
															pos: position{line: 274, col: 5, offset: 7389},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 256, col: 6, offset: 7087},
																	val:        "if",
																	ignoreCase: false,
																},
																&litMatcher{
																	pos:        position{line: 257, col: 8, offset: 7101},
																	val:        "then",
																	ignoreCase: false,
																},
																&litMatcher{
																	pos:        position{line: 258, col: 8, offset: 7117},
																	val:        "else",
																	ignoreCase: false,
																},
																&litMatcher{
																	pos:        position{line: 259, col: 7, offset: 7132},
																	val:        "let",
																	ignoreCase: false,
																},
																&litMatcher{
																	pos:        position{line: 260, col: 6, offset: 7145},
																	val:        "in",
																	ignoreCase: false,
																},
																&litMatcher{
																	pos:        position{line: 262, col: 9, offset: 7172},
																	val:        "using",
																	ignoreCase: false,
																},
																&actionExpr{
																	pos: position{line: 264, col: 11, offset: 7210},
																	run: (*parser).callonUnionVariant23,
																	expr: &litMatcher{
																		pos:        position{line: 264, col: 11, offset: 7210},
																		val:        "missing",
																		ignoreCase: false,
																	},
																},
																&litMatcher{
																	pos:        position{line: 261, col: 6, offset: 7157},
																	val:        "as",
																	ignoreCase: false,
																},
																&litMatcher{
																	pos:        position{line: 265, col: 8, offset: 7255},
																	val:        "True",
																	ignoreCase: false,
																},
																&litMatcher{
																	pos:        position{line: 266, col: 9, offset: 7272},
																	val:        "False",
																	ignoreCase: false,
																},
																&litMatcher{
																	pos:        position{line: 267, col: 12, offset: 7293},
																	val:        "Infinity",
																	ignoreCase: false,
																},
																&litMatcher{
																	pos:        position{line: 268, col: 7, offset: 7312},
																	val:        "NaN",
																	ignoreCase: false,
																},
																&litMatcher{
																	pos:        position{line: 263, col: 9, offset: 7190},
																	val:        "merge",
																	ignoreCase: false,
																},
																&litMatcher{
																	pos:        position{line: 269, col: 8, offset: 7327},
																	val:        "Some",
																	ignoreCase: false,
																},
																&litMatcher{
																	pos:        position{line: 270, col: 9, offset: 7344},
																	val:        "toMap",
																	ignoreCase: false,
																},
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 112, col: 23, offset: 2508},
															expr: &charClassMatcher{
																pos:        position{line: 111, col: 23, offset: 2469},
																val:        "[_/-A-Za-z0-9]",
																chars:      []rune{'_', '/', '-'},
																ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 113, col: 13, offset: 2572},
												run: (*parser).callonUnionVariant35,
												expr: &seqExpr{
													pos: position{line: 113, col: 13, offset: 2572},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 113, col: 13, offset: 2572},
															expr: &choiceExpr{
																pos: position{line: 274, col: 5, offset: 7389},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 256, col: 6, offset: 7087},
																		val:        "if",
																		ignoreCase: false,
																	},
																	&litMatcher{
																		pos:        position{line: 257, col: 8, offset: 7101},
																		val:        "then",
																		ignoreCase: false,
																	},
																	&litMatcher{
																		pos:        position{line: 258, col: 8, offset: 7117},
																		val:        "else",
																		ignoreCase: false,
																	},
																	&litMatcher{
																		pos:        position{line: 259, col: 7, offset: 7132},
																		val:        "let",
																		ignoreCase: false,
																	},
																	&litMatcher{
																		pos:        position{line: 260, col: 6, offset: 7145},
																		val:        "in",
																		ignoreCase: false,
																	},
																	&litMatcher{
																		pos:        position{line: 262, col: 9, offset: 7172},
																		val:        "using",
																		ignoreCase: false,
																	},
																	&actionExpr{
																		pos: position{line: 264, col: 11, offset: 7210},
																		run: (*parser).callonUnionVariant45,
																		expr: &litMatcher{
																			pos:        position{line: 264, col: 11, offset: 7210},
																			val:        "missing",
																			ignoreCase: false,
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 261, col: 6, offset: 7157},
																		val:        "as",
																		ignoreCase: false,
																	},
																	&litMatcher{
																		pos:        position{line: 265, col: 8, offset: 7255},
																		val:        "True",
																		ignoreCase: false,
																	},
																	&litMatcher{
																		pos:        position{line: 266, col: 9, offset: 7272},
																		val:        "False",
																		ignoreCase: false,
																	},
																	&litMatcher{
																		pos:        position{line: 267, col: 12, offset: 7293},
																		val:        "Infinity",
																		ignoreCase: false,
																	},
																	&litMatcher{
																		pos:        position{line: 268, col: 7, offset: 7312},
																		val:        "NaN",
																		ignoreCase: false,
																	},
																	&litMatcher{
																		pos:        position{line: 263, col: 9, offset: 7190},
																		val:        "merge",
																		ignoreCase: false,
																	},
																	&litMatcher{
																		pos:        position{line: 269, col: 8, offset: 7327},
																		val:        "Some",
																		ignoreCase: false,
																	},
																	&litMatcher{
																		pos:        position{line: 270, col: 9, offset: 7344},
																		val:        "toMap",
																		ignoreCase: false,
																	},
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 110, col: 24, offset: 2435},
															val:        "[_A-Za-z]",
															chars:      []rune{'_'},
															ranges:     []rune{'A', 'Z', 'a', 'z'},
															ignoreCase: false,
															inverted:   false,
														},
														&zeroOrMoreExpr{
															pos: position{line: 113, col: 43, offset: 2602},
															expr: &charClassMatcher{
																pos:        position{line: 111, col: 23, offset: 2469},
																val:        "[_/-A-Za-z0-9]",
																chars:      []rune{'_', '/', '-'},
																ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 696, col: 25, offset: 22197},
						expr: &seqExpr{
							pos: position{line: 696, col: 26, offset: 22198},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 696, col: 26, offset: 22198},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 696, col: 28, offset: 22200},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 696, col: 32, offset: 22204},
									name: "_1",
								},
								&ruleRefExpr{
									pos:  position{line: 696, col: 35, offset: 22207},
									name: "Expression",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MoreList",
			pos:  position{line: 698, col: 1, offset: 22221},
			expr: &actionExpr{
				pos: position{line: 698, col: 12, offset: 22234},
				run: (*parser).callonMoreList1,
				expr: &seqExpr{
					pos: position{line: 698, col: 12, offset: 22234},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 698, col: 12, offset: 22234},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 698, col: 16, offset: 22238},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 698, col: 18, offset: 22240},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 698, col: 20, offset: 22242},
								name: "Expression",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 698, col: 31, offset: 22253},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "NonEmptyListLiteral",
			pos:  position{line: 700, col: 1, offset: 22272},
			expr: &actionExpr{
				pos: position{line: 701, col: 7, offset: 22302},
				run: (*parser).callonNonEmptyListLiteral1,
				expr: &seqExpr{
					pos: position{line: 701, col: 7, offset: 22302},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 701, col: 7, offset: 22302},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 701, col: 11, offset: 22306},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 701, col: 13, offset: 22308},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 701, col: 19, offset: 22314},
								name: "Expression",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 701, col: 30, offset: 22325},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 701, col: 32, offset: 22327},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 701, col: 37, offset: 22332},
								expr: &ruleRefExpr{
									pos:  position{line: 701, col: 37, offset: 22332},
									name: "MoreList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 701, col: 47, offset: 22342},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
	},
}

func (c *current) onDhallFile1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonDhallFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDhallFile1(stack["e"])
}

func (c *current) onCompleteExpression1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonCompleteExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCompleteExpression1(stack["e"])
}

func (c *current) onBlockCommentContinue9() (interface{}, error) {
	return []byte{'\n'}, nil
}

func (p *parser) callonBlockCommentContinue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockCommentContinue9()
}

func (c *current) onWhitespaceChunk3() (interface{}, error) {
	return []byte{'\n'}, nil
}

func (p *parser) callonWhitespaceChunk3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhitespaceChunk3()
}

func (c *current) onWhitespaceChunk9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWhitespaceChunk9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhitespaceChunk9()
}

func (c *current) onWhitespaceChunk14() (interface{}, error) {
	return []byte{'\n'}, nil
}

func (p *parser) callonWhitespaceChunk14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhitespaceChunk14()
}

func (c *current) onWhitespaceChunk5(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonWhitespaceChunk5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhitespaceChunk5(stack["content"])
}

func (c *current) onDoubleQuoteChunk9() (interface{}, error) {
	return []byte("\b"), nil
}

func (p *parser) callonDoubleQuoteChunk9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteChunk9()
}

func (c *current) onDoubleQuoteChunk11() (interface{}, error) {
	return []byte("\f"), nil
}

func (p *parser) callonDoubleQuoteChunk11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteChunk11()
}

func (c *current) onDoubleQuoteChunk13() (interface{}, error) {
	return []byte("\n"), nil
}

func (p *parser) callonDoubleQuoteChunk13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteChunk13()
}

func (c *current) onDoubleQuoteChunk15() (interface{}, error) {
	return []byte("\r"), nil
}

func (p *parser) callonDoubleQuoteChunk15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteChunk15()
}

func (c *current) onDoubleQuoteChunk17() (interface{}, error) {
	return []byte("\t"), nil
}

func (p *parser) callonDoubleQuoteChunk17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteChunk17()
}

func (c *current) onDoubleQuoteChunk24() (interface{}, error) {
	return ParseCodepoint(string(c.text))

}

func (p *parser) callonDoubleQuoteChunk24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteChunk24()
}

func (c *current) onDoubleQuoteChunk38() (interface{}, error) {
	return ParseCodepoint(string(c.text[1 : len(c.text)-1]))

}

func (p *parser) callonDoubleQuoteChunk38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteChunk38()
}

func (c *current) onDoubleQuoteChunk19(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonDoubleQuoteChunk19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteChunk19(stack["u"])
}

func (c *current) onDoubleQuoteChunk3(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonDoubleQuoteChunk3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteChunk3(stack["e"])
}

func (c *current) onDoubleQuoteLiteral1(chunks interface{}) (interface{}, error) {
	var str strings.Builder
	var outChunks Chunks
	for _, chunk := range chunks.([]interface{}) {
		switch e := chunk.(type) {
		case []byte:
			str.Write(e)
		case Expr:
			outChunks = append(outChunks, Chunk{str.String(), e})
			str.Reset()
		default:
			return nil, errors.New("can't happen")
		}
	}
	return TextLit{Chunks: outChunks, Suffix: str.String()}, nil
}

func (p *parser) callonDoubleQuoteLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteLiteral1(stack["chunks"])
}

func (c *current) onSingleQuoteContinue6() (interface{}, error) {
	return []byte("''"), nil
}

func (p *parser) callonSingleQuoteContinue6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteContinue6()
}

func (c *current) onSingleQuoteContinue10() (interface{}, error) {
	return []byte("$\u007b"), nil
}

func (p *parser) callonSingleQuoteContinue10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteContinue10()
}

func (c *current) onSingleQuoteContinue16() (interface{}, error) {
	return []byte{'\n'}, nil
}

func (p *parser) callonSingleQuoteContinue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteContinue16()
}

func (c *current) onSingleQuoteLiteral6() (interface{}, error) {
	return []byte{'\n'}, nil
}

func (p *parser) callonSingleQuoteLiteral6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteLiteral6()
}

func (c *current) onSingleQuoteLiteral1(content interface{}) (interface{}, error) {
	var str strings.Builder
	var outChunks Chunks
	chunk, ok := content.([]interface{})
	for ; ok; chunk, ok = chunk[1].([]interface{}) {
		switch e := chunk[0].(type) {
		case []byte:
			str.Write(e)
		case Expr:
			outChunks = append(outChunks, Chunk{str.String(), e})
			str.Reset()
		default:
			return nil, errors.New("unimplemented")
		}
	}
	return RemoveLeadingCommonIndent(TextLit{Chunks: outChunks, Suffix: str.String()}), nil
}

func (p *parser) callonSingleQuoteLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteLiteral1(stack["content"])
}

func (c *current) onInterpolation1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonInterpolation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation1(stack["e"])
}

func (c *current) onDeBruijn7() (interface{}, error) {
	i, err := strconv.Atoi(string(c.text))
	return NaturalLit(i), err
}

func (p *parser) callonDeBruijn7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeBruijn7()
}

func (c *current) onDeBruijn1(index interface{}) (interface{}, error) {
	return int(index.(NaturalLit)), nil
}

func (p *parser) callonDeBruijn1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeBruijn1(stack["index"])
}

func (c *current) onVariable10() (interface{}, error) {
	return NaturalBuild, nil
}

func (p *parser) callonVariable10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable10()
}

func (c *current) onVariable12() (interface{}, error) {
	return NaturalFold, nil
}

func (p *parser) callonVariable12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable12()
}

func (c *current) onVariable14() (interface{}, error) {
	return NaturalIsZero, nil
}

func (p *parser) callonVariable14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable14()
}

func (c *current) onVariable16() (interface{}, error) {
	return NaturalEven, nil
}

func (p *parser) callonVariable16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable16()
}

func (c *current) onVariable18() (interface{}, error) {
	return NaturalOdd, nil
}

func (p *parser) callonVariable18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable18()
}

func (c *current) onVariable20() (interface{}, error) {
	return NaturalToInteger, nil
}

func (p *parser) callonVariable20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable20()
}

func (c *current) onVariable22() (interface{}, error) {
	return NaturalShow, nil
}

func (p *parser) callonVariable22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable22()
}

func (c *current) onVariable24() (interface{}, error) {
	return NaturalSubtract, nil
}

func (p *parser) callonVariable24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable24()
}

func (c *current) onVariable26() (interface{}, error) {
	return IntegerToDouble, nil
}

func (p *parser) callonVariable26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable26()
}

func (c *current) onVariable28() (interface{}, error) {
	return IntegerShow, nil
}

func (p *parser) callonVariable28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable28()
}

func (c *current) onVariable30() (interface{}, error) {
	return DoubleShow, nil
}

func (p *parser) callonVariable30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable30()
}

func (c *current) onVariable32() (interface{}, error) {
	return ListBuild, nil
}

func (p *parser) callonVariable32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable32()
}

func (c *current) onVariable34() (interface{}, error) {
	return ListFold, nil
}

func (p *parser) callonVariable34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable34()
}

func (c *current) onVariable36() (interface{}, error) {
	return ListLength, nil
}

func (p *parser) callonVariable36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable36()
}

func (c *current) onVariable38() (interface{}, error) {
	return ListHead, nil
}

func (p *parser) callonVariable38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable38()
}

func (c *current) onVariable40() (interface{}, error) {
	return ListLast, nil
}

func (p *parser) callonVariable40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable40()
}

func (c *current) onVariable42() (interface{}, error) {
	return ListIndexed, nil
}

func (p *parser) callonVariable42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable42()
}

func (c *current) onVariable44() (interface{}, error) {
	return ListReverse, nil
}

func (p *parser) callonVariable44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable44()
}

func (c *current) onVariable46() (interface{}, error) {
	return OptionalBuild, nil
}

func (p *parser) callonVariable46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable46()
}

func (c *current) onVariable48() (interface{}, error) {
	return OptionalFold, nil
}

func (p *parser) callonVariable48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable48()
}

func (c *current) onVariable50() (interface{}, error) {
	return TextShow, nil
}

func (p *parser) callonVariable50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable50()
}

func (c *current) onVariable52() (interface{}, error) {
	return Bool, nil
}

func (p *parser) callonVariable52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable52()
}

func (c *current) onVariable54() (interface{}, error) {
	return True, nil
}

func (p *parser) callonVariable54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable54()
}

func (c *current) onVariable56() (interface{}, error) {
	return False, nil
}

func (p *parser) callonVariable56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable56()
}

func (c *current) onVariable58() (interface{}, error) {
	return Optional, nil
}

func (p *parser) callonVariable58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable58()
}

func (c *current) onVariable60() (interface{}, error) {
	return Natural, nil
}

func (p *parser) callonVariable60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable60()
}

func (c *current) onVariable62() (interface{}, error) {
	return Integer, nil
}

func (p *parser) callonVariable62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable62()
}

func (c *current) onVariable64() (interface{}, error) {
	return Double, nil
}

func (p *parser) callonVariable64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable64()
}

func (c *current) onVariable66() (interface{}, error) {
	return Text, nil
}

func (p *parser) callonVariable66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable66()
}

func (c *current) onVariable68() (interface{}, error) {
	return List, nil
}

func (p *parser) callonVariable68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable68()
}

func (c *current) onVariable70() (interface{}, error) {
	return None, nil
}

func (p *parser) callonVariable70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable70()
}

func (c *current) onVariable72() (interface{}, error) {
	return Type, nil
}

func (p *parser) callonVariable72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable72()
}

func (c *current) onVariable74() (interface{}, error) {
	return Kind, nil
}

func (p *parser) callonVariable74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable74()
}

func (c *current) onVariable76() (interface{}, error) {
	return Sort, nil
}

func (p *parser) callonVariable76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable76()
}

func (c *current) onVariable85() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVariable85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable85()
}

func (c *current) onVariable81(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonVariable81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable81(stack["label"])
}

func (c *current) onVariable101() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonVariable101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable101()
}

func (c *current) onVariable92() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVariable92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable92()
}

func (c *current) onVariable123() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonVariable123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable123()
}

func (c *current) onVariable113() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVariable113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable113()
}

func (c *current) onVariable89(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonVariable89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable89(stack["label"])
}

func (c *current) onVariable5(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonVariable5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable5(stack["label"])
}

func (c *current) onVariable140() (interface{}, error) {
	return NaturalBuild, nil
}

func (p *parser) callonVariable140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable140()
}

func (c *current) onVariable142() (interface{}, error) {
	return NaturalFold, nil
}

func (p *parser) callonVariable142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable142()
}

func (c *current) onVariable144() (interface{}, error) {
	return NaturalIsZero, nil
}

func (p *parser) callonVariable144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable144()
}

func (c *current) onVariable146() (interface{}, error) {
	return NaturalEven, nil
}

func (p *parser) callonVariable146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable146()
}

func (c *current) onVariable148() (interface{}, error) {
	return NaturalOdd, nil
}

func (p *parser) callonVariable148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable148()
}

func (c *current) onVariable150() (interface{}, error) {
	return NaturalToInteger, nil
}

func (p *parser) callonVariable150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable150()
}

func (c *current) onVariable152() (interface{}, error) {
	return NaturalShow, nil
}

func (p *parser) callonVariable152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable152()
}

func (c *current) onVariable154() (interface{}, error) {
	return NaturalSubtract, nil
}

func (p *parser) callonVariable154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable154()
}

func (c *current) onVariable156() (interface{}, error) {
	return IntegerToDouble, nil
}

func (p *parser) callonVariable156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable156()
}

func (c *current) onVariable158() (interface{}, error) {
	return IntegerShow, nil
}

func (p *parser) callonVariable158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable158()
}

func (c *current) onVariable160() (interface{}, error) {
	return DoubleShow, nil
}

func (p *parser) callonVariable160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable160()
}

func (c *current) onVariable162() (interface{}, error) {
	return ListBuild, nil
}

func (p *parser) callonVariable162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable162()
}

func (c *current) onVariable164() (interface{}, error) {
	return ListFold, nil
}

func (p *parser) callonVariable164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable164()
}

func (c *current) onVariable166() (interface{}, error) {
	return ListLength, nil
}

func (p *parser) callonVariable166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable166()
}

func (c *current) onVariable168() (interface{}, error) {
	return ListHead, nil
}

func (p *parser) callonVariable168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable168()
}

func (c *current) onVariable170() (interface{}, error) {
	return ListLast, nil
}

func (p *parser) callonVariable170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable170()
}

func (c *current) onVariable172() (interface{}, error) {
	return ListIndexed, nil
}

func (p *parser) callonVariable172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable172()
}

func (c *current) onVariable174() (interface{}, error) {
	return ListReverse, nil
}

func (p *parser) callonVariable174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable174()
}

func (c *current) onVariable176() (interface{}, error) {
	return OptionalBuild, nil
}

func (p *parser) callonVariable176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable176()
}

func (c *current) onVariable178() (interface{}, error) {
	return OptionalFold, nil
}

func (p *parser) callonVariable178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable178()
}

func (c *current) onVariable180() (interface{}, error) {
	return TextShow, nil
}

func (p *parser) callonVariable180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable180()
}

func (c *current) onVariable182() (interface{}, error) {
	return Bool, nil
}

func (p *parser) callonVariable182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable182()
}

func (c *current) onVariable184() (interface{}, error) {
	return True, nil
}

func (p *parser) callonVariable184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable184()
}

func (c *current) onVariable186() (interface{}, error) {
	return False, nil
}

func (p *parser) callonVariable186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable186()
}

func (c *current) onVariable188() (interface{}, error) {
	return Optional, nil
}

func (p *parser) callonVariable188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable188()
}

func (c *current) onVariable190() (interface{}, error) {
	return Natural, nil
}

func (p *parser) callonVariable190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable190()
}

func (c *current) onVariable192() (interface{}, error) {
	return Integer, nil
}

func (p *parser) callonVariable192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable192()
}

func (c *current) onVariable194() (interface{}, error) {
	return Double, nil
}

func (p *parser) callonVariable194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable194()
}

func (c *current) onVariable196() (interface{}, error) {
	return Text, nil
}

func (p *parser) callonVariable196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable196()
}

func (c *current) onVariable198() (interface{}, error) {
	return List, nil
}

func (p *parser) callonVariable198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable198()
}

func (c *current) onVariable200() (interface{}, error) {
	return None, nil
}

func (p *parser) callonVariable200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable200()
}

func (c *current) onVariable202() (interface{}, error) {
	return Type, nil
}

func (p *parser) callonVariable202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable202()
}

func (c *current) onVariable204() (interface{}, error) {
	return Kind, nil
}

func (p *parser) callonVariable204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable204()
}

func (c *current) onVariable206() (interface{}, error) {
	return Sort, nil
}

func (p *parser) callonVariable206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable206()
}

func (c *current) onVariable214() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVariable214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable214()
}

func (c *current) onVariable210(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonVariable210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable210(stack["label"])
}

func (c *current) onVariable230() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonVariable230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable230()
}

func (c *current) onVariable221() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVariable221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable221()
}

func (c *current) onVariable252() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonVariable252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable252()
}

func (c *current) onVariable242() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVariable242() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable242()
}

func (c *current) onVariable218(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonVariable218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable218(stack["label"])
}

func (c *current) onVariable136(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonVariable136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable136(stack["label"])
}

func (c *current) onVariable1(name, index interface{}) (interface{}, error) {
	if index != nil {
		return Var{Name: name.(string), Index: index.(int)}, nil
	} else {
		return Var{Name: name.(string)}, nil
	}
}

func (p *parser) callonVariable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable1(stack["name"], stack["index"])
}

func (c *current) onIdentifier3() (interface{}, error) {
	return NaturalBuild, nil
}

func (p *parser) callonIdentifier3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier3()
}

func (c *current) onIdentifier5() (interface{}, error) {
	return NaturalFold, nil
}

func (p *parser) callonIdentifier5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier5()
}

func (c *current) onIdentifier7() (interface{}, error) {
	return NaturalIsZero, nil
}

func (p *parser) callonIdentifier7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier7()
}

func (c *current) onIdentifier9() (interface{}, error) {
	return NaturalEven, nil
}

func (p *parser) callonIdentifier9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier9()
}

func (c *current) onIdentifier11() (interface{}, error) {
	return NaturalOdd, nil
}

func (p *parser) callonIdentifier11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier11()
}

func (c *current) onIdentifier13() (interface{}, error) {
	return NaturalToInteger, nil
}

func (p *parser) callonIdentifier13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier13()
}

func (c *current) onIdentifier15() (interface{}, error) {
	return NaturalShow, nil
}

func (p *parser) callonIdentifier15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier15()
}

func (c *current) onIdentifier17() (interface{}, error) {
	return NaturalSubtract, nil
}

func (p *parser) callonIdentifier17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier17()
}

func (c *current) onIdentifier19() (interface{}, error) {
	return IntegerToDouble, nil
}

func (p *parser) callonIdentifier19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier19()
}

func (c *current) onIdentifier21() (interface{}, error) {
	return IntegerShow, nil
}

func (p *parser) callonIdentifier21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier21()
}

func (c *current) onIdentifier23() (interface{}, error) {
	return DoubleShow, nil
}

func (p *parser) callonIdentifier23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier23()
}

func (c *current) onIdentifier25() (interface{}, error) {
	return ListBuild, nil
}

func (p *parser) callonIdentifier25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier25()
}

func (c *current) onIdentifier27() (interface{}, error) {
	return ListFold, nil
}

func (p *parser) callonIdentifier27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier27()
}

func (c *current) onIdentifier29() (interface{}, error) {
	return ListLength, nil
}

func (p *parser) callonIdentifier29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier29()
}

func (c *current) onIdentifier31() (interface{}, error) {
	return ListHead, nil
}

func (p *parser) callonIdentifier31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier31()
}

func (c *current) onIdentifier33() (interface{}, error) {
	return ListLast, nil
}

func (p *parser) callonIdentifier33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier33()
}

func (c *current) onIdentifier35() (interface{}, error) {
	return ListIndexed, nil
}

func (p *parser) callonIdentifier35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier35()
}

func (c *current) onIdentifier37() (interface{}, error) {
	return ListReverse, nil
}

func (p *parser) callonIdentifier37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier37()
}

func (c *current) onIdentifier39() (interface{}, error) {
	return OptionalBuild, nil
}

func (p *parser) callonIdentifier39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier39()
}

func (c *current) onIdentifier41() (interface{}, error) {
	return OptionalFold, nil
}

func (p *parser) callonIdentifier41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier41()
}

func (c *current) onIdentifier43() (interface{}, error) {
	return TextShow, nil
}

func (p *parser) callonIdentifier43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier43()
}

func (c *current) onIdentifier45() (interface{}, error) {
	return Bool, nil
}

func (p *parser) callonIdentifier45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier45()
}

func (c *current) onIdentifier47() (interface{}, error) {
	return True, nil
}

func (p *parser) callonIdentifier47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier47()
}

func (c *current) onIdentifier49() (interface{}, error) {
	return False, nil
}

func (p *parser) callonIdentifier49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier49()
}

func (c *current) onIdentifier51() (interface{}, error) {
	return Optional, nil
}

func (p *parser) callonIdentifier51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier51()
}

func (c *current) onIdentifier53() (interface{}, error) {
	return Natural, nil
}

func (p *parser) callonIdentifier53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier53()
}

func (c *current) onIdentifier55() (interface{}, error) {
	return Integer, nil
}

func (p *parser) callonIdentifier55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier55()
}

func (c *current) onIdentifier57() (interface{}, error) {
	return Double, nil
}

func (p *parser) callonIdentifier57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier57()
}

func (c *current) onIdentifier59() (interface{}, error) {
	return Text, nil
}

func (p *parser) callonIdentifier59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier59()
}

func (c *current) onIdentifier61() (interface{}, error) {
	return List, nil
}

func (p *parser) callonIdentifier61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier61()
}

func (c *current) onIdentifier63() (interface{}, error) {
	return None, nil
}

func (p *parser) callonIdentifier63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier63()
}

func (c *current) onIdentifier65() (interface{}, error) {
	return Type, nil
}

func (p *parser) callonIdentifier65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier65()
}

func (c *current) onIdentifier67() (interface{}, error) {
	return Kind, nil
}

func (p *parser) callonIdentifier67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier67()
}

func (c *current) onIdentifier69() (interface{}, error) {
	return Sort, nil
}

func (p *parser) callonIdentifier69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier69()
}

func (c *current) onImportHashed5() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonImportHashed5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed5()
}

func (c *current) onImportHashed19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImportHashed19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed19()
}

func (c *current) onImportHashed15(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonImportHashed15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed15(stack["u"])
}

func (c *current) onImportHashed26() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImportHashed26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed26()
}

func (c *current) onImportHashed22(q interface{}) (interface{}, error) {
	return q, nil
}

func (p *parser) callonImportHashed22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed22(stack["q"])
}

func (c *current) onImportHashed11(cs interface{}) (interface{}, error) {
	// urgh, have to convert []interface{} to []string
	components := make([]string, len(cs.([]interface{})))
	for i, component := range cs.([]interface{}) {
		components[i] = component.(string)
	}
	return path.Join(components...), nil
}

func (p *parser) callonImportHashed11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed11(stack["cs"])
}

func (c *current) onImportHashed7(p interface{}) (interface{}, error) {
	return Local(path.Join("..", p.(string))), nil
}

func (p *parser) callonImportHashed7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed7(stack["p"])
}

func (c *current) onImportHashed42() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImportHashed42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed42()
}

func (c *current) onImportHashed38(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonImportHashed38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed38(stack["u"])
}

func (c *current) onImportHashed49() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImportHashed49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed49()
}

func (c *current) onImportHashed45(q interface{}) (interface{}, error) {
	return q, nil
}

func (p *parser) callonImportHashed45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed45(stack["q"])
}

func (c *current) onImportHashed34(cs interface{}) (interface{}, error) {
	// urgh, have to convert []interface{} to []string
	components := make([]string, len(cs.([]interface{})))
	for i, component := range cs.([]interface{}) {
		components[i] = component.(string)
	}
	return path.Join(components...), nil
}

func (p *parser) callonImportHashed34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed34(stack["cs"])
}

func (c *current) onImportHashed30(p interface{}) (interface{}, error) {
	return Local(p.(string)), nil
}

func (p *parser) callonImportHashed30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed30(stack["p"])
}

func (c *current) onImportHashed65() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImportHashed65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed65()
}

func (c *current) onImportHashed61(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonImportHashed61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed61(stack["u"])
}

func (c *current) onImportHashed72() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImportHashed72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed72()
}

func (c *current) onImportHashed68(q interface{}) (interface{}, error) {
	return q, nil
}

func (p *parser) callonImportHashed68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed68(stack["q"])
}

func (c *current) onImportHashed57(cs interface{}) (interface{}, error) {
	// urgh, have to convert []interface{} to []string
	components := make([]string, len(cs.([]interface{})))
	for i, component := range cs.([]interface{}) {
		components[i] = component.(string)
	}
	return path.Join(components...), nil
}

func (p *parser) callonImportHashed57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed57(stack["cs"])
}

func (c *current) onImportHashed53(p interface{}) (interface{}, error) {
	return Local(path.Join("~", p.(string))), nil
}

func (p *parser) callonImportHashed53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed53(stack["p"])
}

func (c *current) onImportHashed86() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImportHashed86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed86()
}

func (c *current) onImportHashed82(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonImportHashed82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed82(stack["u"])
}

func (c *current) onImportHashed93() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImportHashed93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed93()
}

func (c *current) onImportHashed89(q interface{}) (interface{}, error) {
	return q, nil
}

func (p *parser) callonImportHashed89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed89(stack["q"])
}

func (c *current) onImportHashed78(cs interface{}) (interface{}, error) {
	// urgh, have to convert []interface{} to []string
	components := make([]string, len(cs.([]interface{})))
	for i, component := range cs.([]interface{}) {
		components[i] = component.(string)
	}
	return path.Join(components...), nil
}

func (p *parser) callonImportHashed78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed78(stack["cs"])
}

func (c *current) onImportHashed76(p interface{}) (interface{}, error) {
	return Local(path.Join("/", p.(string))), nil
}

func (p *parser) callonImportHashed76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed76(stack["p"])
}

func (c *current) onImportHashed123() (interface{}, error) {
	addr := net.ParseIP(string(c.text))
	if addr == nil {
		return nil, errors.New("Malformed IPv6 address")
	}
	return string(c.text), nil
}

func (p *parser) callonImportHashed123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed123()
}

func (c *current) onImportHashed159() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImportHashed159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed159()
}

func (c *current) onImportHashed155(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonImportHashed155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed155(stack["u"])
}

func (c *current) onImportHashed166() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImportHashed166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed166()
}

func (c *current) onImportHashed162(q interface{}) (interface{}, error) {
	return q, nil
}

func (p *parser) callonImportHashed162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed162(stack["q"])
}

func (c *current) onImportHashed99() (interface{}, error) {
	return url.ParseRequestURI(string(c.text))
}

func (p *parser) callonImportHashed99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed99()
}

func (c *current) onImportHashed97(u interface{}) (interface{}, error) {
	return MakeRemote(u.(*url.URL)), nil
}

func (p *parser) callonImportHashed97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed97(stack["u"])
}

func (c *current) onImportHashed204() (interface{}, error) {
	return EnvVar(string(c.text)), nil
}

func (p *parser) callonImportHashed204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed204()
}

func (c *current) onImportHashed217() (interface{}, error) {
	return []byte{0x22}, nil
}

func (p *parser) callonImportHashed217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed217()
}

func (c *current) onImportHashed219() (interface{}, error) {
	return []byte{0x5c}, nil
}

func (p *parser) callonImportHashed219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed219()
}

func (c *current) onImportHashed221() (interface{}, error) {
	return []byte{0x07}, nil
}

func (p *parser) callonImportHashed221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed221()
}

func (c *current) onImportHashed223() (interface{}, error) {
	return []byte{0x08}, nil
}

func (p *parser) callonImportHashed223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed223()
}

func (c *current) onImportHashed225() (interface{}, error) {
	return []byte{0x0c}, nil
}

func (p *parser) callonImportHashed225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed225()
}

func (c *current) onImportHashed227() (interface{}, error) {
	return []byte{0x0a}, nil
}

func (p *parser) callonImportHashed227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed227()
}

func (c *current) onImportHashed229() (interface{}, error) {
	return []byte{0x0d}, nil
}

func (p *parser) callonImportHashed229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed229()
}

func (c *current) onImportHashed231() (interface{}, error) {
	return []byte{0x09}, nil
}

func (p *parser) callonImportHashed231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed231()
}

func (c *current) onImportHashed233() (interface{}, error) {
	return []byte{0x0b}, nil
}

func (p *parser) callonImportHashed233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed233()
}

func (c *current) onImportHashed213(v interface{}) (interface{}, error) {
	var b strings.Builder
	for _, c := range v.([]interface{}) {
		_, err := b.Write(c.([]byte))
		if err != nil {
			return nil, err
		}
	}
	return EnvVar(b.String()), nil
}

func (p *parser) callonImportHashed213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed213(stack["v"])
}

func (c *current) onImportHashed209(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonImportHashed209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed209(stack["v"])
}

func (c *current) onImportHashed199(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonImportHashed199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed199(stack["v"])
}

func (c *current) onImportHashed245() (interface{}, error) {
	out := make([]byte, sha256.Size)
	_, err := hex.Decode(out, c.text)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (p *parser) callonImportHashed245() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed245()
}

func (c *current) onImportHashed241(val interface{}) (interface{}, error) {
	return append([]byte{0x12, 0x20}, val.([]byte)...), nil
}

func (p *parser) callonImportHashed241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed241(stack["val"])
}

func (c *current) onImportHashed1(i, h interface{}) (interface{}, error) {
	out := ImportHashed{Fetchable: i.(Fetchable)}
	if h != nil {
		out.Hash = h.([]interface{})[1].([]byte)
	}
	return out, nil
}

func (p *parser) callonImportHashed1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed1(stack["i"], stack["h"])
}

func (c *current) onImport2(i interface{}) (interface{}, error) {
	return Import{ImportHashed: i.(ImportHashed), ImportMode: RawText}, nil
}

func (p *parser) callonImport2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImport2(stack["i"])
}

func (c *current) onImport10(i interface{}) (interface{}, error) {
	return Import{ImportHashed: i.(ImportHashed), ImportMode: Location}, nil
}

func (p *parser) callonImport10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImport10(stack["i"])
}

func (c *current) onImport18(i interface{}) (interface{}, error) {
	return Import{ImportHashed: i.(ImportHashed), ImportMode: Code}, nil
}

func (p *parser) callonImport18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImport18(stack["i"])
}

func (c *current) onLetBinding12() (interface{}, error) {
	return NaturalBuild, nil
}

func (p *parser) callonLetBinding12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding12()
}

func (c *current) onLetBinding14() (interface{}, error) {
	return NaturalFold, nil
}

func (p *parser) callonLetBinding14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding14()
}

func (c *current) onLetBinding16() (interface{}, error) {
	return NaturalIsZero, nil
}

func (p *parser) callonLetBinding16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding16()
}

func (c *current) onLetBinding18() (interface{}, error) {
	return NaturalEven, nil
}

func (p *parser) callonLetBinding18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding18()
}

func (c *current) onLetBinding20() (interface{}, error) {
	return NaturalOdd, nil
}

func (p *parser) callonLetBinding20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding20()
}

func (c *current) onLetBinding22() (interface{}, error) {
	return NaturalToInteger, nil
}

func (p *parser) callonLetBinding22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding22()
}

func (c *current) onLetBinding24() (interface{}, error) {
	return NaturalShow, nil
}

func (p *parser) callonLetBinding24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding24()
}

func (c *current) onLetBinding26() (interface{}, error) {
	return NaturalSubtract, nil
}

func (p *parser) callonLetBinding26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding26()
}

func (c *current) onLetBinding28() (interface{}, error) {
	return IntegerToDouble, nil
}

func (p *parser) callonLetBinding28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding28()
}

func (c *current) onLetBinding30() (interface{}, error) {
	return IntegerShow, nil
}

func (p *parser) callonLetBinding30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding30()
}

func (c *current) onLetBinding32() (interface{}, error) {
	return DoubleShow, nil
}

func (p *parser) callonLetBinding32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding32()
}

func (c *current) onLetBinding34() (interface{}, error) {
	return ListBuild, nil
}

func (p *parser) callonLetBinding34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding34()
}

func (c *current) onLetBinding36() (interface{}, error) {
	return ListFold, nil
}

func (p *parser) callonLetBinding36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding36()
}

func (c *current) onLetBinding38() (interface{}, error) {
	return ListLength, nil
}

func (p *parser) callonLetBinding38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding38()
}

func (c *current) onLetBinding40() (interface{}, error) {
	return ListHead, nil
}

func (p *parser) callonLetBinding40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding40()
}

func (c *current) onLetBinding42() (interface{}, error) {
	return ListLast, nil
}

func (p *parser) callonLetBinding42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding42()
}

func (c *current) onLetBinding44() (interface{}, error) {
	return ListIndexed, nil
}

func (p *parser) callonLetBinding44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding44()
}

func (c *current) onLetBinding46() (interface{}, error) {
	return ListReverse, nil
}

func (p *parser) callonLetBinding46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding46()
}

func (c *current) onLetBinding48() (interface{}, error) {
	return OptionalBuild, nil
}

func (p *parser) callonLetBinding48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding48()
}

func (c *current) onLetBinding50() (interface{}, error) {
	return OptionalFold, nil
}

func (p *parser) callonLetBinding50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding50()
}

func (c *current) onLetBinding52() (interface{}, error) {
	return TextShow, nil
}

func (p *parser) callonLetBinding52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding52()
}

func (c *current) onLetBinding54() (interface{}, error) {
	return Bool, nil
}

func (p *parser) callonLetBinding54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding54()
}

func (c *current) onLetBinding56() (interface{}, error) {
	return True, nil
}

func (p *parser) callonLetBinding56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding56()
}

func (c *current) onLetBinding58() (interface{}, error) {
	return False, nil
}

func (p *parser) callonLetBinding58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding58()
}

func (c *current) onLetBinding60() (interface{}, error) {
	return Optional, nil
}

func (p *parser) callonLetBinding60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding60()
}

func (c *current) onLetBinding62() (interface{}, error) {
	return Natural, nil
}

func (p *parser) callonLetBinding62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding62()
}

func (c *current) onLetBinding64() (interface{}, error) {
	return Integer, nil
}

func (p *parser) callonLetBinding64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding64()
}

func (c *current) onLetBinding66() (interface{}, error) {
	return Double, nil
}

func (p *parser) callonLetBinding66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding66()
}

func (c *current) onLetBinding68() (interface{}, error) {
	return Text, nil
}

func (p *parser) callonLetBinding68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding68()
}

func (c *current) onLetBinding70() (interface{}, error) {
	return List, nil
}

func (p *parser) callonLetBinding70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding70()
}

func (c *current) onLetBinding72() (interface{}, error) {
	return None, nil
}

func (p *parser) callonLetBinding72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding72()
}

func (c *current) onLetBinding74() (interface{}, error) {
	return Type, nil
}

func (p *parser) callonLetBinding74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding74()
}

func (c *current) onLetBinding76() (interface{}, error) {
	return Kind, nil
}

func (p *parser) callonLetBinding76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding76()
}

func (c *current) onLetBinding78() (interface{}, error) {
	return Sort, nil
}

func (p *parser) callonLetBinding78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding78()
}

func (c *current) onLetBinding87() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLetBinding87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding87()
}

func (c *current) onLetBinding83(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonLetBinding83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding83(stack["label"])
}

func (c *current) onLetBinding103() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonLetBinding103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding103()
}

func (c *current) onLetBinding94() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLetBinding94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding94()
}

func (c *current) onLetBinding125() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonLetBinding125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding125()
}

func (c *current) onLetBinding115() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLetBinding115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding115()
}

func (c *current) onLetBinding91(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonLetBinding91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding91(stack["label"])
}

func (c *current) onLetBinding7(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonLetBinding7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding7(stack["label"])
}

func (c *current) onLetBinding142() (interface{}, error) {
	return NaturalBuild, nil
}

func (p *parser) callonLetBinding142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding142()
}

func (c *current) onLetBinding144() (interface{}, error) {
	return NaturalFold, nil
}

func (p *parser) callonLetBinding144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding144()
}

func (c *current) onLetBinding146() (interface{}, error) {
	return NaturalIsZero, nil
}

func (p *parser) callonLetBinding146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding146()
}

func (c *current) onLetBinding148() (interface{}, error) {
	return NaturalEven, nil
}

func (p *parser) callonLetBinding148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding148()
}

func (c *current) onLetBinding150() (interface{}, error) {
	return NaturalOdd, nil
}

func (p *parser) callonLetBinding150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding150()
}

func (c *current) onLetBinding152() (interface{}, error) {
	return NaturalToInteger, nil
}

func (p *parser) callonLetBinding152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding152()
}

func (c *current) onLetBinding154() (interface{}, error) {
	return NaturalShow, nil
}

func (p *parser) callonLetBinding154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding154()
}

func (c *current) onLetBinding156() (interface{}, error) {
	return NaturalSubtract, nil
}

func (p *parser) callonLetBinding156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding156()
}

func (c *current) onLetBinding158() (interface{}, error) {
	return IntegerToDouble, nil
}

func (p *parser) callonLetBinding158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding158()
}

func (c *current) onLetBinding160() (interface{}, error) {
	return IntegerShow, nil
}

func (p *parser) callonLetBinding160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding160()
}

func (c *current) onLetBinding162() (interface{}, error) {
	return DoubleShow, nil
}

func (p *parser) callonLetBinding162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding162()
}

func (c *current) onLetBinding164() (interface{}, error) {
	return ListBuild, nil
}

func (p *parser) callonLetBinding164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding164()
}

func (c *current) onLetBinding166() (interface{}, error) {
	return ListFold, nil
}

func (p *parser) callonLetBinding166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding166()
}

func (c *current) onLetBinding168() (interface{}, error) {
	return ListLength, nil
}

func (p *parser) callonLetBinding168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding168()
}

func (c *current) onLetBinding170() (interface{}, error) {
	return ListHead, nil
}

func (p *parser) callonLetBinding170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding170()
}

func (c *current) onLetBinding172() (interface{}, error) {
	return ListLast, nil
}

func (p *parser) callonLetBinding172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding172()
}

func (c *current) onLetBinding174() (interface{}, error) {
	return ListIndexed, nil
}

func (p *parser) callonLetBinding174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding174()
}

func (c *current) onLetBinding176() (interface{}, error) {
	return ListReverse, nil
}

func (p *parser) callonLetBinding176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding176()
}

func (c *current) onLetBinding178() (interface{}, error) {
	return OptionalBuild, nil
}

func (p *parser) callonLetBinding178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding178()
}

func (c *current) onLetBinding180() (interface{}, error) {
	return OptionalFold, nil
}

func (p *parser) callonLetBinding180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding180()
}

func (c *current) onLetBinding182() (interface{}, error) {
	return TextShow, nil
}

func (p *parser) callonLetBinding182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding182()
}

func (c *current) onLetBinding184() (interface{}, error) {
	return Bool, nil
}

func (p *parser) callonLetBinding184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding184()
}

func (c *current) onLetBinding186() (interface{}, error) {
	return True, nil
}

func (p *parser) callonLetBinding186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding186()
}

func (c *current) onLetBinding188() (interface{}, error) {
	return False, nil
}

func (p *parser) callonLetBinding188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding188()
}

func (c *current) onLetBinding190() (interface{}, error) {
	return Optional, nil
}

func (p *parser) callonLetBinding190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding190()
}

func (c *current) onLetBinding192() (interface{}, error) {
	return Natural, nil
}

func (p *parser) callonLetBinding192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding192()
}

func (c *current) onLetBinding194() (interface{}, error) {
	return Integer, nil
}

func (p *parser) callonLetBinding194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding194()
}

func (c *current) onLetBinding196() (interface{}, error) {
	return Double, nil
}

func (p *parser) callonLetBinding196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding196()
}

func (c *current) onLetBinding198() (interface{}, error) {
	return Text, nil
}

func (p *parser) callonLetBinding198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding198()
}

func (c *current) onLetBinding200() (interface{}, error) {
	return List, nil
}

func (p *parser) callonLetBinding200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding200()
}

func (c *current) onLetBinding202() (interface{}, error) {
	return None, nil
}

func (p *parser) callonLetBinding202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding202()
}

func (c *current) onLetBinding204() (interface{}, error) {
	return Type, nil
}

func (p *parser) callonLetBinding204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding204()
}

func (c *current) onLetBinding206() (interface{}, error) {
	return Kind, nil
}

func (p *parser) callonLetBinding206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding206()
}

func (c *current) onLetBinding208() (interface{}, error) {
	return Sort, nil
}

func (p *parser) callonLetBinding208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding208()
}

func (c *current) onLetBinding216() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLetBinding216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding216()
}

func (c *current) onLetBinding212(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonLetBinding212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding212(stack["label"])
}

func (c *current) onLetBinding232() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonLetBinding232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding232()
}

func (c *current) onLetBinding223() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLetBinding223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding223()
}

func (c *current) onLetBinding254() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonLetBinding254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding254()
}

func (c *current) onLetBinding244() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLetBinding244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding244()
}

func (c *current) onLetBinding220(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonLetBinding220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding220(stack["label"])
}

func (c *current) onLetBinding138(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonLetBinding138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding138(stack["label"])
}

func (c *current) onLetBinding1(label, a, v interface{}) (interface{}, error) {
	if a != nil {
		return Binding{
			Variable:   label.(string),
			Annotation: a.([]interface{})[0].(Expr),
			Value:      v.(Expr),
		}, nil
	} else {
		return Binding{
			Variable: label.(string),
			Value:    v.(Expr),
		}, nil
	}
}

func (p *parser) callonLetBinding1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding1(stack["label"], stack["a"], stack["v"])
}

func (c *current) onExpression15() (interface{}, error) {
	return NaturalBuild, nil
}

func (p *parser) callonExpression15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression15()
}

func (c *current) onExpression17() (interface{}, error) {
	return NaturalFold, nil
}

func (p *parser) callonExpression17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression17()
}

func (c *current) onExpression19() (interface{}, error) {
	return NaturalIsZero, nil
}

func (p *parser) callonExpression19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression19()
}

func (c *current) onExpression21() (interface{}, error) {
	return NaturalEven, nil
}

func (p *parser) callonExpression21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression21()
}

func (c *current) onExpression23() (interface{}, error) {
	return NaturalOdd, nil
}

func (p *parser) callonExpression23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression23()
}

func (c *current) onExpression25() (interface{}, error) {
	return NaturalToInteger, nil
}

func (p *parser) callonExpression25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression25()
}

func (c *current) onExpression27() (interface{}, error) {
	return NaturalShow, nil
}

func (p *parser) callonExpression27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression27()
}

func (c *current) onExpression29() (interface{}, error) {
	return NaturalSubtract, nil
}

func (p *parser) callonExpression29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression29()
}

func (c *current) onExpression31() (interface{}, error) {
	return IntegerToDouble, nil
}

func (p *parser) callonExpression31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression31()
}

func (c *current) onExpression33() (interface{}, error) {
	return IntegerShow, nil
}

func (p *parser) callonExpression33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression33()
}

func (c *current) onExpression35() (interface{}, error) {
	return DoubleShow, nil
}

func (p *parser) callonExpression35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression35()
}

func (c *current) onExpression37() (interface{}, error) {
	return ListBuild, nil
}

func (p *parser) callonExpression37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression37()
}

func (c *current) onExpression39() (interface{}, error) {
	return ListFold, nil
}

func (p *parser) callonExpression39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression39()
}

func (c *current) onExpression41() (interface{}, error) {
	return ListLength, nil
}

func (p *parser) callonExpression41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression41()
}

func (c *current) onExpression43() (interface{}, error) {
	return ListHead, nil
}

func (p *parser) callonExpression43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression43()
}

func (c *current) onExpression45() (interface{}, error) {
	return ListLast, nil
}

func (p *parser) callonExpression45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression45()
}

func (c *current) onExpression47() (interface{}, error) {
	return ListIndexed, nil
}

func (p *parser) callonExpression47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression47()
}

func (c *current) onExpression49() (interface{}, error) {
	return ListReverse, nil
}

func (p *parser) callonExpression49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression49()
}

func (c *current) onExpression51() (interface{}, error) {
	return OptionalBuild, nil
}

func (p *parser) callonExpression51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression51()
}

func (c *current) onExpression53() (interface{}, error) {
	return OptionalFold, nil
}

func (p *parser) callonExpression53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression53()
}

func (c *current) onExpression55() (interface{}, error) {
	return TextShow, nil
}

func (p *parser) callonExpression55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression55()
}

func (c *current) onExpression57() (interface{}, error) {
	return Bool, nil
}

func (p *parser) callonExpression57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression57()
}

func (c *current) onExpression59() (interface{}, error) {
	return True, nil
}

func (p *parser) callonExpression59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression59()
}

func (c *current) onExpression61() (interface{}, error) {
	return False, nil
}

func (p *parser) callonExpression61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression61()
}

func (c *current) onExpression63() (interface{}, error) {
	return Optional, nil
}

func (p *parser) callonExpression63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression63()
}

func (c *current) onExpression65() (interface{}, error) {
	return Natural, nil
}

func (p *parser) callonExpression65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression65()
}

func (c *current) onExpression67() (interface{}, error) {
	return Integer, nil
}

func (p *parser) callonExpression67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression67()
}

func (c *current) onExpression69() (interface{}, error) {
	return Double, nil
}

func (p *parser) callonExpression69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression69()
}

func (c *current) onExpression71() (interface{}, error) {
	return Text, nil
}

func (p *parser) callonExpression71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression71()
}

func (c *current) onExpression73() (interface{}, error) {
	return List, nil
}

func (p *parser) callonExpression73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression73()
}

func (c *current) onExpression75() (interface{}, error) {
	return None, nil
}

func (p *parser) callonExpression75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression75()
}

func (c *current) onExpression77() (interface{}, error) {
	return Type, nil
}

func (p *parser) callonExpression77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression77()
}

func (c *current) onExpression79() (interface{}, error) {
	return Kind, nil
}

func (p *parser) callonExpression79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression79()
}

func (c *current) onExpression81() (interface{}, error) {
	return Sort, nil
}

func (p *parser) callonExpression81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression81()
}

func (c *current) onExpression90() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExpression90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression90()
}

func (c *current) onExpression86(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonExpression86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression86(stack["label"])
}

func (c *current) onExpression106() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonExpression106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression106()
}

func (c *current) onExpression97() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExpression97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression97()
}

func (c *current) onExpression128() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonExpression128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression128()
}

func (c *current) onExpression118() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExpression118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression118()
}

func (c *current) onExpression94(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonExpression94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression94(stack["label"])
}

func (c *current) onExpression10(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonExpression10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression10(stack["label"])
}

func (c *current) onExpression145() (interface{}, error) {
	return NaturalBuild, nil
}

func (p *parser) callonExpression145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression145()
}

func (c *current) onExpression147() (interface{}, error) {
	return NaturalFold, nil
}

func (p *parser) callonExpression147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression147()
}

func (c *current) onExpression149() (interface{}, error) {
	return NaturalIsZero, nil
}

func (p *parser) callonExpression149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression149()
}

func (c *current) onExpression151() (interface{}, error) {
	return NaturalEven, nil
}

func (p *parser) callonExpression151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression151()
}

func (c *current) onExpression153() (interface{}, error) {
	return NaturalOdd, nil
}

func (p *parser) callonExpression153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression153()
}

func (c *current) onExpression155() (interface{}, error) {
	return NaturalToInteger, nil
}

func (p *parser) callonExpression155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression155()
}

func (c *current) onExpression157() (interface{}, error) {
	return NaturalShow, nil
}

func (p *parser) callonExpression157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression157()
}

func (c *current) onExpression159() (interface{}, error) {
	return NaturalSubtract, nil
}

func (p *parser) callonExpression159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression159()
}

func (c *current) onExpression161() (interface{}, error) {
	return IntegerToDouble, nil
}

func (p *parser) callonExpression161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression161()
}

func (c *current) onExpression163() (interface{}, error) {
	return IntegerShow, nil
}

func (p *parser) callonExpression163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression163()
}

func (c *current) onExpression165() (interface{}, error) {
	return DoubleShow, nil
}

func (p *parser) callonExpression165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression165()
}

func (c *current) onExpression167() (interface{}, error) {
	return ListBuild, nil
}

func (p *parser) callonExpression167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression167()
}

func (c *current) onExpression169() (interface{}, error) {
	return ListFold, nil
}

func (p *parser) callonExpression169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression169()
}

func (c *current) onExpression171() (interface{}, error) {
	return ListLength, nil
}

func (p *parser) callonExpression171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression171()
}

func (c *current) onExpression173() (interface{}, error) {
	return ListHead, nil
}

func (p *parser) callonExpression173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression173()
}

func (c *current) onExpression175() (interface{}, error) {
	return ListLast, nil
}

func (p *parser) callonExpression175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression175()
}

func (c *current) onExpression177() (interface{}, error) {
	return ListIndexed, nil
}

func (p *parser) callonExpression177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression177()
}

func (c *current) onExpression179() (interface{}, error) {
	return ListReverse, nil
}

func (p *parser) callonExpression179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression179()
}

func (c *current) onExpression181() (interface{}, error) {
	return OptionalBuild, nil
}

func (p *parser) callonExpression181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression181()
}

func (c *current) onExpression183() (interface{}, error) {
	return OptionalFold, nil
}

func (p *parser) callonExpression183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression183()
}

func (c *current) onExpression185() (interface{}, error) {
	return TextShow, nil
}

func (p *parser) callonExpression185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression185()
}

func (c *current) onExpression187() (interface{}, error) {
	return Bool, nil
}

func (p *parser) callonExpression187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression187()
}

func (c *current) onExpression189() (interface{}, error) {
	return True, nil
}

func (p *parser) callonExpression189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression189()
}

func (c *current) onExpression191() (interface{}, error) {
	return False, nil
}

func (p *parser) callonExpression191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression191()
}

func (c *current) onExpression193() (interface{}, error) {
	return Optional, nil
}

func (p *parser) callonExpression193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression193()
}

func (c *current) onExpression195() (interface{}, error) {
	return Natural, nil
}

func (p *parser) callonExpression195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression195()
}

func (c *current) onExpression197() (interface{}, error) {
	return Integer, nil
}

func (p *parser) callonExpression197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression197()
}

func (c *current) onExpression199() (interface{}, error) {
	return Double, nil
}

func (p *parser) callonExpression199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression199()
}

func (c *current) onExpression201() (interface{}, error) {
	return Text, nil
}

func (p *parser) callonExpression201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression201()
}

func (c *current) onExpression203() (interface{}, error) {
	return List, nil
}

func (p *parser) callonExpression203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression203()
}

func (c *current) onExpression205() (interface{}, error) {
	return None, nil
}

func (p *parser) callonExpression205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression205()
}

func (c *current) onExpression207() (interface{}, error) {
	return Type, nil
}

func (p *parser) callonExpression207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression207()
}

func (c *current) onExpression209() (interface{}, error) {
	return Kind, nil
}

func (p *parser) callonExpression209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression209()
}

func (c *current) onExpression211() (interface{}, error) {
	return Sort, nil
}

func (p *parser) callonExpression211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression211()
}

func (c *current) onExpression219() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExpression219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression219()
}

func (c *current) onExpression215(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonExpression215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression215(stack["label"])
}

func (c *current) onExpression235() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonExpression235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression235()
}

func (c *current) onExpression226() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExpression226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression226()
}

func (c *current) onExpression257() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonExpression257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression257()
}

func (c *current) onExpression247() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExpression247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression247()
}

func (c *current) onExpression223(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonExpression223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression223(stack["label"])
}

func (c *current) onExpression141(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonExpression141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression141(stack["label"])
}

func (c *current) onExpression2(label, t, body interface{}) (interface{}, error) {
	return &LambdaExpr{Label: label.(string), Type: t.(Expr), Body: body.(Expr)}, nil

}

func (p *parser) callonExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression2(stack["label"], stack["t"], stack["body"])
}

func (c *current) onExpression284(cond, t, f interface{}) (interface{}, error) {
	return BoolIf{cond.(Expr), t.(Expr), f.(Expr)}, nil

}

func (p *parser) callonExpression284() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression284(stack["cond"], stack["t"], stack["f"])
}

func (c *current) onExpression300(bindings, b interface{}) (interface{}, error) {
	bs := make([]Binding, len(bindings.([]interface{})))
	for i, binding := range bindings.([]interface{}) {
		bs[i] = binding.(Binding)
	}
	return MakeLet(b.(Expr), bs...), nil

}

func (p *parser) callonExpression300() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression300(stack["bindings"], stack["b"])
}

func (c *current) onExpression324() (interface{}, error) {
	return NaturalBuild, nil
}

func (p *parser) callonExpression324() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression324()
}

func (c *current) onExpression326() (interface{}, error) {
	return NaturalFold, nil
}

func (p *parser) callonExpression326() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression326()
}

func (c *current) onExpression328() (interface{}, error) {
	return NaturalIsZero, nil
}

func (p *parser) callonExpression328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression328()
}

func (c *current) onExpression330() (interface{}, error) {
	return NaturalEven, nil
}

func (p *parser) callonExpression330() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression330()
}

func (c *current) onExpression332() (interface{}, error) {
	return NaturalOdd, nil
}

func (p *parser) callonExpression332() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression332()
}

func (c *current) onExpression334() (interface{}, error) {
	return NaturalToInteger, nil
}

func (p *parser) callonExpression334() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression334()
}

func (c *current) onExpression336() (interface{}, error) {
	return NaturalShow, nil
}

func (p *parser) callonExpression336() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression336()
}

func (c *current) onExpression338() (interface{}, error) {
	return NaturalSubtract, nil
}

func (p *parser) callonExpression338() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression338()
}

func (c *current) onExpression340() (interface{}, error) {
	return IntegerToDouble, nil
}

func (p *parser) callonExpression340() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression340()
}

func (c *current) onExpression342() (interface{}, error) {
	return IntegerShow, nil
}

func (p *parser) callonExpression342() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression342()
}

func (c *current) onExpression344() (interface{}, error) {
	return DoubleShow, nil
}

func (p *parser) callonExpression344() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression344()
}

func (c *current) onExpression346() (interface{}, error) {
	return ListBuild, nil
}

func (p *parser) callonExpression346() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression346()
}

func (c *current) onExpression348() (interface{}, error) {
	return ListFold, nil
}

func (p *parser) callonExpression348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression348()
}

func (c *current) onExpression350() (interface{}, error) {
	return ListLength, nil
}

func (p *parser) callonExpression350() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression350()
}

func (c *current) onExpression352() (interface{}, error) {
	return ListHead, nil
}

func (p *parser) callonExpression352() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression352()
}

func (c *current) onExpression354() (interface{}, error) {
	return ListLast, nil
}

func (p *parser) callonExpression354() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression354()
}

func (c *current) onExpression356() (interface{}, error) {
	return ListIndexed, nil
}

func (p *parser) callonExpression356() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression356()
}

func (c *current) onExpression358() (interface{}, error) {
	return ListReverse, nil
}

func (p *parser) callonExpression358() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression358()
}

func (c *current) onExpression360() (interface{}, error) {
	return OptionalBuild, nil
}

func (p *parser) callonExpression360() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression360()
}

func (c *current) onExpression362() (interface{}, error) {
	return OptionalFold, nil
}

func (p *parser) callonExpression362() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression362()
}

func (c *current) onExpression364() (interface{}, error) {
	return TextShow, nil
}

func (p *parser) callonExpression364() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression364()
}

func (c *current) onExpression366() (interface{}, error) {
	return Bool, nil
}

func (p *parser) callonExpression366() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression366()
}

func (c *current) onExpression368() (interface{}, error) {
	return True, nil
}

func (p *parser) callonExpression368() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression368()
}

func (c *current) onExpression370() (interface{}, error) {
	return False, nil
}

func (p *parser) callonExpression370() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression370()
}

func (c *current) onExpression372() (interface{}, error) {
	return Optional, nil
}

func (p *parser) callonExpression372() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression372()
}

func (c *current) onExpression374() (interface{}, error) {
	return Natural, nil
}

func (p *parser) callonExpression374() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression374()
}

func (c *current) onExpression376() (interface{}, error) {
	return Integer, nil
}

func (p *parser) callonExpression376() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression376()
}

func (c *current) onExpression378() (interface{}, error) {
	return Double, nil
}

func (p *parser) callonExpression378() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression378()
}

func (c *current) onExpression380() (interface{}, error) {
	return Text, nil
}

func (p *parser) callonExpression380() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression380()
}

func (c *current) onExpression382() (interface{}, error) {
	return List, nil
}

func (p *parser) callonExpression382() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression382()
}

func (c *current) onExpression384() (interface{}, error) {
	return None, nil
}

func (p *parser) callonExpression384() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression384()
}

func (c *current) onExpression386() (interface{}, error) {
	return Type, nil
}

func (p *parser) callonExpression386() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression386()
}

func (c *current) onExpression388() (interface{}, error) {
	return Kind, nil
}

func (p *parser) callonExpression388() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression388()
}

func (c *current) onExpression390() (interface{}, error) {
	return Sort, nil
}

func (p *parser) callonExpression390() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression390()
}

func (c *current) onExpression399() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExpression399() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression399()
}

func (c *current) onExpression395(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonExpression395() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression395(stack["label"])
}

func (c *current) onExpression415() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonExpression415() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression415()
}

func (c *current) onExpression406() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExpression406() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression406()
}

func (c *current) onExpression437() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonExpression437() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression437()
}

func (c *current) onExpression427() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExpression427() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression427()
}

func (c *current) onExpression403(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonExpression403() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression403(stack["label"])
}

func (c *current) onExpression319(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonExpression319() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression319(stack["label"])
}

func (c *current) onExpression454() (interface{}, error) {
	return NaturalBuild, nil
}

func (p *parser) callonExpression454() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression454()
}

func (c *current) onExpression456() (interface{}, error) {
	return NaturalFold, nil
}

func (p *parser) callonExpression456() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression456()
}

func (c *current) onExpression458() (interface{}, error) {
	return NaturalIsZero, nil
}

func (p *parser) callonExpression458() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression458()
}

func (c *current) onExpression460() (interface{}, error) {
	return NaturalEven, nil
}

func (p *parser) callonExpression460() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression460()
}

func (c *current) onExpression462() (interface{}, error) {
	return NaturalOdd, nil
}

func (p *parser) callonExpression462() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression462()
}

func (c *current) onExpression464() (interface{}, error) {
	return NaturalToInteger, nil
}

func (p *parser) callonExpression464() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression464()
}

func (c *current) onExpression466() (interface{}, error) {
	return NaturalShow, nil
}

func (p *parser) callonExpression466() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression466()
}

func (c *current) onExpression468() (interface{}, error) {
	return NaturalSubtract, nil
}

func (p *parser) callonExpression468() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression468()
}

func (c *current) onExpression470() (interface{}, error) {
	return IntegerToDouble, nil
}

func (p *parser) callonExpression470() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression470()
}

func (c *current) onExpression472() (interface{}, error) {
	return IntegerShow, nil
}

func (p *parser) callonExpression472() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression472()
}

func (c *current) onExpression474() (interface{}, error) {
	return DoubleShow, nil
}

func (p *parser) callonExpression474() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression474()
}

func (c *current) onExpression476() (interface{}, error) {
	return ListBuild, nil
}

func (p *parser) callonExpression476() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression476()
}

func (c *current) onExpression478() (interface{}, error) {
	return ListFold, nil
}

func (p *parser) callonExpression478() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression478()
}

func (c *current) onExpression480() (interface{}, error) {
	return ListLength, nil
}

func (p *parser) callonExpression480() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression480()
}

func (c *current) onExpression482() (interface{}, error) {
	return ListHead, nil
}

func (p *parser) callonExpression482() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression482()
}

func (c *current) onExpression484() (interface{}, error) {
	return ListLast, nil
}

func (p *parser) callonExpression484() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression484()
}

func (c *current) onExpression486() (interface{}, error) {
	return ListIndexed, nil
}

func (p *parser) callonExpression486() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression486()
}

func (c *current) onExpression488() (interface{}, error) {
	return ListReverse, nil
}

func (p *parser) callonExpression488() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression488()
}

func (c *current) onExpression490() (interface{}, error) {
	return OptionalBuild, nil
}

func (p *parser) callonExpression490() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression490()
}

func (c *current) onExpression492() (interface{}, error) {
	return OptionalFold, nil
}

func (p *parser) callonExpression492() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression492()
}

func (c *current) onExpression494() (interface{}, error) {
	return TextShow, nil
}

func (p *parser) callonExpression494() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression494()
}

func (c *current) onExpression496() (interface{}, error) {
	return Bool, nil
}

func (p *parser) callonExpression496() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression496()
}

func (c *current) onExpression498() (interface{}, error) {
	return True, nil
}

func (p *parser) callonExpression498() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression498()
}

func (c *current) onExpression500() (interface{}, error) {
	return False, nil
}

func (p *parser) callonExpression500() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression500()
}

func (c *current) onExpression502() (interface{}, error) {
	return Optional, nil
}

func (p *parser) callonExpression502() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression502()
}

func (c *current) onExpression504() (interface{}, error) {
	return Natural, nil
}

func (p *parser) callonExpression504() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression504()
}

func (c *current) onExpression506() (interface{}, error) {
	return Integer, nil
}

func (p *parser) callonExpression506() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression506()
}

func (c *current) onExpression508() (interface{}, error) {
	return Double, nil
}

func (p *parser) callonExpression508() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression508()
}

func (c *current) onExpression510() (interface{}, error) {
	return Text, nil
}

func (p *parser) callonExpression510() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression510()
}

func (c *current) onExpression512() (interface{}, error) {
	return List, nil
}

func (p *parser) callonExpression512() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression512()
}

func (c *current) onExpression514() (interface{}, error) {
	return None, nil
}

func (p *parser) callonExpression514() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression514()
}

func (c *current) onExpression516() (interface{}, error) {
	return Type, nil
}

func (p *parser) callonExpression516() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression516()
}

func (c *current) onExpression518() (interface{}, error) {
	return Kind, nil
}

func (p *parser) callonExpression518() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression518()
}

func (c *current) onExpression520() (interface{}, error) {
	return Sort, nil
}

func (p *parser) callonExpression520() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression520()
}

func (c *current) onExpression528() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExpression528() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression528()
}

func (c *current) onExpression524(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonExpression524() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression524(stack["label"])
}

func (c *current) onExpression544() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonExpression544() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression544()
}

func (c *current) onExpression535() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExpression535() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression535()
}

func (c *current) onExpression566() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonExpression566() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression566()
}

func (c *current) onExpression556() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExpression556() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression556()
}

func (c *current) onExpression532(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonExpression532() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression532(stack["label"])
}

func (c *current) onExpression450(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonExpression450() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression450(stack["label"])
}

func (c *current) onExpression309(label, t, body interface{}) (interface{}, error) {
	return &Pi{Label: label.(string), Type: t.(Expr), Body: body.(Expr)}, nil

}

func (p *parser) callonExpression309() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression309(stack["label"], stack["t"], stack["body"])
}

func (c *current) onExpression593(o, e interface{}) (interface{}, error) {
	return FnType(o.(Expr), e.(Expr)), nil
}

func (p *parser) callonExpression593() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression593(stack["o"], stack["e"])
}

func (c *current) onExpression604(h, u, a interface{}) (interface{}, error) {
	return Merge{Handler: h.(Expr), Union: u.(Expr), Annotation: a.(Expr)}, nil

}

func (p *parser) callonExpression604() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression604(stack["h"], stack["u"], stack["a"])
}

func (c *current) onExpression619(e, t interface{}) (interface{}, error) {
	return ToMap{e.(Expr), t.(Expr)}, nil
}

func (p *parser) callonExpression619() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression619(stack["e"], stack["t"])
}

func (c *current) onExpression630(a interface{}) (interface{}, error) {
	return Assert{Annotation: a.(Expr)}, nil
}

func (p *parser) callonExpression630() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression630(stack["a"])
}

func (c *current) onAnnotation1(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAnnotation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnnotation1(stack["a"])
}

func (c *current) onAnnotatedExpression1(e, a interface{}) (interface{}, error) {
	if a == nil {
		return e, nil
	}
	return Annot{e.(Expr), a.([]interface{})[1].(Expr)}, nil

}

func (p *parser) callonAnnotatedExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnnotatedExpression1(stack["e"], stack["a"])
}

func (c *current) onEmptyList1(a interface{}) (interface{}, error) {
	return EmptyList{a.(Expr)}, nil
}

func (p *parser) callonEmptyList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmptyList1(stack["a"])
}

func (c *current) onImportAltExpression1(first, rest interface{}) (interface{}, error) {
	return ParseOperator(ImportAltOp, first, rest), nil
}

func (p *parser) callonImportAltExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportAltExpression1(stack["first"], stack["rest"])
}

func (c *current) onOrExpression1(first, rest interface{}) (interface{}, error) {
	return ParseOperator(OrOp, first, rest), nil
}

func (p *parser) callonOrExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrExpression1(stack["first"], stack["rest"])
}

func (c *current) onPlusExpression1(first, rest interface{}) (interface{}, error) {
	return ParseOperator(PlusOp, first, rest), nil
}

func (p *parser) callonPlusExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPlusExpression1(stack["first"], stack["rest"])
}

func (c *current) onTextAppendExpression1(first, rest interface{}) (interface{}, error) {
	return ParseOperator(TextAppendOp, first, rest), nil
}

func (p *parser) callonTextAppendExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextAppendExpression1(stack["first"], stack["rest"])
}

func (c *current) onListAppendExpression1(first, rest interface{}) (interface{}, error) {
	return ParseOperator(ListAppendOp, first, rest), nil
}

func (p *parser) callonListAppendExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListAppendExpression1(stack["first"], stack["rest"])
}

func (c *current) onAndExpression1(first, rest interface{}) (interface{}, error) {
	return ParseOperator(AndOp, first, rest), nil
}

func (p *parser) callonAndExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndExpression1(stack["first"], stack["rest"])
}

func (c *current) onCombineExpression1(first, rest interface{}) (interface{}, error) {
	return ParseOperator(RecordMergeOp, first, rest), nil
}

func (p *parser) callonCombineExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCombineExpression1(stack["first"], stack["rest"])
}

func (c *current) onPreferExpression1(first, rest interface{}) (interface{}, error) {
	return ParseOperator(RightBiasedRecordMergeOp, first, rest), nil
}

func (p *parser) callonPreferExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreferExpression1(stack["first"], stack["rest"])
}

func (c *current) onCombineTypesExpression1(first, rest interface{}) (interface{}, error) {
	return ParseOperator(RecordTypeMergeOp, first, rest), nil
}

func (p *parser) callonCombineTypesExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCombineTypesExpression1(stack["first"], stack["rest"])
}

func (c *current) onTimesExpression1(first, rest interface{}) (interface{}, error) {
	return ParseOperator(TimesOp, first, rest), nil
}

func (p *parser) callonTimesExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimesExpression1(stack["first"], stack["rest"])
}

func (c *current) onEqualExpression1(first, rest interface{}) (interface{}, error) {
	return ParseOperator(EqOp, first, rest), nil
}

func (p *parser) callonEqualExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualExpression1(stack["first"], stack["rest"])
}

func (c *current) onNotEqualExpression1(first, rest interface{}) (interface{}, error) {
	return ParseOperator(NeOp, first, rest), nil
}

func (p *parser) callonNotEqualExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotEqualExpression1(stack["first"], stack["rest"])
}

func (c *current) onEquivalentExpression1(first, rest interface{}) (interface{}, error) {
	return ParseOperator(EquivOp, first, rest), nil
}

func (p *parser) callonEquivalentExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEquivalentExpression1(stack["first"], stack["rest"])
}

func (c *current) onApplicationExpression1(f, rest interface{}) (interface{}, error) {
	e := f.(Expr)
	if rest == nil {
		return e, nil
	}
	for _, arg := range rest.([]interface{}) {
		e = Apply(e, arg.([]interface{})[1].(Expr))
	}
	return e, nil

}

func (p *parser) callonApplicationExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApplicationExpression1(stack["f"], stack["rest"])
}

func (c *current) onFirstApplicationExpression2(h, u interface{}) (interface{}, error) {
	return Merge{Handler: h.(Expr), Union: u.(Expr)}, nil

}

func (p *parser) callonFirstApplicationExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstApplicationExpression2(stack["h"], stack["u"])
}

func (c *current) onFirstApplicationExpression11(e interface{}) (interface{}, error) {
	return Some{e.(Expr)}, nil
}

func (p *parser) callonFirstApplicationExpression11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstApplicationExpression11(stack["e"])
}

func (c *current) onFirstApplicationExpression17(e interface{}) (interface{}, error) {
	return ToMap{Record: e.(Expr)}, nil
}

func (p *parser) callonFirstApplicationExpression17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstApplicationExpression17(stack["e"])
}

func (c *current) onSelectorExpression1(e, ls interface{}) (interface{}, error) {
	expr := e.(Expr)
	labels := ls.([]interface{})
	for _, labelSelector := range labels {
		selectorIface := labelSelector.([]interface{})[3]
		switch selector := selectorIface.(type) {
		case string:
			expr = Field{expr, selector}
		case []string:
			expr = Project{expr, selector}
		case Expr:
			expr = ProjectType{expr, selector}
		default:
			return nil, errors.New("unimplemented")
		}
	}
	return expr, nil
}

func (p *parser) callonSelectorExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectorExpression1(stack["e"], stack["ls"])
}

func (c *current) onSelector6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSelector6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelector6()
}

func (c *current) onSelector2(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonSelector2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelector2(stack["label"])
}

func (c *current) onSelector22() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonSelector22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelector22()
}

func (c *current) onSelector13() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSelector13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelector13()
}

func (c *current) onSelector44() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonSelector44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelector44()
}

func (c *current) onSelector34() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSelector34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelector34()
}

func (c *current) onSelector10(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonSelector10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelector10(stack["label"])
}

func (c *current) onLabels13() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabels13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels13()
}

func (c *current) onLabels9(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonLabels9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels9(stack["label"])
}

func (c *current) onLabels29() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonLabels29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels29()
}

func (c *current) onLabels20() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabels20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels20()
}

func (c *current) onLabels51() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonLabels51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels51()
}

func (c *current) onLabels41() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLabels41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels41()
}

func (c *current) onLabels17(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonLabels17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels17(stack["label"])
}

func (c *current) onLabels74() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabels74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels74()
}

func (c *current) onLabels70(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonLabels70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels70(stack["label"])
}

func (c *current) onLabels90() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonLabels90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels90()
}

func (c *current) onLabels81() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabels81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels81()
}

func (c *current) onLabels112() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonLabels112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels112()
}

func (c *current) onLabels102() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLabels102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels102()
}

func (c *current) onLabels78(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonLabels78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels78(stack["label"])
}

func (c *current) onLabels1(optclauses interface{}) (interface{}, error) {
	if optclauses == nil {
		return []string{}, nil
	}
	clauses := optclauses.([]interface{})
	labels := []string{clauses[0].(string)}
	for _, next := range clauses[2].([]interface{}) {
		labels = append(labels, next.([]interface{})[2].(string))
	}
	return labels, nil
}

func (p *parser) callonLabels1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels1(stack["optclauses"])
}

func (c *current) onTypeSelector1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonTypeSelector1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeSelector1(stack["e"])
}

func (c *current) onPrimitiveExpression3() (interface{}, error) {
	d, err := strconv.ParseFloat(string(c.text), 64)
	if err != nil {
		return nil, err
	}
	return DoubleLit(d), nil
}

func (p *parser) callonPrimitiveExpression3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression3()
}

func (c *current) onPrimitiveExpression27() (interface{}, error) {
	return DoubleLit(math.Inf(1)), nil
}

func (p *parser) callonPrimitiveExpression27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression27()
}

func (c *current) onPrimitiveExpression29() (interface{}, error) {
	return DoubleLit(math.Inf(-1)), nil
}

func (p *parser) callonPrimitiveExpression29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression29()
}

func (c *current) onPrimitiveExpression31() (interface{}, error) {
	return DoubleLit(math.NaN()), nil
}

func (p *parser) callonPrimitiveExpression31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression31()
}

func (c *current) onPrimitiveExpression33() (interface{}, error) {
	i, err := strconv.Atoi(string(c.text))
	return NaturalLit(i), err
}

func (p *parser) callonPrimitiveExpression33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression33()
}

func (c *current) onPrimitiveExpression39() (interface{}, error) {
	i, err := strconv.Atoi(string(c.text))
	return NaturalLit(i), err
}

func (p *parser) callonPrimitiveExpression39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression39()
}

func (c *current) onPrimitiveExpression36() (interface{}, error) {
	i, err := strconv.Atoi(string(c.text))
	if err != nil {
		return nil, err
	}
	return IntegerLit(i), nil
}

func (p *parser) callonPrimitiveExpression36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression36()
}

func (c *current) onPrimitiveExpression43(r interface{}) (interface{}, error) {
	return r, nil
}

func (p *parser) callonPrimitiveExpression43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression43(stack["r"])
}

func (c *current) onPrimitiveExpression51(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonPrimitiveExpression51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression51(stack["u"])
}

func (c *current) onPrimitiveExpression61(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonPrimitiveExpression61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression61(stack["e"])
}

func (c *current) onRecordTypeOrLiteral2() (interface{}, error) {
	return RecordLit{}, nil
}

func (p *parser) callonRecordTypeOrLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordTypeOrLiteral2()
}

func (c *current) onRecordTypeOrLiteral6() (interface{}, error) {
	return Record{}, nil
}

func (p *parser) callonRecordTypeOrLiteral6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordTypeOrLiteral6()
}

func (c *current) onRecordTypeField9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRecordTypeField9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordTypeField9()
}

func (c *current) onRecordTypeField5(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonRecordTypeField5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordTypeField5(stack["label"])
}

func (c *current) onRecordTypeField25() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonRecordTypeField25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordTypeField25()
}

func (c *current) onRecordTypeField16() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRecordTypeField16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordTypeField16()
}

func (c *current) onRecordTypeField47() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonRecordTypeField47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordTypeField47()
}

func (c *current) onRecordTypeField37() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRecordTypeField37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordTypeField37()
}

func (c *current) onRecordTypeField13(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonRecordTypeField13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordTypeField13(stack["label"])
}

func (c *current) onRecordTypeField1(name, expr interface{}) (interface{}, error) {
	return []interface{}{name, expr}, nil
}

func (p *parser) callonRecordTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordTypeField1(stack["name"], stack["expr"])
}

func (c *current) onMoreRecordType1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonMoreRecordType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMoreRecordType1(stack["f"])
}

func (c *current) onNonEmptyRecordType1(first, rest interface{}) (interface{}, error) {
	fields := rest.([]interface{})
	content := make(Record, len(fields)+1)
	content[first.([]interface{})[0].(string)] = first.([]interface{})[1].(Expr)
	for _, field := range fields {
		fieldName := field.([]interface{})[0].(string)
		if _, ok := content[fieldName]; ok {
			return nil, fmt.Errorf("Duplicate field %s in record", fieldName)
		}
		content[fieldName] = field.([]interface{})[1].(Expr)
	}
	return content, nil

}

func (p *parser) callonNonEmptyRecordType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonEmptyRecordType1(stack["first"], stack["rest"])
}

func (c *current) onRecordLiteralField9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRecordLiteralField9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordLiteralField9()
}

func (c *current) onRecordLiteralField5(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonRecordLiteralField5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordLiteralField5(stack["label"])
}

func (c *current) onRecordLiteralField25() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonRecordLiteralField25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordLiteralField25()
}

func (c *current) onRecordLiteralField16() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRecordLiteralField16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordLiteralField16()
}

func (c *current) onRecordLiteralField47() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonRecordLiteralField47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordLiteralField47()
}

func (c *current) onRecordLiteralField37() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRecordLiteralField37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordLiteralField37()
}

func (c *current) onRecordLiteralField13(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonRecordLiteralField13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordLiteralField13(stack["label"])
}

func (c *current) onRecordLiteralField1(name, expr interface{}) (interface{}, error) {
	return []interface{}{name, expr}, nil
}

func (p *parser) callonRecordLiteralField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordLiteralField1(stack["name"], stack["expr"])
}

func (c *current) onMoreRecordLiteral1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonMoreRecordLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMoreRecordLiteral1(stack["f"])
}

func (c *current) onNonEmptyRecordLiteral1(first, rest interface{}) (interface{}, error) {
	fields := rest.([]interface{})
	content := make(RecordLit, len(fields)+1)
	content[first.([]interface{})[0].(string)] = first.([]interface{})[1].(Expr)
	for _, field := range fields {
		fieldName := field.([]interface{})[0].(string)
		if _, ok := content[fieldName]; ok {
			return nil, fmt.Errorf("Duplicate field %s in record", fieldName)
		}
		content[fieldName] = field.([]interface{})[1].(Expr)
	}
	return content, nil

}

func (p *parser) callonNonEmptyRecordLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonEmptyRecordLiteral1(stack["first"], stack["rest"])
}

func (c *current) onUnionType3() (interface{}, error) {
	return UnionType{}, nil
}

func (p *parser) callonUnionType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnionType3()
}

func (c *current) onNonEmptyUnionType1(first, rest interface{}) (interface{}, error) {
	alternatives := make(UnionType)
	first2 := first.([]interface{})
	if first2[1] == nil {
		alternatives[first2[0].(string)] = nil
	} else {
		alternatives[first2[0].(string)] = first2[1].([]interface{})[3].(Expr)
	}
	if rest == nil {
		return UnionType(alternatives), nil
	}
	for _, alternativeSyntax := range rest.([]interface{}) {
		alternative := alternativeSyntax.([]interface{})[3].([]interface{})
		name := alternative[0].(string)
		if _, ok := alternatives[name]; ok {
			return nil, fmt.Errorf("Duplicate alternative %s in union", name)
		}

		if alternative[1] == nil {
			alternatives[name] = nil
		} else {
			alternatives[name] = alternative[1].([]interface{})[3].(Expr)
		}
	}
	return alternatives, nil
}

func (p *parser) callonNonEmptyUnionType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonEmptyUnionType1(stack["first"], stack["rest"])
}

func (c *current) onUnionVariant7() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUnionVariant7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnionVariant7()
}

func (c *current) onUnionVariant3(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonUnionVariant3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnionVariant3(stack["label"])
}

func (c *current) onUnionVariant23() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonUnionVariant23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnionVariant23()
}

func (c *current) onUnionVariant14() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUnionVariant14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnionVariant14()
}

func (c *current) onUnionVariant45() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonUnionVariant45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnionVariant45()
}

func (c *current) onUnionVariant35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnionVariant35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnionVariant35()
}

func (c *current) onUnionVariant11(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonUnionVariant11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnionVariant11(stack["label"])
}

func (c *current) onMoreList1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonMoreList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMoreList1(stack["e"])
}

func (c *current) onNonEmptyListLiteral1(first, rest interface{}) (interface{}, error) {
	exprs := rest.([]interface{})
	content := make(NonEmptyList, len(exprs)+1)
	content[0] = first.(Expr)
	for i, expr := range exprs {
		content[i+1] = expr.(Expr)
	}
	return content, nil

}

func (p *parser) callonNonEmptyListLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonEmptyListLiteral1(stack["first"], stack["rest"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := string(strconv.AppendQuote([]byte{}, lit.val)) + ignoreCase // wrap 'lit.val' with double quotes
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
